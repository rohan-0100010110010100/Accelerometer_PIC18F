

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Apr 24 08:10:24 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,delta=1
    49                           	psect	text39,global,reloc=2,class=CODE,delta=1
    50                           	psect	text40,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53  0000                     
    54                           ; Version 1.44
    55                           ; Generated 14/09/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F46K22 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	mediumconst
    90  00FE9A                     __pmediumconst:
    91                           	opt stack 0
    92  00FE9A  00                 	db	0
    93  00FE9B                     _dpowers:
    94                           	opt stack 0
    95  00FE9B  0001               	dw	1
    96  00FE9D  0000               	dw	0
    97  00FE9F  000A               	dw	10
    98  00FEA1  0000               	dw	0
    99  00FEA3  0064               	dw	100
   100  00FEA5  0000               	dw	0
   101  00FEA7  03E8               	dw	1000
   102  00FEA9  0000               	dw	0
   103  00FEAB  2710               	dw	10000
   104  00FEAD  0000               	dw	0
   105  00FEAF  86A0               	dw	34464
   106  00FEB1  0001               	dw	1
   107  00FEB3  4240               	dw	16960
   108  00FEB5  000F               	dw	15
   109  00FEB7  9680               	dw	38528
   110  00FEB9  0098               	dw	152
   111  00FEBB  E100               	dw	57600
   112  00FEBD  05F5               	dw	1525
   113  00FEBF  CA00               	dw	51712
   114  00FEC1  3B9A               	dw	15258
   115  00FEC3                     __end_of_dpowers:
   116                           	opt stack 0
   117  00FEC3                     __powers_:
   118                           	opt stack 0
   119  00FEC3  00                 	db	0
   120  00FEC4  80                 	db	128
   121  00FEC5  3F                 	db	63
   122  00FEC6  00                 	db	0
   123  00FEC7  20                 	db	32
   124  00FEC8  41                 	db	65
   125  00FEC9  00                 	db	0
   126  00FECA  C8                 	db	200
   127  00FECB  42                 	db	66
   128  00FECC  00                 	db	0
   129  00FECD  7A                 	db	122
   130  00FECE  44                 	db	68
   131  00FECF  40                 	db	64
   132  00FED0  1C                 	db	28
   133  00FED1  46                 	db	70
   134  00FED2  50                 	db	80
   135  00FED3  C3                 	db	195
   136  00FED4  47                 	db	71
   137  00FED5  24                 	db	36
   138  00FED6  74                 	db	116
   139  00FED7  49                 	db	73
   140  00FED8  97                 	db	151
   141  00FED9  18                 	db	24
   142  00FEDA  4B                 	db	75
   143  00FEDB  BC                 	db	188
   144  00FEDC  BE                 	db	190
   145  00FEDD  4C                 	db	76
   146  00FEDE  6B                 	db	107
   147  00FEDF  6E                 	db	110
   148  00FEE0  4E                 	db	78
   149  00FEE1  03                 	db	3
   150  00FEE2  15                 	db	21
   151  00FEE3  50                 	db	80
   152  00FEE4  79                 	db	121
   153  00FEE5  AD                 	db	173
   154  00FEE6  60                 	db	96
   155  00FEE7  F3                 	db	243
   156  00FEE8  49                 	db	73
   157  00FEE9  71                 	db	113
   158  00FEEA                     __end_of__powers_:
   159                           	opt stack 0
   160  00FEEA                     __npowers_:
   161                           	opt stack 0
   162  00FEEA  00                 	db	0
   163  00FEEB  80                 	db	128
   164  00FEEC  3F                 	db	63
   165  00FEED  CD                 	db	205
   166  00FEEE  CC                 	db	204
   167  00FEEF  3D                 	db	61
   168  00FEF0  D7                 	db	215
   169  00FEF1  23                 	db	35
   170  00FEF2  3C                 	db	60
   171  00FEF3  12                 	db	18
   172  00FEF4  83                 	db	131
   173  00FEF5  3A                 	db	58
   174  00FEF6  B7                 	db	183
   175  00FEF7  D1                 	db	209
   176  00FEF8  38                 	db	56
   177  00FEF9  C6                 	db	198
   178  00FEFA  27                 	db	39
   179  00FEFB  37                 	db	55
   180  00FEFC  38                 	db	56
   181  00FEFD  86                 	db	134
   182  00FEFE  35                 	db	53
   183  00FEFF  C0                 	db	192
   184  00FF00  D6                 	db	214
   185  00FF01  33                 	db	51
   186  00FF02  CC                 	db	204
   187  00FF03  2B                 	db	43
   188  00FF04  32                 	db	50
   189  00FF05  70                 	db	112
   190  00FF06  89                 	db	137
   191  00FF07  30                 	db	48
   192  00FF08  E7                 	db	231
   193  00FF09  DB                 	db	219
   194  00FF0A  2E                 	db	46
   195  00FF0B  E5                 	db	229
   196  00FF0C  3C                 	db	60
   197  00FF0D  1E                 	db	30
   198  00FF0E  42                 	db	66
   199  00FF0F  A2                 	db	162
   200  00FF10  0D                 	db	13
   201  00FF11                     __end_of__npowers_:
   202                           	opt stack 0
   203  00FF11                     exp@coeff:
   204                           	opt stack 0
   205  00FF11  00                 	db	0
   206  00FF12  80                 	db	128
   207  00FF13  3F                 	db	63
   208  00FF14  72                 	db	114
   209  00FF15  31                 	db	49
   210  00FF16  3F                 	db	63
   211  00FF17  FE                 	db	254
   212  00FF18  75                 	db	117
   213  00FF19  3E                 	db	62
   214  00FF1A  58                 	db	88
   215  00FF1B  63                 	db	99
   216  00FF1C  3D                 	db	61
   217  00FF1D  95                 	db	149
   218  00FF1E  1D                 	db	29
   219  00FF1F  3C                 	db	60
   220  00FF20  C5                 	db	197
   221  00FF21  AE                 	db	174
   222  00FF22  3A                 	db	58
   223  00FF23  79                 	db	121
   224  00FF24  21                 	db	33
   225  00FF25  39                 	db	57
   226  00FF26  94                 	db	148
   227  00FF27  80                 	db	128
   228  00FF28  37                 	db	55
   229  00FF29  93                 	db	147
   230  00FF2A  A7                 	db	167
   231  00FF2B  35                 	db	53
   232  00FF2C  56                 	db	86
   233  00FF2D  15                 	db	21
   234  00FF2E  34                 	db	52
   235  00FF2F                     __end_ofexp@coeff:
   236                           	opt stack 0
   237  00FF2F                     log@coeff:
   238                           	opt stack 0
   239  00FF2F  00                 	db	0
   240  00FF30  00                 	db	0
   241  00FF31  00                 	db	0
   242  00FF32  00                 	db	0
   243  00FF33  80                 	db	128
   244  00FF34  3F                 	db	63
   245  00FF35  F0                 	db	240
   246  00FF36  FF                 	db	255
   247  00FF37  BE                 	db	190
   248  00FF38  E2                 	db	226
   249  00FF39  A9                 	db	169
   250  00FF3A  3E                 	db	62
   251  00FF3B  83                 	db	131
   252  00FF3C  76                 	db	118
   253  00FF3D  BE                 	db	190
   254  00FF3E  AE                 	db	174
   255  00FF3F  2B                 	db	43
   256  00FF40  3E                 	db	62
   257  00FF41  3C                 	db	60
   258  00FF42  C3                 	db	195
   259  00FF43  BD                 	db	189
   260  00FF44  D2                 	db	210
   261  00FF45  13                 	db	19
   262  00FF46  3D                 	db	61
   263  00FF47  78                 	db	120
   264  00FF48  D3                 	db	211
   265  00FF49  BB                 	db	187
   266  00FF4A                     __end_oflog@coeff:
   267                           	opt stack 0
   268  00FF4A                     atan@coeff_a:
   269                           	opt stack 0
   270  00FF4A  3C                 	db	60
   271  00FF4B  04                 	db	4
   272  00FF4C  42                 	db	66
   273  00FF4D  9F                 	db	159
   274  00FF4E  6A                 	db	106
   275  00FF4F  42                 	db	66
   276  00FF50  90                 	db	144
   277  00FF51  01                 	db	1
   278  00FF52  42                 	db	66
   279  00FF53  4D                 	db	77
   280  00FF54  BB                 	db	187
   281  00FF55  40                 	db	64
   282  00FF56  EC                 	db	236
   283  00FF57  47                 	db	71
   284  00FF58  3E                 	db	62
   285  00FF59  8E                 	db	142
   286  00FF5A  1F                 	db	31
   287  00FF5B  BB                 	db	187
   288  00FF5C                     __end_ofatan@coeff_a:
   289                           	opt stack 0
   290  00FF5C                     atan@coeff_b:
   291                           	opt stack 0
   292  00FF5C  3C                 	db	60
   293  00FF5D  04                 	db	4
   294  00FF5E  42                 	db	66
   295  00FF5F  5A                 	db	90
   296  00FF60  8B                 	db	139
   297  00FF61  42                 	db	66
   298  00FF62  04                 	db	4
   299  00FF63  44                 	db	68
   300  00FF64  42                 	db	66
   301  00FF65  9C                 	db	156
   302  00FF66  4F                 	db	79
   303  00FF67  41                 	db	65
   304  00FF68  00                 	db	0
   305  00FF69  80                 	db	128
   306  00FF6A  3F                 	db	63
   307  00FF6B                     __end_ofatan@coeff_b:
   308                           	opt stack 0
   309  0000                     _ANSELA	set	3896
   310  0000                     _ANSELE	set	3900
   311  0000                     _ANSELD	set	3899
   312  0000                     _ANSELB	set	3897
   313  0000                     _ANSELC	set	3898
   314  0000                     _PORTDbits	set	3971
   315  0000                     _TRISDbits	set	3989
   316  0000                     _ADCON0bits	set	4034
   317  0000                     _ADRESH	set	4036
   318  0000                     _ADRESL	set	4035
   319  0000                     _ADCON2	set	4032
   320  0000                     _ADCON1	set	4033
   321  0000                     _ADCON0	set	4034
   322  0000                     _TXREG1	set	4013
   323  0000                     _RCREG1	set	4014
   324  0000                     _PIR1bits	set	3998
   325  0000                     _RCSTA1bits	set	4011
   326  0000                     _SPBRGH1	set	4016
   327  0000                     _SPBRG1	set	4015
   328  0000                     _TXSTA1	set	4012
   329  0000                     _RCSTA1	set	4011
   330  0000                     _BAUDCON1	set	4024
   331  0000                     _OSCTUNE	set	3995
   332  0000                     _OSCCON2	set	4050
   333  0000                     _OSCCON	set	4051
   334  0000                     _INTCON2bits	set	4081
   335  0000                     _WPUB	set	3937
   336  0000                     _TRISD	set	3989
   337  0000                     _TRISC	set	3988
   338  0000                     _TRISB	set	3987
   339  0000                     _TRISA	set	3986
   340  0000                     _TRISE	set	3990
   341  0000                     _LATC	set	3979
   342  0000                     _LATB	set	3978
   343  0000                     _LATA	set	3977
   344  0000                     _LATD	set	3980
   345  0000                     _LATE	set	3981
   346  00FF6B                     STR_1:
   347  00FF6B  0D                 	db	13
   348  00FF6C  0A                 	db	10
   349  00FF6D  0A                 	db	10
   350  00FF6E  53                 	db	83	;'S'
   351  00FF6F  74                 	db	116	;'t'
   352  00FF70  61                 	db	97	;'a'
   353  00FF71  72                 	db	114	;'r'
   354  00FF72  74                 	db	116	;'t'
   355  00FF73  2D                 	db	45
   356  00FF74  2D                 	db	45
   357  00FF75  2D                 	db	45
   358  00FF76  2D                 	db	45
   359  00FF77  2D                 	db	45
   360  00FF78  2D                 	db	45
   361  00FF79  2D                 	db	45
   362  00FF7A  25                 	db	37
   363  00FF7B  64                 	db	100	;'d'
   364  00FF7C  00                 	db	0
   365  00FF7D                     STR_5:
   366  00FF7D  0D                 	db	13
   367  00FF7E  0A                 	db	10
   368  00FF7F  41                 	db	65	;'A'
   369  00FF80  78                 	db	120	;'x'
   370  00FF81  6F                 	db	111	;'o'
   371  00FF82  75                 	db	117	;'u'
   372  00FF83  74                 	db	116	;'t'
   373  00FF84  20                 	db	32
   374  00FF85  3D                 	db	61	;'='
   375  00FF86  20                 	db	32
   376  00FF87  25                 	db	37
   377  00FF88  66                 	db	102	;'f'
   378  00FF89  67                 	db	103	;'g'
   379  00FF8A  00                 	db	0
   380  00FF8B                     STR_12:
   381  00FF8B  0D                 	db	13
   382  00FF8C  0A                 	db	10
   383  00FF8D  50                 	db	80	;'P'
   384  00FF8E  69                 	db	105	;'i'
   385  00FF8F  74                 	db	116	;'t'
   386  00FF90  63                 	db	99	;'c'
   387  00FF91  68                 	db	104	;'h'
   388  00FF92  20                 	db	32
   389  00FF93  3D                 	db	61	;'='
   390  00FF94  20                 	db	32
   391  00FF95  25                 	db	37
   392  00FF96  66                 	db	102	;'f'
   393  00FF97  00                 	db	0
   394  00FF98                     STR_6:
   395  00FF98  0D                 	db	13
   396  00FF99  0A                 	db	10
   397  00FF9A  41                 	db	65	;'A'
   398  00FF9B  79                 	db	121	;'y'
   399  00FF9C  6F                 	db	111	;'o'
   400  00FF9D  75                 	db	117	;'u'
   401  00FF9E  74                 	db	116	;'t'
   402  00FF9F  20                 	db	32
   403  00FFA0  3D                 	db	61	;'='
   404  00FFA1  25                 	db	37
   405  00FFA2  66                 	db	102	;'f'
   406  00FFA3  67                 	db	103	;'g'
   407  00FFA4  00                 	db	0
   408  00FFA5                     STR_7:
   409  00FFA5  0D                 	db	13
   410  00FFA6  0A                 	db	10
   411  00FFA7  41                 	db	65	;'A'
   412  00FFA8  7A                 	db	122	;'z'
   413  00FFA9  6F                 	db	111	;'o'
   414  00FFAA  75                 	db	117	;'u'
   415  00FFAB  74                 	db	116	;'t'
   416  00FFAC  20                 	db	32
   417  00FFAD  3D                 	db	61	;'='
   418  00FFAE  25                 	db	37
   419  00FFAF  66                 	db	102	;'f'
   420  00FFB0  67                 	db	103	;'g'
   421  00FFB1  00                 	db	0
   422  00FFB2                     STR_11:
   423  00FFB2  0D                 	db	13
   424  00FFB3  0A                 	db	10
   425  00FFB4  52                 	db	82	;'R'
   426  00FFB5  6F                 	db	111	;'o'
   427  00FFB6  6C                 	db	108	;'l'
   428  00FFB7  6C                 	db	108	;'l'
   429  00FFB8  20                 	db	32
   430  00FFB9  3D                 	db	61	;'='
   431  00FFBA  20                 	db	32
   432  00FFBB  25                 	db	37
   433  00FFBC  66                 	db	102	;'f'
   434  00FFBD  00                 	db	0
   435  00FFBE                     STR_8:
   436  00FFBE  0D                 	db	13
   437  00FFBF  0A                 	db	10
   438  00FFC0  54                 	db	84	;'T'
   439  00FFC1  68                 	db	104	;'h'
   440  00FFC2  65                 	db	101	;'e'
   441  00FFC3  74                 	db	116	;'t'
   442  00FFC4  61                 	db	97	;'a'
   443  00FFC5  20                 	db	32
   444  00FFC6  3D                 	db	61	;'='
   445  00FFC7  25                 	db	37
   446  00FFC8  66                 	db	102	;'f'
   447  00FFC9  00                 	db	0
   448  00FFCA                     STR_10:
   449  00FFCA  0D                 	db	13
   450  00FFCB  0A                 	db	10
   451  00FFCC  50                 	db	80	;'P'
   452  00FFCD  68                 	db	104	;'h'
   453  00FFCE  69                 	db	105	;'i'
   454  00FFCF  20                 	db	32
   455  00FFD0  3D                 	db	61	;'='
   456  00FFD1  20                 	db	32
   457  00FFD2  25                 	db	37
   458  00FFD3  66                 	db	102	;'f'
   459  00FFD4  00                 	db	0
   460  00FFD5                     STR_9:
   461  00FFD5  0D                 	db	13
   462  00FFD6  0A                 	db	10
   463  00FFD7  50                 	db	80	;'P'
   464  00FFD8  73                 	db	115	;'s'
   465  00FFD9  79                 	db	121	;'y'
   466  00FFDA  20                 	db	32
   467  00FFDB  3D                 	db	61	;'='
   468  00FFDC  20                 	db	32
   469  00FFDD  25                 	db	37
   470  00FFDE  66                 	db	102	;'f'
   471  00FFDF  00                 	db	0
   472  00FFE0                     STR_13:
   473  00FFE0  0D                 	db	13
   474  00FFE1  0A                 	db	10
   475  00FFE2  59                 	db	89	;'Y'
   476  00FFE3  61                 	db	97	;'a'
   477  00FFE4  77                 	db	119	;'w'
   478  00FFE5  20                 	db	32
   479  00FFE6  3D                 	db	61	;'='
   480  00FFE7  25                 	db	37
   481  00FFE8  66                 	db	102	;'f'
   482  00FFE9  00                 	db	0
   483  00FFEA                     STR_2:
   484  00FFEA  0D                 	db	13
   485  00FFEB  0A                 	db	10
   486  00FFEC  58                 	db	88	;'X'
   487  00FFED  3D                 	db	61	;'='
   488  00FFEE  25                 	db	37
   489  00FFEF  64                 	db	100	;'d'
   490  00FFF0  00                 	db	0
   491  00FFF1                     STR_3:
   492  00FFF1  0D                 	db	13
   493  00FFF2  0A                 	db	10
   494  00FFF3  59                 	db	89	;'Y'
   495  00FFF4  3D                 	db	61	;'='
   496  00FFF5  25                 	db	37
   497  00FFF6  64                 	db	100	;'d'
   498  00FFF7  00                 	db	0
   499  00FFF8                     STR_4:
   500  00FFF8  0D                 	db	13
   501  00FFF9  0A                 	db	10
   502  00FFFA  5A                 	db	90	;'Z'
   503  00FFFB  3D                 	db	61	;'='
   504  00FFFC  25                 	db	37
   505  00FFFD  64                 	db	100	;'d'
   506  00FFFE  00                 	db	0
   507                           
   508                           ; #config settings
   509  00FFFF  00                 	db	0	; dummy byte at the end
   510  0000                     
   511                           	psect	cinit
   512  00CFEC                     __pcinit:
   513                           	opt stack 0
   514  00CFEC                     start_initialization:
   515                           	opt stack 0
   516  00CFEC                     __initialization:
   517                           	opt stack 0
   518                           
   519                           ; Clear objects allocated to BANK0 (2 bytes)
   520  00CFEC  0100               	movlb	0
   521  00CFEE  6BE2               	clrf	(__pbssBANK0+1)& (0+255),b
   522  00CFF0  6BE1               	clrf	__pbssBANK0& (0+255),b
   523  00CFF2                     end_of_initialization:
   524                           	opt stack 0
   525  00CFF2                     __end_of__initialization:
   526                           	opt stack 0
   527  00CFF2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   528  00CFF4  6EF8               	movwf	tblptru,c
   529  00CFF6  0100               	movlb	0
   530  00CFF8  EF86  F07B         	goto	_main	;jump to C main() function
   531                           tblptru	equ	0xFF8
   532                           
   533                           	psect	bssBANK0
   534  0000E1                     __pbssBANK0:
   535                           	opt stack 0
   536  0000E1                     _errno:
   537                           	opt stack 0
   538  0000E1                     	ds	2
   539                           tblptru	equ	0xFF8
   540                           
   541                           	psect	cstackBANK0
   542  000060                     __pcstackBANK0:
   543                           	opt stack 0
   544  000060                     ?_pow:
   545                           	opt stack 0
   546  000060                     pow@x:
   547                           	opt stack 0
   548  000060                     _printf$1341:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0x0
   552  000060                     	ds	3
   553  000063                     printf@ap:
   554                           	opt stack 0
   555  000063                     pow@y:
   556                           	opt stack 0
   557                           
   558                           ; 3 bytes @ 0x3
   559  000063                     	ds	2
   560  000065                     printf@flag:
   561                           	opt stack 0
   562                           
   563                           ; 2 bytes @ 0x5
   564  000065                     	ds	1
   565  000066                     _pow$1344:
   566                           	opt stack 0
   567                           
   568                           ; 3 bytes @ 0x6
   569  000066                     	ds	1
   570  000067                     printf@prec:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x7
   574  000067                     	ds	2
   575  000069                     _pow$1345:
   576                           	opt stack 0
   577  000069                     printf@val:
   578                           	opt stack 0
   579                           
   580                           ; 4 bytes @ 0x9
   581  000069                     	ds	3
   582  00006C                     pow@sign:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0xC
   586  00006C                     	ds	1
   587  00006D                     printf@exp:
   588                           	opt stack 0
   589  00006D                     pow@yi:
   590                           	opt stack 0
   591                           
   592                           ; 4 bytes @ 0xD
   593  00006D                     	ds	2
   594  00006F                     printf@tmpval:
   595                           	opt stack 0
   596                           
   597                           ; 4 bytes @ 0xF
   598  00006F                     	ds	2
   599  000071                     ?_sqrt:
   600                           	opt stack 0
   601  000071                     sqrt@a:
   602                           	opt stack 0
   603                           
   604                           ; 3 bytes @ 0x11
   605  000071                     	ds	2
   606  000073                     printf@fval:
   607                           	opt stack 0
   608                           
   609                           ; 3 bytes @ 0x13
   610  000073                     	ds	1
   611  000074                     ??_sqrt:
   612                           
   613                           ; 1 bytes @ 0x14
   614  000074                     	ds	2
   615  000076                     printf@c:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x16
   619  000076                     	ds	1
   620  000077                     sqrt@og:
   621                           	opt stack 0
   622                           
   623                           ; 3 bytes @ 0x17
   624  000077                     	ds	3
   625  00007A                     sqrt@z:
   626                           	opt stack 0
   627                           
   628                           ; 3 bytes @ 0x1A
   629  00007A                     	ds	3
   630  00007D                     sqrt@i:
   631                           	opt stack 0
   632                           
   633                           ; 1 bytes @ 0x1D
   634  00007D                     	ds	1
   635  00007E                     sqrt@q:
   636                           	opt stack 0
   637                           
   638                           ; 3 bytes @ 0x1E
   639  00007E                     	ds	3
   640  000081                     sqrt@x:
   641                           	opt stack 0
   642                           
   643                           ; 3 bytes @ 0x21
   644  000081                     	ds	3
   645  000084                     ?_atan:
   646                           	opt stack 0
   647  000084                     atan@f:
   648                           	opt stack 0
   649                           
   650                           ; 3 bytes @ 0x24
   651  000084                     	ds	3
   652  000087                     atan@y:
   653                           	opt stack 0
   654                           
   655                           ; 3 bytes @ 0x27
   656  000087                     	ds	3
   657  00008A                     atan@x:
   658                           	opt stack 0
   659                           
   660                           ; 3 bytes @ 0x2A
   661  00008A                     	ds	3
   662  00008D                     atan@recip:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0x2D
   666  00008D                     	ds	1
   667  00008E                     atan@val_squared:
   668                           	opt stack 0
   669                           
   670                           ; 3 bytes @ 0x2E
   671  00008E                     	ds	3
   672  000091                     atan@val:
   673                           	opt stack 0
   674                           
   675                           ; 3 bytes @ 0x31
   676  000091                     	ds	3
   677  000094                     ?_atan2:
   678                           	opt stack 0
   679  000094                     atan2@y:
   680                           	opt stack 0
   681                           
   682                           ; 3 bytes @ 0x34
   683  000094                     	ds	3
   684  000097                     atan2@x:
   685                           	opt stack 0
   686                           
   687                           ; 3 bytes @ 0x37
   688  000097                     	ds	3
   689  00009A                     _atan2$1343:
   690                           	opt stack 0
   691                           
   692                           ; 3 bytes @ 0x3A
   693  00009A                     	ds	3
   694  00009D                     _atan2$1342:
   695                           	opt stack 0
   696                           
   697                           ; 3 bytes @ 0x3D
   698  00009D                     	ds	3
   699  0000A0                     atan2@v:
   700                           	opt stack 0
   701                           
   702                           ; 3 bytes @ 0x40
   703  0000A0                     	ds	3
   704  0000A3                     main@a1:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0x43
   708  0000A3                     	ds	2
   709  0000A5                     main@b1:
   710                           	opt stack 0
   711                           
   712                           ; 2 bytes @ 0x45
   713  0000A5                     	ds	2
   714  0000A7                     main@c1:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x47
   718  0000A7                     	ds	2
   719  0000A9                     main@theta:
   720                           	opt stack 0
   721                           
   722                           ; 3 bytes @ 0x49
   723  0000A9                     	ds	3
   724  0000AC                     main@psy:
   725                           	opt stack 0
   726                           
   727                           ; 3 bytes @ 0x4C
   728  0000AC                     	ds	3
   729  0000AF                     main@phi:
   730                           	opt stack 0
   731                           
   732                           ; 3 bytes @ 0x4F
   733  0000AF                     	ds	3
   734  0000B2                     main@roll:
   735                           	opt stack 0
   736                           
   737                           ; 3 bytes @ 0x52
   738  0000B2                     	ds	3
   739  0000B5                     main@pitch:
   740                           	opt stack 0
   741                           
   742                           ; 3 bytes @ 0x55
   743  0000B5                     	ds	3
   744  0000B8                     main@yaw:
   745                           	opt stack 0
   746                           
   747                           ; 3 bytes @ 0x58
   748  0000B8                     	ds	3
   749  0000BB                     main@f:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0x5B
   753  0000BB                     	ds	2
   754  0000BD                     main@a:
   755                           	opt stack 0
   756                           
   757                           ; 2 bytes @ 0x5D
   758  0000BD                     	ds	2
   759  0000BF                     main@b:
   760                           	opt stack 0
   761                           
   762                           ; 2 bytes @ 0x5F
   763  0000BF                     	ds	2
   764  0000C1                     main@c:
   765                           	opt stack 0
   766                           
   767                           ; 2 bytes @ 0x61
   768  0000C1                     	ds	2
   769  0000C3                     _main$1331:
   770                           	opt stack 0
   771                           
   772                           ; 3 bytes @ 0x63
   773  0000C3                     	ds	3
   774  0000C6                     _main$1332:
   775                           	opt stack 0
   776                           
   777                           ; 3 bytes @ 0x66
   778  0000C6                     	ds	3
   779  0000C9                     _main$1333:
   780                           	opt stack 0
   781                           
   782                           ; 3 bytes @ 0x69
   783  0000C9                     	ds	3
   784  0000CC                     _main$1334:
   785                           	opt stack 0
   786                           
   787                           ; 3 bytes @ 0x6C
   788  0000CC                     	ds	3
   789  0000CF                     _main$1335:
   790                           	opt stack 0
   791                           
   792                           ; 3 bytes @ 0x6F
   793  0000CF                     	ds	3
   794  0000D2                     _main$1336:
   795                           	opt stack 0
   796                           
   797                           ; 3 bytes @ 0x72
   798  0000D2                     	ds	3
   799  0000D5                     _main$1337:
   800                           	opt stack 0
   801                           
   802                           ; 3 bytes @ 0x75
   803  0000D5                     	ds	3
   804  0000D8                     main@Axout:
   805                           	opt stack 0
   806                           
   807                           ; 3 bytes @ 0x78
   808  0000D8                     	ds	3
   809  0000DB                     main@Ayout:
   810                           	opt stack 0
   811                           
   812                           ; 3 bytes @ 0x7B
   813  0000DB                     	ds	3
   814  0000DE                     main@Azout:
   815                           	opt stack 0
   816                           
   817                           ; 3 bytes @ 0x7E
   818  0000DE                     	ds	3
   819                           tblptru	equ	0xFF8
   820                           
   821                           	psect	cstackCOMRAM
   822  000001                     __pcstackCOMRAM:
   823                           	opt stack 0
   824  000001                     ?_ADC_GetConversion:
   825                           	opt stack 0
   826  000001                     ?___awmod:
   827                           	opt stack 0
   828  000001                     ?___ftpack:
   829                           	opt stack 0
   830  000001                     ?_frexp:
   831                           	opt stack 0
   832  000001                     ?___ftneg:
   833                           	opt stack 0
   834  000001                     ?__tdiv_to_l_:
   835                           	opt stack 0
   836  000001                     ?__div_to_l_:
   837                           	opt stack 0
   838  000001                     ?___lldiv:
   839                           	opt stack 0
   840  000001                     EUSART1_Write@txData:
   841                           	opt stack 0
   842  000001                     ___awmod@dividend:
   843                           	opt stack 0
   844  000001                     __div_to_l_@f1:
   845                           	opt stack 0
   846  000001                     ___ftpack@arg:
   847                           	opt stack 0
   848  000001                     __tdiv_to_l_@f1:
   849                           	opt stack 0
   850  000001                     ___ftneg@f1:
   851                           	opt stack 0
   852  000001                     frexp@value:
   853                           	opt stack 0
   854  000001                     ___lldiv@dividend:
   855                           	opt stack 0
   856                           
   857                           ; 4 bytes @ 0x0
   858  000001                     	ds	1
   859  000002                     putch@txData:
   860                           	opt stack 0
   861                           
   862                           ; 1 bytes @ 0x1
   863  000002                     	ds	1
   864  000003                     ??_ADC_GetConversion:
   865  000003                     ___awmod@divisor:
   866                           	opt stack 0
   867                           
   868                           ; 2 bytes @ 0x2
   869  000003                     	ds	1
   870  000004                     ?_fabs:
   871                           	opt stack 0
   872  000004                     ___ftpack@exp:
   873                           	opt stack 0
   874  000004                     frexp@eptr:
   875                           	opt stack 0
   876  000004                     fabs@d:
   877                           	opt stack 0
   878  000004                     __div_to_l_@f2:
   879                           	opt stack 0
   880  000004                     __tdiv_to_l_@f2:
   881                           	opt stack 0
   882                           
   883                           ; 3 bytes @ 0x3
   884  000004                     	ds	1
   885  000005                     ADC_GetConversion@channel:
   886                           	opt stack 0
   887  000005                     ___awmod@counter:
   888                           	opt stack 0
   889  000005                     ___ftpack@sign:
   890                           	opt stack 0
   891  000005                     ___lldiv@divisor:
   892                           	opt stack 0
   893                           
   894                           ; 4 bytes @ 0x4
   895  000005                     	ds	1
   896  000006                     ??___ftpack:
   897  000006                     ??_frexp:
   898  000006                     ___awmod@sign:
   899                           	opt stack 0
   900                           
   901                           ; 1 bytes @ 0x5
   902  000006                     	ds	1
   903  000007                     ??__tdiv_to_l_:
   904  000007                     ?___awdiv:
   905                           	opt stack 0
   906  000007                     ___awdiv@dividend:
   907                           	opt stack 0
   908  000007                     ___ftge@ff1:
   909                           	opt stack 0
   910  000007                     __div_to_l_@quot:
   911                           	opt stack 0
   912                           
   913                           ; 4 bytes @ 0x6
   914  000007                     	ds	2
   915  000009                     ?___lltoft:
   916                           	opt stack 0
   917  000009                     ___awdiv@divisor:
   918                           	opt stack 0
   919  000009                     ___lldiv@quotient:
   920                           	opt stack 0
   921  000009                     ___lltoft@c:
   922                           	opt stack 0
   923                           
   924                           ; 4 bytes @ 0x8
   925  000009                     	ds	1
   926  00000A                     ___ftge@ff2:
   927                           	opt stack 0
   928  00000A                     __tdiv_to_l_@quot:
   929                           	opt stack 0
   930                           
   931                           ; 4 bytes @ 0x9
   932  00000A                     	ds	1
   933  00000B                     ___awdiv@counter:
   934                           	opt stack 0
   935  00000B                     __div_to_l_@cntr:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0xA
   939  00000B                     	ds	1
   940  00000C                     ___awdiv@sign:
   941                           	opt stack 0
   942  00000C                     __div_to_l_@exp1:
   943                           	opt stack 0
   944                           
   945                           ; 1 bytes @ 0xB
   946  00000C                     	ds	1
   947  00000D                     ??___ftge:
   948  00000D                     ??___lltoft:
   949  00000D                     ___lldiv@counter:
   950                           	opt stack 0
   951  00000D                     ___awdiv@quotient:
   952                           	opt stack 0
   953                           
   954                           ; 2 bytes @ 0xC
   955  00000D                     	ds	1
   956  00000E                     ?___llmod:
   957                           	opt stack 0
   958  00000E                     __tdiv_to_l_@cntr:
   959                           	opt stack 0
   960  00000E                     ___llmod@dividend:
   961                           	opt stack 0
   962                           
   963                           ; 4 bytes @ 0xD
   964  00000E                     	ds	1
   965  00000F                     ?___wmul:
   966                           	opt stack 0
   967  00000F                     __tdiv_to_l_@exp1:
   968                           	opt stack 0
   969  00000F                     ___wmul@multiplier:
   970                           	opt stack 0
   971                           
   972                           ; 2 bytes @ 0xE
   973  00000F                     	ds	2
   974  000011                     ___lltoft@exp:
   975                           	opt stack 0
   976  000011                     ___wmul@multiplicand:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x10
   980  000011                     	ds	1
   981  000012                     ___llmod@divisor:
   982                           	opt stack 0
   983                           
   984                           ; 4 bytes @ 0x11
   985  000012                     	ds	1
   986  000013                     ___wmul@product:
   987                           	opt stack 0
   988                           
   989                           ; 2 bytes @ 0x12
   990  000013                     	ds	2
   991  000015                     ?___awtoft:
   992                           	opt stack 0
   993  000015                     ___awtoft@c:
   994                           	opt stack 0
   995                           
   996                           ; 2 bytes @ 0x14
   997  000015                     	ds	1
   998  000016                     ___llmod@counter:
   999                           	opt stack 0
  1000                           
  1001                           ; 1 bytes @ 0x15
  1002  000016                     	ds	2
  1003  000018                     ___awtoft@sign:
  1004                           	opt stack 0
  1005                           
  1006                           ; 1 bytes @ 0x17
  1007  000018                     	ds	1
  1008  000019                     ?___ftmul:
  1009                           	opt stack 0
  1010  000019                     ___ftmul@f1:
  1011                           	opt stack 0
  1012                           
  1013                           ; 3 bytes @ 0x18
  1014  000019                     	ds	3
  1015  00001C                     ___ftmul@f2:
  1016                           	opt stack 0
  1017                           
  1018                           ; 3 bytes @ 0x1B
  1019  00001C                     	ds	3
  1020  00001F                     ??___ftmul:
  1021                           
  1022                           ; 1 bytes @ 0x1E
  1023  00001F                     	ds	3
  1024  000022                     ___ftmul@exp:
  1025                           	opt stack 0
  1026                           
  1027                           ; 1 bytes @ 0x21
  1028  000022                     	ds	1
  1029  000023                     ___ftmul@f3_as_product:
  1030                           	opt stack 0
  1031                           
  1032                           ; 3 bytes @ 0x22
  1033  000023                     	ds	3
  1034  000026                     ___ftmul@cntr:
  1035                           	opt stack 0
  1036                           
  1037                           ; 1 bytes @ 0x25
  1038  000026                     	ds	1
  1039  000027                     ___ftmul@sign:
  1040                           	opt stack 0
  1041                           
  1042                           ; 1 bytes @ 0x26
  1043  000027                     	ds	1
  1044  000028                     ?___ftdiv:
  1045                           	opt stack 0
  1046  000028                     ?_fround:
  1047                           	opt stack 0
  1048  000028                     ?_scale:
  1049                           	opt stack 0
  1050  000028                     ___ftdiv@f1:
  1051                           	opt stack 0
  1052                           
  1053                           ; 3 bytes @ 0x27
  1054  000028                     	ds	3
  1055  00002B                     ___ftdiv@f2:
  1056                           	opt stack 0
  1057  00002B                     _fround$1339:
  1058                           	opt stack 0
  1059  00002B                     _scale$1340:
  1060                           	opt stack 0
  1061                           
  1062                           ; 3 bytes @ 0x2A
  1063  00002B                     	ds	3
  1064  00002E                     ??___ftdiv:
  1065  00002E                     scale@scl:
  1066                           	opt stack 0
  1067  00002E                     _fround$1338:
  1068                           	opt stack 0
  1069                           
  1070                           ; 3 bytes @ 0x2D
  1071  00002E                     	ds	1
  1072  00002F                     ?___fttol:
  1073                           	opt stack 0
  1074  00002F                     ___fttol@f1:
  1075                           	opt stack 0
  1076                           
  1077                           ; 3 bytes @ 0x2E
  1078  00002F                     	ds	2
  1079  000031                     fround@prec:
  1080                           	opt stack 0
  1081  000031                     ___ftdiv@cntr:
  1082                           	opt stack 0
  1083                           
  1084                           ; 1 bytes @ 0x30
  1085  000031                     	ds	1
  1086  000032                     ___ftdiv@f3:
  1087                           	opt stack 0
  1088                           
  1089                           ; 3 bytes @ 0x31
  1090  000032                     	ds	1
  1091  000033                     ??___fttol:
  1092                           
  1093                           ; 1 bytes @ 0x32
  1094  000033                     	ds	2
  1095  000035                     ___ftdiv@exp:
  1096                           	opt stack 0
  1097                           
  1098                           ; 1 bytes @ 0x34
  1099  000035                     	ds	1
  1100  000036                     ___ftdiv@sign:
  1101                           	opt stack 0
  1102                           
  1103                           ; 1 bytes @ 0x35
  1104  000036                     	ds	1
  1105  000037                     ?___ftadd:
  1106                           	opt stack 0
  1107  000037                     ___ftadd@f1:
  1108                           	opt stack 0
  1109                           
  1110                           ; 3 bytes @ 0x36
  1111  000037                     	ds	1
  1112  000038                     ___fttol@sign1:
  1113                           	opt stack 0
  1114                           
  1115                           ; 1 bytes @ 0x37
  1116  000038                     	ds	1
  1117  000039                     ___fttol@lval:
  1118                           	opt stack 0
  1119                           
  1120                           ; 4 bytes @ 0x38
  1121  000039                     	ds	1
  1122  00003A                     ___ftadd@f2:
  1123                           	opt stack 0
  1124                           
  1125                           ; 3 bytes @ 0x39
  1126  00003A                     	ds	3
  1127  00003D                     ??___ftadd:
  1128  00003D                     ___fttol@exp1:
  1129                           	opt stack 0
  1130                           
  1131                           ; 1 bytes @ 0x3C
  1132  00003D                     	ds	1
  1133  00003E                     ?___altoft:
  1134                           	opt stack 0
  1135  00003E                     ___altoft@c:
  1136                           	opt stack 0
  1137                           
  1138                           ; 4 bytes @ 0x3D
  1139  00003E                     	ds	2
  1140  000040                     ___ftadd@sign:
  1141                           	opt stack 0
  1142                           
  1143                           ; 1 bytes @ 0x3F
  1144  000040                     	ds	1
  1145  000041                     ___ftadd@exp2:
  1146                           	opt stack 0
  1147                           
  1148                           ; 1 bytes @ 0x40
  1149  000041                     	ds	1
  1150  000042                     ??___altoft:
  1151  000042                     ___ftadd@exp1:
  1152                           	opt stack 0
  1153                           
  1154                           ; 1 bytes @ 0x41
  1155  000042                     	ds	1
  1156  000043                     ?___ftsub:
  1157                           	opt stack 0
  1158  000043                     ?_eval_poly:
  1159                           	opt stack 0
  1160  000043                     eval_poly@x:
  1161                           	opt stack 0
  1162  000043                     ___ftsub@f1:
  1163                           	opt stack 0
  1164                           
  1165                           ; 3 bytes @ 0x42
  1166  000043                     	ds	3
  1167  000046                     ___altoft@exp:
  1168                           	opt stack 0
  1169  000046                     eval_poly@d:
  1170                           	opt stack 0
  1171  000046                     ___ftsub@f2:
  1172                           	opt stack 0
  1173                           
  1174                           ; 3 bytes @ 0x45
  1175  000046                     	ds	1
  1176  000047                     ___altoft@sign:
  1177                           	opt stack 0
  1178                           
  1179                           ; 1 bytes @ 0x46
  1180  000047                     	ds	1
  1181  000048                     ?_floor:
  1182                           	opt stack 0
  1183  000048                     eval_poly@n:
  1184                           	opt stack 0
  1185  000048                     floor@x:
  1186                           	opt stack 0
  1187                           
  1188                           ; 3 bytes @ 0x47
  1189  000048                     	ds	1
  1190  000049                     ?_printf:
  1191                           	opt stack 0
  1192  000049                     printf@f:
  1193                           	opt stack 0
  1194                           
  1195                           ; 2 bytes @ 0x48
  1196  000049                     	ds	1
  1197  00004A                     ??_eval_poly:
  1198                           
  1199                           ; 1 bytes @ 0x49
  1200  00004A                     	ds	1
  1201  00004B                     floor@i:
  1202                           	opt stack 0
  1203                           
  1204                           ; 3 bytes @ 0x4A
  1205  00004B                     	ds	1
  1206  00004C                     eval_poly@res:
  1207                           	opt stack 0
  1208                           
  1209                           ; 3 bytes @ 0x4B
  1210  00004C                     	ds	2
  1211  00004E                     ??_printf:
  1212  00004E                     floor@expon:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x4D
  1216  00004E                     	ds	1
  1217  00004F                     ?_log:
  1218                           	opt stack 0
  1219  00004F                     ?_ldexp:
  1220                           	opt stack 0
  1221  00004F                     ldexp@value:
  1222                           	opt stack 0
  1223  00004F                     log@x:
  1224                           	opt stack 0
  1225                           
  1226                           ; 3 bytes @ 0x4E
  1227  00004F                     	ds	3
  1228  000052                     ldexp@newexp:
  1229                           	opt stack 0
  1230  000052                     log@exponent:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x51
  1234  000052                     	ds	2
  1235  000054                     ??_ldexp:
  1236                           
  1237                           ; 1 bytes @ 0x53
  1238  000054                     	ds	2
  1239  000056                     ?_exp:
  1240                           	opt stack 0
  1241  000056                     exp@x:
  1242                           	opt stack 0
  1243                           
  1244                           ; 3 bytes @ 0x55
  1245  000056                     	ds	3
  1246  000059                     _exp$1346:
  1247                           	opt stack 0
  1248                           
  1249                           ; 3 bytes @ 0x58
  1250  000059                     	ds	3
  1251  00005C                     exp@exponent:
  1252                           	opt stack 0
  1253                           
  1254                           ; 2 bytes @ 0x5B
  1255  00005C                     	ds	2
  1256  00005E                     exp@sign:
  1257                           	opt stack 0
  1258                           
  1259                           ; 1 bytes @ 0x5D
  1260  00005E                     	ds	1
  1261  00005F                     ??_main:
  1262                           
  1263                           ; 1 bytes @ 0x5E
  1264  00005F                     	ds	1
  1265                           tblptru	equ	0xFF8
  1266                           
  1267 ;;
  1268 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1269 ;;
  1270 ;; *************** function _main *****************
  1271 ;; Defined at:
  1272 ;;		line 87 in file "main.c"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;		None
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;  Azout           3  126[BANK0 ] PTR void [1]
  1277 ;;  Ayout           3  123[BANK0 ] PTR void [1]
  1278 ;;  Axout           3  120[BANK0 ] PTR void [1]
  1279 ;;  yaw             3   88[BANK0 ] PTR void [1]
  1280 ;;  pitch           3   85[BANK0 ] PTR void [1]
  1281 ;;  roll            3   82[BANK0 ] PTR void [1]
  1282 ;;  phi             3   79[BANK0 ] PTR void [1]
  1283 ;;  psy             3   76[BANK0 ] PTR void [1]
  1284 ;;  theta           3   73[BANK0 ] PTR void [1]
  1285 ;;  c               2   97[BANK0 ] int 
  1286 ;;  b               2   95[BANK0 ] int 
  1287 ;;  a               2   93[BANK0 ] int 
  1288 ;;  f               2   91[BANK0 ] int 
  1289 ;;  c1              2   71[BANK0 ] int 
  1290 ;;  b1              2   69[BANK0 ] int 
  1291 ;;  a1              2   67[BANK0 ] int 
  1292 ;; Return value:  Size  Location     Type
  1293 ;;                  1    wreg      void 
  1294 ;; Registers used:
  1295 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1296 ;; Tracked objects:
  1297 ;;		On entry : 0/0
  1298 ;;		On exit  : 0/0
  1299 ;;		Unchanged: 0/0
  1300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1302 ;;      Locals:         0      62       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1303 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1304 ;;      Totals:         1      62       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1305 ;;Total ram usage:       63 bytes
  1306 ;; Hardware stack levels required when called:    5
  1307 ;; This function calls:
  1308 ;;		_ADC_GetConversion
  1309 ;;		_SYSTEM_Initialize
  1310 ;;		___awtoft
  1311 ;;		___ftadd
  1312 ;;		___ftdiv
  1313 ;;		___ftmul
  1314 ;;		___wmul
  1315 ;;		_atan
  1316 ;;		_atan2
  1317 ;;		_pow
  1318 ;;		_printf
  1319 ;;		_sqrt
  1320 ;; This function is called by:
  1321 ;;		Startup code after reset
  1322 ;; This function uses a non-reentrant model
  1323 ;;
  1324                           
  1325                           	psect	text0
  1326  00F70C                     __ptext0:
  1327                           	opt stack 0
  1328  00F70C                     _main:
  1329                           	opt stack 26
  1330                           
  1331                           ;main.c: 88: SYSTEM_Initialize();
  1332                           
  1333                           ;incstack = 0
  1334  00F70C  ECFE  F067         	call	_SYSTEM_Initialize	;wreg free
  1335                           
  1336                           ;main.c: 89: int a=0,b=0,c=0,a1=0,b1=0,c1=0,f=0;
  1337  00F710  0E00               	movlw	0
  1338  00F712  0100               	movlb	0	; () banked
  1339  00F714  6FBE               	movwf	(main@a+1)& (0+255),b
  1340  00F716  0E00               	movlw	0
  1341  00F718  6FBD               	movwf	main@a& (0+255),b
  1342                           
  1343                           ; BSR set to: 0
  1344  00F71A  0E00               	movlw	0
  1345  00F71C  6FC0               	movwf	(main@b+1)& (0+255),b
  1346  00F71E  0E00               	movlw	0
  1347  00F720  6FBF               	movwf	main@b& (0+255),b
  1348                           
  1349                           ; BSR set to: 0
  1350  00F722  0E00               	movlw	0
  1351  00F724  6FC2               	movwf	(main@c+1)& (0+255),b
  1352  00F726  0E00               	movlw	0
  1353  00F728  6FC1               	movwf	main@c& (0+255),b
  1354                           
  1355                           ; BSR set to: 0
  1356  00F72A  0E00               	movlw	0
  1357  00F72C  6FA4               	movwf	(main@a1+1)& (0+255),b
  1358  00F72E  0E00               	movlw	0
  1359  00F730  6FA3               	movwf	main@a1& (0+255),b
  1360                           
  1361                           ; BSR set to: 0
  1362  00F732  0E00               	movlw	0
  1363  00F734  6FA6               	movwf	(main@b1+1)& (0+255),b
  1364  00F736  0E00               	movlw	0
  1365  00F738  6FA5               	movwf	main@b1& (0+255),b
  1366                           
  1367                           ; BSR set to: 0
  1368  00F73A  0E00               	movlw	0
  1369  00F73C  6FA8               	movwf	(main@c1+1)& (0+255),b
  1370  00F73E  0E00               	movlw	0
  1371  00F740  6FA7               	movwf	main@c1& (0+255),b
  1372                           
  1373                           ; BSR set to: 0
  1374  00F742  0E00               	movlw	0
  1375  00F744  6FBC               	movwf	(main@f+1)& (0+255),b
  1376  00F746  0E00               	movlw	0
  1377  00F748  6FBB               	movwf	main@f& (0+255),b
  1378                           
  1379                           ; BSR set to: 0
  1380                           ;main.c: 90: double theta,psy,phi,roll,pitch,yaw,Axout,Ayout,Azout;
  1381                           ;main.c: 91: TRISDbits.TRISD1 = 0;
  1382  00F74A  9295               	bcf	3989,1,c	;volatile
  1383  00F74C                     
  1384                           ;main.c: 95: f++;
  1385                           
  1386                           ; BSR set to: 0
  1387  00F74C  0100               	movlb	0	; () banked
  1388  00F74E  4BBB               	infsnz	main@f& (0+255),f,b
  1389  00F750  2BBC               	incf	(main@f+1)& (0+255),f,b
  1390                           
  1391                           ; BSR set to: 0
  1392                           ;main.c: 96: c= ADC_GetConversion(channel_AN24);
  1393  00F752  0E18               	movlw	24
  1394  00F754  EC42  F068         	call	_ADC_GetConversion
  1395  00F758  C001  F0C1         	movff	?_ADC_GetConversion,main@c
  1396  00F75C  C002  F0C2         	movff	?_ADC_GetConversion+1,main@c+1
  1397                           
  1398                           ;main.c: 99: b= ADC_GetConversion(channel_AN25);
  1399  00F760  0E19               	movlw	25
  1400  00F762  EC42  F068         	call	_ADC_GetConversion
  1401  00F766  C001  F0BF         	movff	?_ADC_GetConversion,main@b
  1402  00F76A  C002  F0C0         	movff	?_ADC_GetConversion+1,main@b+1
  1403                           
  1404                           ;main.c: 102: a= ADC_GetConversion(channel_AN26);
  1405  00F76E  0E1A               	movlw	26
  1406  00F770  EC42  F068         	call	_ADC_GetConversion
  1407  00F774  C001  F0BD         	movff	?_ADC_GetConversion,main@a
  1408  00F778  C002  F0BE         	movff	?_ADC_GetConversion+1,main@a+1
  1409                           
  1410                           ;main.c: 105: Axout = (((double)(a*5)/1.024)-1700.0)/330.0;
  1411  00F77C  0E80               	movlw	128
  1412  00F77E  6E3A               	movwf	___ftadd@f2,c
  1413  00F780  0ED4               	movlw	212
  1414  00F782  6E3B               	movwf	___ftadd@f2+1,c
  1415  00F784  0EC4               	movlw	196
  1416  00F786  6E3C               	movwf	___ftadd@f2+2,c
  1417  00F788  0E12               	movlw	18
  1418  00F78A  6E2B               	movwf	___ftdiv@f2,c
  1419  00F78C  0E83               	movlw	131
  1420  00F78E  6E2C               	movwf	___ftdiv@f2+1,c
  1421  00F790  0E3F               	movlw	63
  1422  00F792  6E2D               	movwf	___ftdiv@f2+2,c
  1423  00F794  C0BD  F00F         	movff	main@a,___wmul@multiplier
  1424  00F798  C0BE  F010         	movff	main@a+1,___wmul@multiplier+1
  1425  00F79C  0E00               	movlw	0
  1426  00F79E  6E12               	movwf	___wmul@multiplicand+1,c
  1427  00F7A0  0E05               	movlw	5
  1428  00F7A2  6E11               	movwf	___wmul@multiplicand,c
  1429  00F7A4  EC2F  F068         	call	___wmul	;wreg free
  1430  00F7A8  C00F  F015         	movff	?___wmul,___awtoft@c
  1431  00F7AC  C010  F016         	movff	?___wmul+1,___awtoft@c+1
  1432  00F7B0  EC72  F068         	call	___awtoft	;wreg free
  1433  00F7B4  C015  F028         	movff	?___awtoft,___ftdiv@f1
  1434  00F7B8  C016  F029         	movff	?___awtoft+1,___ftdiv@f1+1
  1435  00F7BC  C017  F02A         	movff	?___awtoft+2,___ftdiv@f1+2
  1436  00F7C0  EC47  F06C         	call	___ftdiv	;wreg free
  1437  00F7C4  C028  F037         	movff	?___ftdiv,___ftadd@f1
  1438  00F7C8  C029  F038         	movff	?___ftdiv+1,___ftadd@f1+1
  1439  00F7CC  C02A  F039         	movff	?___ftdiv+2,___ftadd@f1+2
  1440  00F7D0  ECF1  F070         	call	___ftadd	;wreg free
  1441  00F7D4  C037  F0C3         	movff	?___ftadd,_main$1331
  1442  00F7D8  C038  F0C4         	movff	?___ftadd+1,_main$1331+1
  1443  00F7DC  C039  F0C5         	movff	?___ftadd+2,_main$1331+2
  1444                           
  1445                           ;main.c: 105: Axout = (((double)(a*5)/1.024)-1700.0)/330.0;
  1446  00F7E0  C0C3  F028         	movff	_main$1331,___ftdiv@f1
  1447  00F7E4  C0C4  F029         	movff	_main$1331+1,___ftdiv@f1+1
  1448  00F7E8  C0C5  F02A         	movff	_main$1331+2,___ftdiv@f1+2
  1449  00F7EC  0E00               	movlw	0
  1450  00F7EE  6E2B               	movwf	___ftdiv@f2,c
  1451  00F7F0  0EA5               	movlw	165
  1452  00F7F2  6E2C               	movwf	___ftdiv@f2+1,c
  1453  00F7F4  0E43               	movlw	67
  1454  00F7F6  6E2D               	movwf	___ftdiv@f2+2,c
  1455  00F7F8  EC47  F06C         	call	___ftdiv	;wreg free
  1456  00F7FC  C028  F0D8         	movff	?___ftdiv,main@Axout
  1457  00F800  C029  F0D9         	movff	?___ftdiv+1,main@Axout+1
  1458  00F804  C02A  F0DA         	movff	?___ftdiv+2,main@Axout+2
  1459                           
  1460                           ;main.c: 106: Ayout = (((double)(b*5)/1.024)-1700.0)/330.0;
  1461  00F808  0E80               	movlw	128
  1462  00F80A  6E3A               	movwf	___ftadd@f2,c
  1463  00F80C  0ED4               	movlw	212
  1464  00F80E  6E3B               	movwf	___ftadd@f2+1,c
  1465  00F810  0EC4               	movlw	196
  1466  00F812  6E3C               	movwf	___ftadd@f2+2,c
  1467  00F814  0E12               	movlw	18
  1468  00F816  6E2B               	movwf	___ftdiv@f2,c
  1469  00F818  0E83               	movlw	131
  1470  00F81A  6E2C               	movwf	___ftdiv@f2+1,c
  1471  00F81C  0E3F               	movlw	63
  1472  00F81E  6E2D               	movwf	___ftdiv@f2+2,c
  1473  00F820  C0BF  F00F         	movff	main@b,___wmul@multiplier
  1474  00F824  C0C0  F010         	movff	main@b+1,___wmul@multiplier+1
  1475  00F828  0E00               	movlw	0
  1476  00F82A  6E12               	movwf	___wmul@multiplicand+1,c
  1477  00F82C  0E05               	movlw	5
  1478  00F82E  6E11               	movwf	___wmul@multiplicand,c
  1479  00F830  EC2F  F068         	call	___wmul	;wreg free
  1480  00F834  C00F  F015         	movff	?___wmul,___awtoft@c
  1481  00F838  C010  F016         	movff	?___wmul+1,___awtoft@c+1
  1482  00F83C  EC72  F068         	call	___awtoft	;wreg free
  1483  00F840  C015  F028         	movff	?___awtoft,___ftdiv@f1
  1484  00F844  C016  F029         	movff	?___awtoft+1,___ftdiv@f1+1
  1485  00F848  C017  F02A         	movff	?___awtoft+2,___ftdiv@f1+2
  1486  00F84C  EC47  F06C         	call	___ftdiv	;wreg free
  1487  00F850  C028  F037         	movff	?___ftdiv,___ftadd@f1
  1488  00F854  C029  F038         	movff	?___ftdiv+1,___ftadd@f1+1
  1489  00F858  C02A  F039         	movff	?___ftdiv+2,___ftadd@f1+2
  1490  00F85C  ECF1  F070         	call	___ftadd	;wreg free
  1491  00F860  C037  F0C3         	movff	?___ftadd,_main$1331
  1492  00F864  C038  F0C4         	movff	?___ftadd+1,_main$1331+1
  1493  00F868  C039  F0C5         	movff	?___ftadd+2,_main$1331+2
  1494                           
  1495                           ;main.c: 106: Ayout = (((double)(b*5)/1.024)-1700.0)/330.0;
  1496  00F86C  C0C3  F028         	movff	_main$1331,___ftdiv@f1
  1497  00F870  C0C4  F029         	movff	_main$1331+1,___ftdiv@f1+1
  1498  00F874  C0C5  F02A         	movff	_main$1331+2,___ftdiv@f1+2
  1499  00F878  0E00               	movlw	0
  1500  00F87A  6E2B               	movwf	___ftdiv@f2,c
  1501  00F87C  0EA5               	movlw	165
  1502  00F87E  6E2C               	movwf	___ftdiv@f2+1,c
  1503  00F880  0E43               	movlw	67
  1504  00F882  6E2D               	movwf	___ftdiv@f2+2,c
  1505  00F884  EC47  F06C         	call	___ftdiv	;wreg free
  1506  00F888  C028  F0DB         	movff	?___ftdiv,main@Ayout
  1507  00F88C  C029  F0DC         	movff	?___ftdiv+1,main@Ayout+1
  1508  00F890  C02A  F0DD         	movff	?___ftdiv+2,main@Ayout+2
  1509                           
  1510                           ;main.c: 107: Azout = (((double)(c*5)/1.024)-1700.0)/330.0;
  1511  00F894  0E80               	movlw	128
  1512  00F896  6E3A               	movwf	___ftadd@f2,c
  1513  00F898  0ED4               	movlw	212
  1514  00F89A  6E3B               	movwf	___ftadd@f2+1,c
  1515  00F89C  0EC4               	movlw	196
  1516  00F89E  6E3C               	movwf	___ftadd@f2+2,c
  1517  00F8A0  0E12               	movlw	18
  1518  00F8A2  6E2B               	movwf	___ftdiv@f2,c
  1519  00F8A4  0E83               	movlw	131
  1520  00F8A6  6E2C               	movwf	___ftdiv@f2+1,c
  1521  00F8A8  0E3F               	movlw	63
  1522  00F8AA  6E2D               	movwf	___ftdiv@f2+2,c
  1523  00F8AC  C0C1  F00F         	movff	main@c,___wmul@multiplier
  1524  00F8B0  C0C2  F010         	movff	main@c+1,___wmul@multiplier+1
  1525  00F8B4  0E00               	movlw	0
  1526  00F8B6  6E12               	movwf	___wmul@multiplicand+1,c
  1527  00F8B8  0E05               	movlw	5
  1528  00F8BA  6E11               	movwf	___wmul@multiplicand,c
  1529  00F8BC  EC2F  F068         	call	___wmul	;wreg free
  1530  00F8C0  C00F  F015         	movff	?___wmul,___awtoft@c
  1531  00F8C4  C010  F016         	movff	?___wmul+1,___awtoft@c+1
  1532  00F8C8  EC72  F068         	call	___awtoft	;wreg free
  1533  00F8CC  C015  F028         	movff	?___awtoft,___ftdiv@f1
  1534  00F8D0  C016  F029         	movff	?___awtoft+1,___ftdiv@f1+1
  1535  00F8D4  C017  F02A         	movff	?___awtoft+2,___ftdiv@f1+2
  1536  00F8D8  EC47  F06C         	call	___ftdiv	;wreg free
  1537  00F8DC  C028  F037         	movff	?___ftdiv,___ftadd@f1
  1538  00F8E0  C029  F038         	movff	?___ftdiv+1,___ftadd@f1+1
  1539  00F8E4  C02A  F039         	movff	?___ftdiv+2,___ftadd@f1+2
  1540  00F8E8  ECF1  F070         	call	___ftadd	;wreg free
  1541  00F8EC  C037  F0C3         	movff	?___ftadd,_main$1331
  1542  00F8F0  C038  F0C4         	movff	?___ftadd+1,_main$1331+1
  1543  00F8F4  C039  F0C5         	movff	?___ftadd+2,_main$1331+2
  1544                           
  1545                           ;main.c: 107: Azout = (((double)(c*5)/1.024)-1700.0)/330.0;
  1546  00F8F8  C0C3  F028         	movff	_main$1331,___ftdiv@f1
  1547  00F8FC  C0C4  F029         	movff	_main$1331+1,___ftdiv@f1+1
  1548  00F900  C0C5  F02A         	movff	_main$1331+2,___ftdiv@f1+2
  1549  00F904  0E00               	movlw	0
  1550  00F906  6E2B               	movwf	___ftdiv@f2,c
  1551  00F908  0EA5               	movlw	165
  1552  00F90A  6E2C               	movwf	___ftdiv@f2+1,c
  1553  00F90C  0E43               	movlw	67
  1554  00F90E  6E2D               	movwf	___ftdiv@f2+2,c
  1555  00F910  EC47  F06C         	call	___ftdiv	;wreg free
  1556  00F914  C028  F0DE         	movff	?___ftdiv,main@Azout
  1557  00F918  C029  F0DF         	movff	?___ftdiv+1,main@Azout+1
  1558  00F91C  C02A  F0E0         	movff	?___ftdiv+2,main@Azout+2
  1559                           
  1560                           ;main.c: 109: theta = atan(Axout/(sqrt((pow (Ayout,2.0))+(pow (Azout,2.0)))))*57.2957795
      +                          1;
  1561  00F920  0E00               	movlw	0
  1562  00F922  0100               	movlb	0	; () banked
  1563  00F924  6F63               	movwf	pow@y& (0+255),b
  1564  00F926  0E00               	movlw	0
  1565  00F928  6F64               	movwf	(pow@y+1)& (0+255),b
  1566  00F92A  0E40               	movlw	64
  1567  00F92C  6F65               	movwf	(pow@y+2)& (0+255),b
  1568  00F92E  C0DE  F060         	movff	main@Azout,pow@x
  1569  00F932  C0DF  F061         	movff	main@Azout+1,pow@x+1
  1570  00F936  C0E0  F062         	movff	main@Azout+2,pow@x+2
  1571  00F93A  EC6A  F06F         	call	_pow	;wreg free
  1572  00F93E  C060  F0C6         	movff	?_pow,_main$1332
  1573  00F942  C061  F0C7         	movff	?_pow+1,_main$1332+1
  1574  00F946  C062  F0C8         	movff	?_pow+2,_main$1332+2
  1575                           
  1576                           ;main.c: 109: theta = atan(Axout/(sqrt((pow (Ayout,2.0))+(pow (Azout,2.0)))))*57.2957795
      +                          1;
  1577  00F94A  0E00               	movlw	0
  1578  00F94C  0100               	movlb	0	; () banked
  1579  00F94E  6F63               	movwf	pow@y& (0+255),b
  1580  00F950  0E00               	movlw	0
  1581  00F952  6F64               	movwf	(pow@y+1)& (0+255),b
  1582  00F954  0E40               	movlw	64
  1583  00F956  6F65               	movwf	(pow@y+2)& (0+255),b
  1584  00F958  C0DB  F060         	movff	main@Ayout,pow@x
  1585  00F95C  C0DC  F061         	movff	main@Ayout+1,pow@x+1
  1586  00F960  C0DD  F062         	movff	main@Ayout+2,pow@x+2
  1587  00F964  EC6A  F06F         	call	_pow	;wreg free
  1588  00F968  C060  F0C9         	movff	?_pow,_main$1333
  1589  00F96C  C061  F0CA         	movff	?_pow+1,_main$1333+1
  1590  00F970  C062  F0CB         	movff	?_pow+2,_main$1333+2
  1591                           
  1592                           ;main.c: 109: theta = atan(Axout/(sqrt((pow (Ayout,2.0))+(pow (Azout,2.0)))))*57.2957795
      +                          1;
  1593  00F974  C0C6  F03A         	movff	_main$1332,___ftadd@f2
  1594  00F978  C0C7  F03B         	movff	_main$1332+1,___ftadd@f2+1
  1595  00F97C  C0C8  F03C         	movff	_main$1332+2,___ftadd@f2+2
  1596  00F980  C0C9  F037         	movff	_main$1333,___ftadd@f1
  1597  00F984  C0CA  F038         	movff	_main$1333+1,___ftadd@f1+1
  1598  00F988  C0CB  F039         	movff	_main$1333+2,___ftadd@f1+2
  1599  00F98C  ECF1  F070         	call	___ftadd	;wreg free
  1600  00F990  C037  F0CC         	movff	?___ftadd,_main$1334
  1601  00F994  C038  F0CD         	movff	?___ftadd+1,_main$1334+1
  1602  00F998  C039  F0CE         	movff	?___ftadd+2,_main$1334+2
  1603                           
  1604                           ;main.c: 109: theta = atan(Axout/(sqrt((pow (Ayout,2.0))+(pow (Azout,2.0)))))*57.2957795
      +                          1;
  1605  00F99C  C0CC  F071         	movff	_main$1334,sqrt@a
  1606  00F9A0  C0CD  F072         	movff	_main$1334+1,sqrt@a+1
  1607  00F9A4  C0CE  F073         	movff	_main$1334+2,sqrt@a+2
  1608  00F9A8  EC28  F070         	call	_sqrt	;wreg free
  1609  00F9AC  C071  F02B         	movff	?_sqrt,___ftdiv@f2
  1610  00F9B0  C072  F02C         	movff	?_sqrt+1,___ftdiv@f2+1
  1611  00F9B4  C073  F02D         	movff	?_sqrt+2,___ftdiv@f2+2
  1612  00F9B8  C0D8  F028         	movff	main@Axout,___ftdiv@f1
  1613  00F9BC  C0D9  F029         	movff	main@Axout+1,___ftdiv@f1+1
  1614  00F9C0  C0DA  F02A         	movff	main@Axout+2,___ftdiv@f1+2
  1615  00F9C4  EC47  F06C         	call	___ftdiv	;wreg free
  1616  00F9C8  C028  F0CF         	movff	?___ftdiv,_main$1335
  1617  00F9CC  C029  F0D0         	movff	?___ftdiv+1,_main$1335+1
  1618  00F9D0  C02A  F0D1         	movff	?___ftdiv+2,_main$1335+2
  1619                           
  1620                           ;main.c: 109: theta = atan(Axout/(sqrt((pow (Ayout,2.0))+(pow (Azout,2.0)))))*57.2957795
      +                          1;
  1621  00F9D4  C0CF  F084         	movff	_main$1335,atan@f
  1622  00F9D8  C0D0  F085         	movff	_main$1335+1,atan@f+1
  1623  00F9DC  C0D1  F086         	movff	_main$1335+2,atan@f+2
  1624  00F9E0  ECC7  F071         	call	_atan	;wreg free
  1625  00F9E4  C084  F0D2         	movff	?_atan,_main$1336
  1626  00F9E8  C085  F0D3         	movff	?_atan+1,_main$1336+1
  1627  00F9EC  C086  F0D4         	movff	?_atan+2,_main$1336+2
  1628                           
  1629                           ;main.c: 109: theta = atan(Axout/(sqrt((pow (Ayout,2.0))+(pow (Azout,2.0)))))*57.2957795
      +                          1;
  1630  00F9F0  C0D2  F019         	movff	_main$1336,___ftmul@f1
  1631  00F9F4  C0D3  F01A         	movff	_main$1336+1,___ftmul@f1+1
  1632  00F9F8  C0D4  F01B         	movff	_main$1336+2,___ftmul@f1+2
  1633  00F9FC  0E2F               	movlw	47
  1634  00F9FE  6E1C               	movwf	___ftmul@f2,c
  1635  00FA00  0E65               	movlw	101
  1636  00FA02  6E1D               	movwf	___ftmul@f2+1,c
  1637  00FA04  0E42               	movlw	66
  1638  00FA06  6E1E               	movwf	___ftmul@f2+2,c
  1639  00FA08  ECBA  F06C         	call	___ftmul	;wreg free
  1640  00FA0C  C019  F0A9         	movff	?___ftmul,main@theta
  1641  00FA10  C01A  F0AA         	movff	?___ftmul+1,main@theta+1
  1642  00FA14  C01B  F0AB         	movff	?___ftmul+2,main@theta+2
  1643                           
  1644                           ;main.c: 110: psy = atan(Ayout/(sqrt((pow (Axout,2.0))+(pow (Azout,2.0)))))*57.29577951;
  1645  00FA18  0E00               	movlw	0
  1646  00FA1A  0100               	movlb	0	; () banked
  1647  00FA1C  6F63               	movwf	pow@y& (0+255),b
  1648  00FA1E  0E00               	movlw	0
  1649  00FA20  6F64               	movwf	(pow@y+1)& (0+255),b
  1650  00FA22  0E40               	movlw	64
  1651  00FA24  6F65               	movwf	(pow@y+2)& (0+255),b
  1652  00FA26  C0DE  F060         	movff	main@Azout,pow@x
  1653  00FA2A  C0DF  F061         	movff	main@Azout+1,pow@x+1
  1654  00FA2E  C0E0  F062         	movff	main@Azout+2,pow@x+2
  1655  00FA32  EC6A  F06F         	call	_pow	;wreg free
  1656  00FA36  C060  F0C6         	movff	?_pow,_main$1332
  1657  00FA3A  C061  F0C7         	movff	?_pow+1,_main$1332+1
  1658  00FA3E  C062  F0C8         	movff	?_pow+2,_main$1332+2
  1659                           
  1660                           ;main.c: 110: psy = atan(Ayout/(sqrt((pow (Axout,2.0))+(pow (Azout,2.0)))))*57.29577951;
  1661  00FA42  0E00               	movlw	0
  1662  00FA44  0100               	movlb	0	; () banked
  1663  00FA46  6F63               	movwf	pow@y& (0+255),b
  1664  00FA48  0E00               	movlw	0
  1665  00FA4A  6F64               	movwf	(pow@y+1)& (0+255),b
  1666  00FA4C  0E40               	movlw	64
  1667  00FA4E  6F65               	movwf	(pow@y+2)& (0+255),b
  1668  00FA50  C0D8  F060         	movff	main@Axout,pow@x
  1669  00FA54  C0D9  F061         	movff	main@Axout+1,pow@x+1
  1670  00FA58  C0DA  F062         	movff	main@Axout+2,pow@x+2
  1671  00FA5C  EC6A  F06F         	call	_pow	;wreg free
  1672  00FA60  C060  F0C9         	movff	?_pow,_main$1333
  1673  00FA64  C061  F0CA         	movff	?_pow+1,_main$1333+1
  1674  00FA68  C062  F0CB         	movff	?_pow+2,_main$1333+2
  1675                           
  1676                           ;main.c: 110: psy = atan(Ayout/(sqrt((pow (Axout,2.0))+(pow (Azout,2.0)))))*57.29577951;
  1677  00FA6C  C0C6  F03A         	movff	_main$1332,___ftadd@f2
  1678  00FA70  C0C7  F03B         	movff	_main$1332+1,___ftadd@f2+1
  1679  00FA74  C0C8  F03C         	movff	_main$1332+2,___ftadd@f2+2
  1680  00FA78  C0C9  F037         	movff	_main$1333,___ftadd@f1
  1681  00FA7C  C0CA  F038         	movff	_main$1333+1,___ftadd@f1+1
  1682  00FA80  C0CB  F039         	movff	_main$1333+2,___ftadd@f1+2
  1683  00FA84  ECF1  F070         	call	___ftadd	;wreg free
  1684  00FA88  C037  F0CC         	movff	?___ftadd,_main$1334
  1685  00FA8C  C038  F0CD         	movff	?___ftadd+1,_main$1334+1
  1686  00FA90  C039  F0CE         	movff	?___ftadd+2,_main$1334+2
  1687                           
  1688                           ;main.c: 110: psy = atan(Ayout/(sqrt((pow (Axout,2.0))+(pow (Azout,2.0)))))*57.29577951;
  1689  00FA94  C0CC  F071         	movff	_main$1334,sqrt@a
  1690  00FA98  C0CD  F072         	movff	_main$1334+1,sqrt@a+1
  1691  00FA9C  C0CE  F073         	movff	_main$1334+2,sqrt@a+2
  1692  00FAA0  EC28  F070         	call	_sqrt	;wreg free
  1693  00FAA4  C071  F02B         	movff	?_sqrt,___ftdiv@f2
  1694  00FAA8  C072  F02C         	movff	?_sqrt+1,___ftdiv@f2+1
  1695  00FAAC  C073  F02D         	movff	?_sqrt+2,___ftdiv@f2+2
  1696  00FAB0  C0DB  F028         	movff	main@Ayout,___ftdiv@f1
  1697  00FAB4  C0DC  F029         	movff	main@Ayout+1,___ftdiv@f1+1
  1698  00FAB8  C0DD  F02A         	movff	main@Ayout+2,___ftdiv@f1+2
  1699  00FABC  EC47  F06C         	call	___ftdiv	;wreg free
  1700  00FAC0  C028  F0CF         	movff	?___ftdiv,_main$1335
  1701  00FAC4  C029  F0D0         	movff	?___ftdiv+1,_main$1335+1
  1702  00FAC8  C02A  F0D1         	movff	?___ftdiv+2,_main$1335+2
  1703                           
  1704                           ;main.c: 110: psy = atan(Ayout/(sqrt((pow (Axout,2.0))+(pow (Azout,2.0)))))*57.29577951;
  1705  00FACC  C0CF  F084         	movff	_main$1335,atan@f
  1706  00FAD0  C0D0  F085         	movff	_main$1335+1,atan@f+1
  1707  00FAD4  C0D1  F086         	movff	_main$1335+2,atan@f+2
  1708  00FAD8  ECC7  F071         	call	_atan	;wreg free
  1709  00FADC  C084  F0D2         	movff	?_atan,_main$1336
  1710  00FAE0  C085  F0D3         	movff	?_atan+1,_main$1336+1
  1711  00FAE4  C086  F0D4         	movff	?_atan+2,_main$1336+2
  1712                           
  1713                           ;main.c: 110: psy = atan(Ayout/(sqrt((pow (Axout,2.0))+(pow (Azout,2.0)))))*57.29577951;
  1714  00FAE8  C0D2  F019         	movff	_main$1336,___ftmul@f1
  1715  00FAEC  C0D3  F01A         	movff	_main$1336+1,___ftmul@f1+1
  1716  00FAF0  C0D4  F01B         	movff	_main$1336+2,___ftmul@f1+2
  1717  00FAF4  0E2F               	movlw	47
  1718  00FAF6  6E1C               	movwf	___ftmul@f2,c
  1719  00FAF8  0E65               	movlw	101
  1720  00FAFA  6E1D               	movwf	___ftmul@f2+1,c
  1721  00FAFC  0E42               	movlw	66
  1722  00FAFE  6E1E               	movwf	___ftmul@f2+2,c
  1723  00FB00  ECBA  F06C         	call	___ftmul	;wreg free
  1724  00FB04  C019  F0AC         	movff	?___ftmul,main@psy
  1725  00FB08  C01A  F0AD         	movff	?___ftmul+1,main@psy+1
  1726  00FB0C  C01B  F0AE         	movff	?___ftmul+2,main@psy+2
  1727                           
  1728                           ;main.c: 111: phi = atan((sqrt((pow (Ayout,2.0))+(pow (Axout,2.0))))/Azout)*57.29577951;
  1729  00FB10  0E00               	movlw	0
  1730  00FB12  0100               	movlb	0	; () banked
  1731  00FB14  6F63               	movwf	pow@y& (0+255),b
  1732  00FB16  0E00               	movlw	0
  1733  00FB18  6F64               	movwf	(pow@y+1)& (0+255),b
  1734  00FB1A  0E40               	movlw	64
  1735  00FB1C  6F65               	movwf	(pow@y+2)& (0+255),b
  1736  00FB1E  C0D8  F060         	movff	main@Axout,pow@x
  1737  00FB22  C0D9  F061         	movff	main@Axout+1,pow@x+1
  1738  00FB26  C0DA  F062         	movff	main@Axout+2,pow@x+2
  1739  00FB2A  EC6A  F06F         	call	_pow	;wreg free
  1740  00FB2E  C060  F0C6         	movff	?_pow,_main$1332
  1741  00FB32  C061  F0C7         	movff	?_pow+1,_main$1332+1
  1742  00FB36  C062  F0C8         	movff	?_pow+2,_main$1332+2
  1743                           
  1744                           ;main.c: 111: phi = atan((sqrt((pow (Ayout,2.0))+(pow (Axout,2.0))))/Azout)*57.29577951;
  1745  00FB3A  0E00               	movlw	0
  1746  00FB3C  0100               	movlb	0	; () banked
  1747  00FB3E  6F63               	movwf	pow@y& (0+255),b
  1748  00FB40  0E00               	movlw	0
  1749  00FB42  6F64               	movwf	(pow@y+1)& (0+255),b
  1750  00FB44  0E40               	movlw	64
  1751  00FB46  6F65               	movwf	(pow@y+2)& (0+255),b
  1752  00FB48  C0DB  F060         	movff	main@Ayout,pow@x
  1753  00FB4C  C0DC  F061         	movff	main@Ayout+1,pow@x+1
  1754  00FB50  C0DD  F062         	movff	main@Ayout+2,pow@x+2
  1755  00FB54  EC6A  F06F         	call	_pow	;wreg free
  1756  00FB58  C060  F0C9         	movff	?_pow,_main$1333
  1757  00FB5C  C061  F0CA         	movff	?_pow+1,_main$1333+1
  1758  00FB60  C062  F0CB         	movff	?_pow+2,_main$1333+2
  1759                           
  1760                           ;main.c: 111: phi = atan((sqrt((pow (Ayout,2.0))+(pow (Axout,2.0))))/Azout)*57.29577951;
  1761  00FB64  C0C6  F03A         	movff	_main$1332,___ftadd@f2
  1762  00FB68  C0C7  F03B         	movff	_main$1332+1,___ftadd@f2+1
  1763  00FB6C  C0C8  F03C         	movff	_main$1332+2,___ftadd@f2+2
  1764  00FB70  C0C9  F037         	movff	_main$1333,___ftadd@f1
  1765  00FB74  C0CA  F038         	movff	_main$1333+1,___ftadd@f1+1
  1766  00FB78  C0CB  F039         	movff	_main$1333+2,___ftadd@f1+2
  1767  00FB7C  ECF1  F070         	call	___ftadd	;wreg free
  1768  00FB80  C037  F0CC         	movff	?___ftadd,_main$1334
  1769  00FB84  C038  F0CD         	movff	?___ftadd+1,_main$1334+1
  1770  00FB88  C039  F0CE         	movff	?___ftadd+2,_main$1334+2
  1771                           
  1772                           ;main.c: 111: phi = atan((sqrt((pow (Ayout,2.0))+(pow (Axout,2.0))))/Azout)*57.29577951;
  1773  00FB8C  C0DE  F02B         	movff	main@Azout,___ftdiv@f2
  1774  00FB90  C0DF  F02C         	movff	main@Azout+1,___ftdiv@f2+1
  1775  00FB94  C0E0  F02D         	movff	main@Azout+2,___ftdiv@f2+2
  1776  00FB98  C0CC  F071         	movff	_main$1334,sqrt@a
  1777  00FB9C  C0CD  F072         	movff	_main$1334+1,sqrt@a+1
  1778  00FBA0  C0CE  F073         	movff	_main$1334+2,sqrt@a+2
  1779  00FBA4  EC28  F070         	call	_sqrt	;wreg free
  1780  00FBA8  C071  F028         	movff	?_sqrt,___ftdiv@f1
  1781  00FBAC  C072  F029         	movff	?_sqrt+1,___ftdiv@f1+1
  1782  00FBB0  C073  F02A         	movff	?_sqrt+2,___ftdiv@f1+2
  1783  00FBB4  EC47  F06C         	call	___ftdiv	;wreg free
  1784  00FBB8  C028  F0CF         	movff	?___ftdiv,_main$1335
  1785  00FBBC  C029  F0D0         	movff	?___ftdiv+1,_main$1335+1
  1786  00FBC0  C02A  F0D1         	movff	?___ftdiv+2,_main$1335+2
  1787                           
  1788                           ;main.c: 111: phi = atan((sqrt((pow (Ayout,2.0))+(pow (Axout,2.0))))/Azout)*57.29577951;
  1789  00FBC4  C0CF  F084         	movff	_main$1335,atan@f
  1790  00FBC8  C0D0  F085         	movff	_main$1335+1,atan@f+1
  1791  00FBCC  C0D1  F086         	movff	_main$1335+2,atan@f+2
  1792  00FBD0  ECC7  F071         	call	_atan	;wreg free
  1793  00FBD4  C084  F0D2         	movff	?_atan,_main$1336
  1794  00FBD8  C085  F0D3         	movff	?_atan+1,_main$1336+1
  1795  00FBDC  C086  F0D4         	movff	?_atan+2,_main$1336+2
  1796                           
  1797                           ;main.c: 111: phi = atan((sqrt((pow (Ayout,2.0))+(pow (Axout,2.0))))/Azout)*57.29577951;
  1798  00FBE0  C0D2  F019         	movff	_main$1336,___ftmul@f1
  1799  00FBE4  C0D3  F01A         	movff	_main$1336+1,___ftmul@f1+1
  1800  00FBE8  C0D4  F01B         	movff	_main$1336+2,___ftmul@f1+2
  1801  00FBEC  0E2F               	movlw	47
  1802  00FBEE  6E1C               	movwf	___ftmul@f2,c
  1803  00FBF0  0E65               	movlw	101
  1804  00FBF2  6E1D               	movwf	___ftmul@f2+1,c
  1805  00FBF4  0E42               	movlw	66
  1806  00FBF6  6E1E               	movwf	___ftmul@f2+2,c
  1807  00FBF8  ECBA  F06C         	call	___ftmul	;wreg free
  1808  00FBFC  C019  F0AF         	movff	?___ftmul,main@phi
  1809  00FC00  C01A  F0B0         	movff	?___ftmul+1,main@phi+1
  1810  00FC04  C01B  F0B1         	movff	?___ftmul+2,main@phi+2
  1811                           
  1812                           ;main.c: 113: roll = (atan2(Ayout,Azout))*57.29577951+180;
  1813  00FC08  C0DE  F097         	movff	main@Azout,atan2@x
  1814  00FC0C  C0DF  F098         	movff	main@Azout+1,atan2@x+1
  1815  00FC10  C0E0  F099         	movff	main@Azout+2,atan2@x+2
  1816  00FC14  C0DB  F094         	movff	main@Ayout,atan2@y
  1817  00FC18  C0DC  F095         	movff	main@Ayout+1,atan2@y+1
  1818  00FC1C  C0DD  F096         	movff	main@Ayout+2,atan2@y+2
  1819  00FC20  ECC6  F074         	call	_atan2	;wreg free
  1820  00FC24  C094  F0D5         	movff	?_atan2,_main$1337
  1821  00FC28  C095  F0D6         	movff	?_atan2+1,_main$1337+1
  1822  00FC2C  C096  F0D7         	movff	?_atan2+2,_main$1337+2
  1823                           
  1824                           ;main.c: 113: roll = (atan2(Ayout,Azout))*57.29577951+180;
  1825  00FC30  0E2F               	movlw	47
  1826  00FC32  6E1C               	movwf	___ftmul@f2,c
  1827  00FC34  0E65               	movlw	101
  1828  00FC36  6E1D               	movwf	___ftmul@f2+1,c
  1829  00FC38  0E42               	movlw	66
  1830  00FC3A  6E1E               	movwf	___ftmul@f2+2,c
  1831  00FC3C  C0D5  F019         	movff	_main$1337,___ftmul@f1
  1832  00FC40  C0D6  F01A         	movff	_main$1337+1,___ftmul@f1+1
  1833  00FC44  C0D7  F01B         	movff	_main$1337+2,___ftmul@f1+2
  1834  00FC48  ECBA  F06C         	call	___ftmul	;wreg free
  1835  00FC4C  C019  F037         	movff	?___ftmul,___ftadd@f1
  1836  00FC50  C01A  F038         	movff	?___ftmul+1,___ftadd@f1+1
  1837  00FC54  C01B  F039         	movff	?___ftmul+2,___ftadd@f1+2
  1838  00FC58  0E00               	movlw	0
  1839  00FC5A  6E3A               	movwf	___ftadd@f2,c
  1840  00FC5C  0E34               	movlw	52
  1841  00FC5E  6E3B               	movwf	___ftadd@f2+1,c
  1842  00FC60  0E43               	movlw	67
  1843  00FC62  6E3C               	movwf	___ftadd@f2+2,c
  1844  00FC64  ECF1  F070         	call	___ftadd	;wreg free
  1845  00FC68  C037  F0B2         	movff	?___ftadd,main@roll
  1846  00FC6C  C038  F0B3         	movff	?___ftadd+1,main@roll+1
  1847  00FC70  C039  F0B4         	movff	?___ftadd+2,main@roll+2
  1848                           
  1849                           ;main.c: 114: pitch = (atan2(Azout,Axout))*57.29577951+180;
  1850  00FC74  C0D8  F097         	movff	main@Axout,atan2@x
  1851  00FC78  C0D9  F098         	movff	main@Axout+1,atan2@x+1
  1852  00FC7C  C0DA  F099         	movff	main@Axout+2,atan2@x+2
  1853  00FC80  C0DE  F094         	movff	main@Azout,atan2@y
  1854  00FC84  C0DF  F095         	movff	main@Azout+1,atan2@y+1
  1855  00FC88  C0E0  F096         	movff	main@Azout+2,atan2@y+2
  1856  00FC8C  ECC6  F074         	call	_atan2	;wreg free
  1857  00FC90  C094  F0D5         	movff	?_atan2,_main$1337
  1858  00FC94  C095  F0D6         	movff	?_atan2+1,_main$1337+1
  1859  00FC98  C096  F0D7         	movff	?_atan2+2,_main$1337+2
  1860                           
  1861                           ;main.c: 114: pitch = (atan2(Azout,Axout))*57.29577951+180;
  1862  00FC9C  0E2F               	movlw	47
  1863  00FC9E  6E1C               	movwf	___ftmul@f2,c
  1864  00FCA0  0E65               	movlw	101
  1865  00FCA2  6E1D               	movwf	___ftmul@f2+1,c
  1866  00FCA4  0E42               	movlw	66
  1867  00FCA6  6E1E               	movwf	___ftmul@f2+2,c
  1868  00FCA8  C0D5  F019         	movff	_main$1337,___ftmul@f1
  1869  00FCAC  C0D6  F01A         	movff	_main$1337+1,___ftmul@f1+1
  1870  00FCB0  C0D7  F01B         	movff	_main$1337+2,___ftmul@f1+2
  1871  00FCB4  ECBA  F06C         	call	___ftmul	;wreg free
  1872  00FCB8  C019  F037         	movff	?___ftmul,___ftadd@f1
  1873  00FCBC  C01A  F038         	movff	?___ftmul+1,___ftadd@f1+1
  1874  00FCC0  C01B  F039         	movff	?___ftmul+2,___ftadd@f1+2
  1875  00FCC4  0E00               	movlw	0
  1876  00FCC6  6E3A               	movwf	___ftadd@f2,c
  1877  00FCC8  0E34               	movlw	52
  1878  00FCCA  6E3B               	movwf	___ftadd@f2+1,c
  1879  00FCCC  0E43               	movlw	67
  1880  00FCCE  6E3C               	movwf	___ftadd@f2+2,c
  1881  00FCD0  ECF1  F070         	call	___ftadd	;wreg free
  1882  00FCD4  C037  F0B5         	movff	?___ftadd,main@pitch
  1883  00FCD8  C038  F0B6         	movff	?___ftadd+1,main@pitch+1
  1884  00FCDC  C039  F0B7         	movff	?___ftadd+2,main@pitch+2
  1885                           
  1886                           ;main.c: 115: yaw = (atan2(Axout,Ayout))*57.29577951+180;
  1887  00FCE0  C0DB  F097         	movff	main@Ayout,atan2@x
  1888  00FCE4  C0DC  F098         	movff	main@Ayout+1,atan2@x+1
  1889  00FCE8  C0DD  F099         	movff	main@Ayout+2,atan2@x+2
  1890  00FCEC  C0D8  F094         	movff	main@Axout,atan2@y
  1891  00FCF0  C0D9  F095         	movff	main@Axout+1,atan2@y+1
  1892  00FCF4  C0DA  F096         	movff	main@Axout+2,atan2@y+2
  1893  00FCF8  ECC6  F074         	call	_atan2	;wreg free
  1894  00FCFC  C094  F0D5         	movff	?_atan2,_main$1337
  1895  00FD00  C095  F0D6         	movff	?_atan2+1,_main$1337+1
  1896  00FD04  C096  F0D7         	movff	?_atan2+2,_main$1337+2
  1897                           
  1898                           ;main.c: 115: yaw = (atan2(Axout,Ayout))*57.29577951+180;
  1899  00FD08  0E2F               	movlw	47
  1900  00FD0A  6E1C               	movwf	___ftmul@f2,c
  1901  00FD0C  0E65               	movlw	101
  1902  00FD0E  6E1D               	movwf	___ftmul@f2+1,c
  1903  00FD10  0E42               	movlw	66
  1904  00FD12  6E1E               	movwf	___ftmul@f2+2,c
  1905  00FD14  C0D5  F019         	movff	_main$1337,___ftmul@f1
  1906  00FD18  C0D6  F01A         	movff	_main$1337+1,___ftmul@f1+1
  1907  00FD1C  C0D7  F01B         	movff	_main$1337+2,___ftmul@f1+2
  1908  00FD20  ECBA  F06C         	call	___ftmul	;wreg free
  1909  00FD24  C019  F037         	movff	?___ftmul,___ftadd@f1
  1910  00FD28  C01A  F038         	movff	?___ftmul+1,___ftadd@f1+1
  1911  00FD2C  C01B  F039         	movff	?___ftmul+2,___ftadd@f1+2
  1912  00FD30  0E00               	movlw	0
  1913  00FD32  6E3A               	movwf	___ftadd@f2,c
  1914  00FD34  0E34               	movlw	52
  1915  00FD36  6E3B               	movwf	___ftadd@f2+1,c
  1916  00FD38  0E43               	movlw	67
  1917  00FD3A  6E3C               	movwf	___ftadd@f2+2,c
  1918  00FD3C  ECF1  F070         	call	___ftadd	;wreg free
  1919  00FD40  C037  F0B8         	movff	?___ftadd,main@yaw
  1920  00FD44  C038  F0B9         	movff	?___ftadd+1,main@yaw+1
  1921  00FD48  C039  F0BA         	movff	?___ftadd+2,main@yaw+2
  1922                           
  1923                           ;main.c: 116: printf("\r\n\nStart-------%d",f);
  1924  00FD4C  0E6B               	movlw	low STR_1
  1925  00FD4E  6E49               	movwf	printf@f,c
  1926  00FD50  0EFF               	movlw	high STR_1
  1927  00FD52  6E4A               	movwf	printf@f+1,c
  1928  00FD54  C0BB  F04B         	movff	main@f,?_printf+2
  1929  00FD58  C0BC  F04C         	movff	main@f+1,?_printf+3
  1930  00FD5C  ECFF  F077         	call	_printf	;wreg free
  1931                           
  1932                           ;main.c: 117: printf("\r\nX=%d",a);
  1933  00FD60  0EEA               	movlw	low STR_2
  1934  00FD62  6E49               	movwf	printf@f,c
  1935  00FD64  0EFF               	movlw	high STR_2
  1936  00FD66  6E4A               	movwf	printf@f+1,c
  1937  00FD68  C0BD  F04B         	movff	main@a,?_printf+2
  1938  00FD6C  C0BE  F04C         	movff	main@a+1,?_printf+3
  1939  00FD70  ECFF  F077         	call	_printf	;wreg free
  1940                           
  1941                           ;main.c: 118: printf("\r\nY=%d",b);
  1942  00FD74  0EF1               	movlw	low STR_3
  1943  00FD76  6E49               	movwf	printf@f,c
  1944  00FD78  0EFF               	movlw	high STR_3
  1945  00FD7A  6E4A               	movwf	printf@f+1,c
  1946  00FD7C  C0BF  F04B         	movff	main@b,?_printf+2
  1947  00FD80  C0C0  F04C         	movff	main@b+1,?_printf+3
  1948  00FD84  ECFF  F077         	call	_printf	;wreg free
  1949                           
  1950                           ;main.c: 119: printf("\r\nZ=%d",c);
  1951  00FD88  0EF8               	movlw	low STR_4
  1952  00FD8A  6E49               	movwf	printf@f,c
  1953  00FD8C  0EFF               	movlw	high STR_4
  1954  00FD8E  6E4A               	movwf	printf@f+1,c
  1955  00FD90  C0C1  F04B         	movff	main@c,?_printf+2
  1956  00FD94  C0C2  F04C         	movff	main@c+1,?_printf+3
  1957  00FD98  ECFF  F077         	call	_printf	;wreg free
  1958                           
  1959                           ;main.c: 120: printf("\r\nAxout = %fg",Axout);
  1960  00FD9C  0E7D               	movlw	low STR_5
  1961  00FD9E  6E49               	movwf	printf@f,c
  1962  00FDA0  0EFF               	movlw	high STR_5
  1963  00FDA2  6E4A               	movwf	printf@f+1,c
  1964  00FDA4  C0D8  F04B         	movff	main@Axout,?_printf+2
  1965  00FDA8  C0D9  F04C         	movff	main@Axout+1,?_printf+3
  1966  00FDAC  C0DA  F04D         	movff	main@Axout+2,?_printf+4
  1967  00FDB0  ECFF  F077         	call	_printf	;wreg free
  1968                           
  1969                           ;main.c: 121: printf("\r\nAyout =%fg",Ayout);
  1970  00FDB4  0E98               	movlw	low STR_6
  1971  00FDB6  6E49               	movwf	printf@f,c
  1972  00FDB8  0EFF               	movlw	high STR_6
  1973  00FDBA  6E4A               	movwf	printf@f+1,c
  1974  00FDBC  C0DB  F04B         	movff	main@Ayout,?_printf+2
  1975  00FDC0  C0DC  F04C         	movff	main@Ayout+1,?_printf+3
  1976  00FDC4  C0DD  F04D         	movff	main@Ayout+2,?_printf+4
  1977  00FDC8  ECFF  F077         	call	_printf	;wreg free
  1978                           
  1979                           ;main.c: 122: printf("\r\nAzout =%fg",Azout);
  1980  00FDCC  0EA5               	movlw	low STR_7
  1981  00FDCE  6E49               	movwf	printf@f,c
  1982  00FDD0  0EFF               	movlw	high STR_7
  1983  00FDD2  6E4A               	movwf	printf@f+1,c
  1984  00FDD4  C0DE  F04B         	movff	main@Azout,?_printf+2
  1985  00FDD8  C0DF  F04C         	movff	main@Azout+1,?_printf+3
  1986  00FDDC  C0E0  F04D         	movff	main@Azout+2,?_printf+4
  1987  00FDE0  ECFF  F077         	call	_printf	;wreg free
  1988                           
  1989                           ;main.c: 124: printf("\r\nTheta =%f",theta);
  1990  00FDE4  0EBE               	movlw	low STR_8
  1991  00FDE6  6E49               	movwf	printf@f,c
  1992  00FDE8  0EFF               	movlw	high STR_8
  1993  00FDEA  6E4A               	movwf	printf@f+1,c
  1994  00FDEC  C0A9  F04B         	movff	main@theta,?_printf+2
  1995  00FDF0  C0AA  F04C         	movff	main@theta+1,?_printf+3
  1996  00FDF4  C0AB  F04D         	movff	main@theta+2,?_printf+4
  1997  00FDF8  ECFF  F077         	call	_printf	;wreg free
  1998                           
  1999                           ;main.c: 125: printf("\r\nPsy = %f",psy);
  2000  00FDFC  0ED5               	movlw	low STR_9
  2001  00FDFE  6E49               	movwf	printf@f,c
  2002  00FE00  0EFF               	movlw	high STR_9
  2003  00FE02  6E4A               	movwf	printf@f+1,c
  2004  00FE04  C0AC  F04B         	movff	main@psy,?_printf+2
  2005  00FE08  C0AD  F04C         	movff	main@psy+1,?_printf+3
  2006  00FE0C  C0AE  F04D         	movff	main@psy+2,?_printf+4
  2007  00FE10  ECFF  F077         	call	_printf	;wreg free
  2008                           
  2009                           ;main.c: 126: printf("\r\nPhi = %f",phi);
  2010  00FE14  0ECA               	movlw	low STR_10
  2011  00FE16  6E49               	movwf	printf@f,c
  2012  00FE18  0EFF               	movlw	high STR_10
  2013  00FE1A  6E4A               	movwf	printf@f+1,c
  2014  00FE1C  C0AF  F04B         	movff	main@phi,?_printf+2
  2015  00FE20  C0B0  F04C         	movff	main@phi+1,?_printf+3
  2016  00FE24  C0B1  F04D         	movff	main@phi+2,?_printf+4
  2017  00FE28  ECFF  F077         	call	_printf	;wreg free
  2018                           
  2019                           ;main.c: 128: printf("\r\nRoll = %f",roll);
  2020  00FE2C  0EB2               	movlw	low STR_11
  2021  00FE2E  6E49               	movwf	printf@f,c
  2022  00FE30  0EFF               	movlw	high STR_11
  2023  00FE32  6E4A               	movwf	printf@f+1,c
  2024  00FE34  C0B2  F04B         	movff	main@roll,?_printf+2
  2025  00FE38  C0B3  F04C         	movff	main@roll+1,?_printf+3
  2026  00FE3C  C0B4  F04D         	movff	main@roll+2,?_printf+4
  2027  00FE40  ECFF  F077         	call	_printf	;wreg free
  2028                           
  2029                           ;main.c: 129: printf("\r\nPitch = %f",pitch);
  2030  00FE44  0E8B               	movlw	low STR_12
  2031  00FE46  6E49               	movwf	printf@f,c
  2032  00FE48  0EFF               	movlw	high STR_12
  2033  00FE4A  6E4A               	movwf	printf@f+1,c
  2034  00FE4C  C0B5  F04B         	movff	main@pitch,?_printf+2
  2035  00FE50  C0B6  F04C         	movff	main@pitch+1,?_printf+3
  2036  00FE54  C0B7  F04D         	movff	main@pitch+2,?_printf+4
  2037  00FE58  ECFF  F077         	call	_printf	;wreg free
  2038                           
  2039                           ;main.c: 130: printf("\r\nYaw =%f",yaw);
  2040  00FE5C  0EE0               	movlw	low STR_13
  2041  00FE5E  6E49               	movwf	printf@f,c
  2042  00FE60  0EFF               	movlw	high STR_13
  2043  00FE62  6E4A               	movwf	printf@f+1,c
  2044  00FE64  C0B8  F04B         	movff	main@yaw,?_printf+2
  2045  00FE68  C0B9  F04C         	movff	main@yaw+1,?_printf+3
  2046  00FE6C  C0BA  F04D         	movff	main@yaw+2,?_printf+4
  2047  00FE70  ECFF  F077         	call	_printf	;wreg free
  2048                           
  2049                           ;main.c: 142: PORTDbits.RD1=1;
  2050  00FE74  8283               	bsf	3971,1,c	;volatile
  2051                           
  2052                           ;main.c: 143: _delay(50000);
  2053  00FE76  0E41               	movlw	65
  2054  00FE78  6E5F               	movwf	??_main& (0+255),c
  2055  00FE7A  0EEE               	movlw	238
  2056  00FE7C                     u3577:
  2057  00FE7C  2EE8               	decfsz	wreg,f,c
  2058  00FE7E  D7FE               	bra	u3577
  2059  00FE80  2E5F               	decfsz	??_main& (0+255),f,c
  2060  00FE82  D7FC               	bra	u3577
  2061  00FE84  D000               	nop2	
  2062                           
  2063                           ;main.c: 144: PORTDbits.RD1=0;
  2064  00FE86  9283               	bcf	3971,1,c	;volatile
  2065                           
  2066                           ;main.c: 145: _delay(50000);
  2067  00FE88  0E41               	movlw	65
  2068  00FE8A  6E5F               	movwf	??_main& (0+255),c
  2069  00FE8C  0EEE               	movlw	238
  2070  00FE8E                     u3587:
  2071  00FE8E  2EE8               	decfsz	wreg,f,c
  2072  00FE90  D7FE               	bra	u3587
  2073  00FE92  2E5F               	decfsz	??_main& (0+255),f,c
  2074  00FE94  D7FC               	bra	u3587
  2075  00FE96  D000               	nop2	
  2076                           
  2077                           ;main.c: 146: } while(1);
  2078  00FE98  D459               	goto	l161
  2079  00FE9A                     __end_of_main:
  2080                           	opt stack 0
  2081                           tblptru	equ	0xFF8
  2082                           wreg	equ	0xFE8
  2083                           
  2084 ;; *************** function _sqrt *****************
  2085 ;; Defined at:
  2086 ;;		line 9 in file "/opt/microchip/xc8/v1.44/sources/common/sprcsqrt.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;  a               3   17[BANK0 ] void 
  2089 ;; Auto vars:     Size  Location     Type
  2090 ;;  x               3   33[BANK0 ] void 
  2091 ;;  q               3   30[BANK0 ] void 
  2092 ;;  z               3   26[BANK0 ] void 
  2093 ;;  og              3   23[BANK0 ] void 
  2094 ;;  i               1   29[BANK0 ] unsigned char 
  2095 ;; Return value:  Size  Location     Type
  2096 ;;                  3   17[BANK0 ] unsigned char 
  2097 ;; Registers used:
  2098 ;;		wreg, status,2, status,0, cstack
  2099 ;; Tracked objects:
  2100 ;;		On entry : 0/0
  2101 ;;		On exit  : 0/0
  2102 ;;		Unchanged: 0/0
  2103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2104 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2105 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2106 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2107 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2108 ;;Total ram usage:       19 bytes
  2109 ;; Hardware stack levels used:    1
  2110 ;; Hardware stack levels required when called:    3
  2111 ;; This function calls:
  2112 ;;		___ftge
  2113 ;;		___ftmul
  2114 ;;		___ftsub
  2115 ;; This function is called by:
  2116 ;;		_main
  2117 ;; This function uses a non-reentrant model
  2118 ;;
  2119                           
  2120                           	psect	text1
  2121  00E050                     __ptext1:
  2122                           	opt stack 0
  2123  00E050                     _sqrt:
  2124                           	opt stack 27
  2125                           
  2126                           ;incstack = 0
  2127  00E050  0E00               	movlw	0
  2128  00E052  6E07               	movwf	___ftge@ff1,c
  2129  00E054  0E00               	movlw	0
  2130  00E056  6E08               	movwf	___ftge@ff1+1,c
  2131  00E058  0E00               	movlw	0
  2132  00E05A  6E09               	movwf	___ftge@ff1+2,c
  2133  00E05C  C071  F00A         	movff	sqrt@a,___ftge@ff2
  2134  00E060  C072  F00B         	movff	sqrt@a+1,___ftge@ff2+1
  2135  00E064  C073  F00C         	movff	sqrt@a+2,___ftge@ff2+2
  2136  00E068  EC25  F06A         	call	___ftge	;wreg free
  2137  00E06C  A0D8               	btfss	status,0,c
  2138  00E06E  D00E               	goto	l910
  2139  00E070  0100               	movlb	0	; () banked
  2140  00E072  AF73               	btfss	(sqrt@a+2)& (0+255),7,b
  2141  00E074  D004               	goto	l911
  2142                           
  2143                           ; BSR set to: 0
  2144  00E076  0E00               	movlw	0
  2145  00E078  6FE2               	movwf	(_errno+1)& (0+255),b
  2146  00E07A  0E21               	movlw	33
  2147  00E07C  6FE1               	movwf	_errno& (0+255),b
  2148  00E07E                     l911:
  2149                           
  2150                           ; BSR set to: 0
  2151  00E07E  0E00               	movlw	0
  2152  00E080  6F71               	movwf	?_sqrt& (0+255),b
  2153  00E082  0E00               	movlw	0
  2154  00E084  6F72               	movwf	(?_sqrt+1)& (0+255),b
  2155  00E086  0E00               	movlw	0
  2156  00E088  6F73               	movwf	(?_sqrt+2)& (0+255),b
  2157                           
  2158                           ; BSR set to: 0
  2159  00E08A  0012               	return	
  2160  00E08C                     l910:
  2161  00E08C  C071  F07A         	movff	sqrt@a,sqrt@z
  2162  00E090  C072  F07B         	movff	sqrt@a+1,sqrt@z+1
  2163  00E094  C073  F07C         	movff	sqrt@a+2,sqrt@z+2
  2164  00E098  C071  F074         	movff	sqrt@a,??_sqrt
  2165  00E09C  C072  F075         	movff	sqrt@a+1,??_sqrt+1
  2166  00E0A0  C073  F076         	movff	sqrt@a+2,??_sqrt+2
  2167  00E0A4  0100               	movlb	0	; () banked
  2168  00E0A6  1F74               	comf	??_sqrt& (0+255),f,b
  2169  00E0A8  1F75               	comf	(??_sqrt+1)& (0+255),f,b
  2170  00E0AA  1F76               	comf	(??_sqrt+2)& (0+255),f,b
  2171  00E0AC  2B74               	incf	??_sqrt& (0+255),f,b
  2172  00E0AE  0E00               	movlw	0
  2173  00E0B0  2375               	addwfc	(??_sqrt+1)& (0+255),f,b
  2174  00E0B2  2376               	addwfc	(??_sqrt+2)& (0+255),f,b
  2175  00E0B4  0EC8               	movlw	200
  2176  00E0B6  2574               	addwf	??_sqrt& (0+255),w,b
  2177  00E0B8  6F81               	movwf	sqrt@x& (0+255),b
  2178  00E0BA  0E6E               	movlw	110
  2179  00E0BC  2175               	addwfc	(??_sqrt+1)& (0+255),w,b
  2180  00E0BE  6F82               	movwf	(sqrt@x+1)& (0+255),b
  2181  00E0C0  0EBE               	movlw	190
  2182  00E0C2  2176               	addwfc	(??_sqrt+2)& (0+255),w,b
  2183  00E0C4  6F83               	movwf	(sqrt@x+2)& (0+255),b
  2184                           
  2185                           ; BSR set to: 0
  2186  00E0C6  90D8               	bcf	status,0,c
  2187  00E0C8  3383               	rrcf	(sqrt@x+2)& (0+255),f,b
  2188  00E0CA  3382               	rrcf	(sqrt@x+1)& (0+255),f,b
  2189  00E0CC  3381               	rrcf	sqrt@x& (0+255),f,b
  2190                           
  2191                           ; BSR set to: 0
  2192  00E0CE  0E00               	movlw	0
  2193  00E0D0  5F7A               	subwf	sqrt@z& (0+255),f,b
  2194  00E0D2  0E80               	movlw	128
  2195  00E0D4  5B7B               	subwfb	(sqrt@z+1)& (0+255),f,b
  2196  00E0D6  0E00               	movlw	0
  2197  00E0D8  5B7C               	subwfb	(sqrt@z+2)& (0+255),f,b
  2198                           
  2199                           ; BSR set to: 0
  2200  00E0DA  0E04               	movlw	4
  2201  00E0DC  6F7D               	movwf	sqrt@i& (0+255),b
  2202  00E0DE                     
  2203                           ; BSR set to: 0
  2204                           
  2205                           ; BSR set to: 0
  2206  00E0DE  C081  F077         	movff	sqrt@x,sqrt@og
  2207  00E0E2  C082  F078         	movff	sqrt@x+1,sqrt@og+1
  2208  00E0E6  C083  F079         	movff	sqrt@x+2,sqrt@og+2
  2209                           
  2210                           ; BSR set to: 0
  2211  00E0EA  C081  F019         	movff	sqrt@x,___ftmul@f1
  2212  00E0EE  C082  F01A         	movff	sqrt@x+1,___ftmul@f1+1
  2213  00E0F2  C083  F01B         	movff	sqrt@x+2,___ftmul@f1+2
  2214  00E0F6  C07A  F01C         	movff	sqrt@z,___ftmul@f2
  2215  00E0FA  C07B  F01D         	movff	sqrt@z+1,___ftmul@f2+1
  2216  00E0FE  C07C  F01E         	movff	sqrt@z+2,___ftmul@f2+2
  2217  00E102  ECBA  F06C         	call	___ftmul	;wreg free
  2218  00E106  C019  F07E         	movff	?___ftmul,sqrt@q
  2219  00E10A  C01A  F07F         	movff	?___ftmul+1,sqrt@q+1
  2220  00E10E  C01B  F080         	movff	?___ftmul+2,sqrt@q+2
  2221  00E112  C07E  F019         	movff	sqrt@q,___ftmul@f1
  2222  00E116  C07F  F01A         	movff	sqrt@q+1,___ftmul@f1+1
  2223  00E11A  C080  F01B         	movff	sqrt@q+2,___ftmul@f1+2
  2224  00E11E  C081  F01C         	movff	sqrt@x,___ftmul@f2
  2225  00E122  C082  F01D         	movff	sqrt@x+1,___ftmul@f2+1
  2226  00E126  C083  F01E         	movff	sqrt@x+2,___ftmul@f2+2
  2227  00E12A  ECBA  F06C         	call	___ftmul	;wreg free
  2228  00E12E  C019  F07E         	movff	?___ftmul,sqrt@q
  2229  00E132  C01A  F07F         	movff	?___ftmul+1,sqrt@q+1
  2230  00E136  C01B  F080         	movff	?___ftmul+2,sqrt@q+2
  2231  00E13A  C07E  F019         	movff	sqrt@q,___ftmul@f1
  2232  00E13E  C07F  F01A         	movff	sqrt@q+1,___ftmul@f1+1
  2233  00E142  C080  F01B         	movff	sqrt@q+2,___ftmul@f1+2
  2234  00E146  C081  F01C         	movff	sqrt@x,___ftmul@f2
  2235  00E14A  C082  F01D         	movff	sqrt@x+1,___ftmul@f2+1
  2236  00E14E  C083  F01E         	movff	sqrt@x+2,___ftmul@f2+2
  2237  00E152  ECBA  F06C         	call	___ftmul	;wreg free
  2238  00E156  C019  F07E         	movff	?___ftmul,sqrt@q
  2239  00E15A  C01A  F07F         	movff	?___ftmul+1,sqrt@q+1
  2240  00E15E  C01B  F080         	movff	?___ftmul+2,sqrt@q+2
  2241  00E162  C081  F019         	movff	sqrt@x,___ftmul@f1
  2242  00E166  C082  F01A         	movff	sqrt@x+1,___ftmul@f1+1
  2243  00E16A  C083  F01B         	movff	sqrt@x+2,___ftmul@f1+2
  2244  00E16E  0E00               	movlw	0
  2245  00E170  6E1C               	movwf	___ftmul@f2,c
  2246  00E172  0EC0               	movlw	192
  2247  00E174  6E1D               	movwf	___ftmul@f2+1,c
  2248  00E176  0E3F               	movlw	63
  2249  00E178  6E1E               	movwf	___ftmul@f2+2,c
  2250  00E17A  ECBA  F06C         	call	___ftmul	;wreg free
  2251  00E17E  C019  F081         	movff	?___ftmul,sqrt@x
  2252  00E182  C01A  F082         	movff	?___ftmul+1,sqrt@x+1
  2253  00E186  C01B  F083         	movff	?___ftmul+2,sqrt@x+2
  2254  00E18A  C081  F043         	movff	sqrt@x,___ftsub@f1
  2255  00E18E  C082  F044         	movff	sqrt@x+1,___ftsub@f1+1
  2256  00E192  C083  F045         	movff	sqrt@x+2,___ftsub@f1+2
  2257  00E196  C07E  F046         	movff	sqrt@q,___ftsub@f2
  2258  00E19A  C07F  F047         	movff	sqrt@q+1,___ftsub@f2+1
  2259  00E19E  C080  F048         	movff	sqrt@q+2,___ftsub@f2+2
  2260  00E1A2  ECAD  F068         	call	___ftsub	;wreg free
  2261  00E1A6  C043  F081         	movff	?___ftsub,sqrt@x
  2262  00E1AA  C044  F082         	movff	?___ftsub+1,sqrt@x+1
  2263  00E1AE  C045  F083         	movff	?___ftsub+2,sqrt@x+2
  2264  00E1B2  0100               	movlb	0	; () banked
  2265  00E1B4  2F7D               	decfsz	sqrt@i& (0+255),f,b
  2266  00E1B6  D793               	goto	l913
  2267                           
  2268                           ; BSR set to: 0
  2269                           
  2270                           ; BSR set to: 0
  2271  00E1B8  C081  F019         	movff	sqrt@x,___ftmul@f1
  2272  00E1BC  C082  F01A         	movff	sqrt@x+1,___ftmul@f1+1
  2273  00E1C0  C083  F01B         	movff	sqrt@x+2,___ftmul@f1+2
  2274  00E1C4  C071  F01C         	movff	sqrt@a,___ftmul@f2
  2275  00E1C8  C072  F01D         	movff	sqrt@a+1,___ftmul@f2+1
  2276  00E1CC  C073  F01E         	movff	sqrt@a+2,___ftmul@f2+2
  2277  00E1D0  ECBA  F06C         	call	___ftmul	;wreg free
  2278  00E1D4  C019  F071         	movff	?___ftmul,?_sqrt
  2279  00E1D8  C01A  F072         	movff	?___ftmul+1,?_sqrt+1
  2280  00E1DC  C01B  F073         	movff	?___ftmul+2,?_sqrt+2
  2281  00E1E0  0012               	return	
  2282  00E1E2                     __end_of_sqrt:
  2283                           	opt stack 0
  2284                           tblptru	equ	0xFF8
  2285                           wreg	equ	0xFE8
  2286                           status	equ	0xFD8
  2287                           
  2288 ;; *************** function _printf *****************
  2289 ;; Defined at:
  2290 ;;		line 464 in file "/opt/microchip/xc8/v1.44/sources/common/doprnt.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;  f               2   72[COMRAM] PTR const unsigned char 
  2293 ;;		 -> STR_13(10), STR_12(13), STR_11(12), STR_10(11), 
  2294 ;;		 -> STR_9(11), STR_8(12), STR_7(13), STR_6(13), 
  2295 ;;		 -> STR_5(14), STR_4(7), STR_3(7), STR_2(7), 
  2296 ;;		 -> STR_1(18), 
  2297 ;; Auto vars:     Size  Location     Type
  2298 ;;  tmpval          4   15[BANK0 ] struct .
  2299 ;;  val             4    9[BANK0 ] unsigned long 
  2300 ;;  fval            3   19[BANK0 ] unsigned long 
  2301 ;;  cp              3    0        PTR const unsigned char 
  2302 ;;  exp             2   13[BANK0 ] int 
  2303 ;;  prec            2    7[BANK0 ] int 
  2304 ;;  flag            2    5[BANK0 ] unsigned short 
  2305 ;;  ap              2    3[BANK0 ] PTR void [1]
  2306 ;;		 -> ?_printf(2), 
  2307 ;;  len             2    0        unsigned int 
  2308 ;;  width           2    0        int 
  2309 ;;  c               1   22[BANK0 ] char 
  2310 ;;  d               1    0        unsigned char 
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  2   72[COMRAM] int 
  2313 ;; Registers used:
  2314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2320 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2321 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2322 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2323 ;;      Totals:        11      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2324 ;;Total ram usage:       34 bytes
  2325 ;; Hardware stack levels used:    1
  2326 ;; Hardware stack levels required when called:    3
  2327 ;; This function calls:
  2328 ;;		___awdiv
  2329 ;;		___ftadd
  2330 ;;		___ftge
  2331 ;;		___ftmul
  2332 ;;		___ftneg
  2333 ;;		___ftsub
  2334 ;;		___fttol
  2335 ;;		___lldiv
  2336 ;;		___llmod
  2337 ;;		___lltoft
  2338 ;;		___wmul
  2339 ;;		__div_to_l_
  2340 ;;		__tdiv_to_l_
  2341 ;;		_fround
  2342 ;;		_putch
  2343 ;;		_scale
  2344 ;; This function is called by:
  2345 ;;		_main
  2346 ;; This function uses a non-reentrant model
  2347 ;;
  2348                           
  2349                           	psect	text2
  2350  00EFFE                     __ptext2:
  2351                           	opt stack 0
  2352  00EFFE                     _printf:
  2353                           	opt stack 27
  2354                           
  2355                           ;doprnt.c: 466: va_list ap;
  2356                           ;doprnt.c: 499: signed char c;
  2357                           ;doprnt.c: 501: int width;
  2358                           ;doprnt.c: 504: int prec;
  2359                           ;doprnt.c: 508: unsigned short flag;
  2360                           ;doprnt.c: 515: char d;
  2361                           ;doprnt.c: 516: double fval;
  2362                           ;doprnt.c: 517: int exp;
  2363                           ;doprnt.c: 523: union {
  2364                           ;doprnt.c: 524: unsigned long vd;
  2365                           ;doprnt.c: 525: double integ;
  2366                           ;doprnt.c: 526: } tmpval;
  2367                           ;doprnt.c: 528: unsigned long val;
  2368                           ;doprnt.c: 529: unsigned len;
  2369                           ;doprnt.c: 530: const char * cp;
  2370                           ;doprnt.c: 533: *ap = __va_start();
  2371                           
  2372                           ;incstack = 0
  2373  00EFFE  0E4B               	movlw	low (?_printf+2)
  2374  00F000  0100               	movlb	0	; () banked
  2375  00F002  6F63               	movwf	printf@ap& (0+255),b
  2376  00F004  0E00               	movlw	high (?_printf+2)
  2377  00F006  6F64               	movwf	(printf@ap+1)& (0+255),b
  2378                           
  2379                           ;doprnt.c: 536: while(c = *f++) {
  2380  00F008  D373               	goto	u3550
  2381  00F00A                     
  2382                           ; BSR set to: 0
  2383                           ;doprnt.c: 538: if(c != '%')
  2384                           
  2385                           ; BSR set to: 0
  2386  00F00A  0E25               	movlw	37
  2387  00F00C  1976               	xorwf	printf@c& (0+255),w,b
  2388  00F00E  B4D8               	btfsc	status,2,c
  2389  00F010  D004               	goto	l200
  2390                           
  2391                           ; BSR set to: 0
  2392                           ;doprnt.c: 540: {
  2393                           ;doprnt.c: 541: (putch(c) );
  2394  00F012  5176               	movf	printf@c& (0+255),w,b
  2395  00F014  ECE4  F067         	call	_putch
  2396                           
  2397                           ;doprnt.c: 542: continue;
  2398  00F018  D36B               	goto	u3550
  2399  00F01A                     l200:
  2400                           
  2401                           ;doprnt.c: 543: }
  2402                           ;doprnt.c: 548: flag = 0;
  2403  00F01A  0E00               	movlw	0
  2404  00F01C  0100               	movlb	0	; () banked
  2405  00F01E  6F66               	movwf	(printf@flag+1)& (0+255),b
  2406  00F020  0E00               	movlw	0
  2407  00F022  6F65               	movwf	printf@flag& (0+255),b
  2408                           
  2409                           ;doprnt.c: 635: switch(c = *f++) {
  2410  00F024  D002               	goto	l201
  2411  00F026                     
  2412                           ; BSR set to: 0
  2413                           ;doprnt.c: 663: flag |= 0x400;
  2414                           
  2415                           ; BSR set to: 0
  2416  00F026  8566               	bsf	(printf@flag+1)& (0+255),2,b
  2417                           
  2418                           ; BSR set to: 0
  2419                           ;doprnt.c: 698: case 'i':
  2420                           ;doprnt.c: 699: break;
  2421                           
  2422                           ; BSR set to: 0
  2423                           
  2424                           ;doprnt.c: 697: case 'd':
  2425                           
  2426                           ;doprnt.c: 664: break;
  2427  00F028  D016               	goto	l205
  2428  00F02A                     l201:
  2429                           
  2430                           ; BSR set to: 0
  2431                           
  2432                           ; BSR set to: 0
  2433  00F02A  C049  FFF6         	movff	printf@f,tblptrl
  2434  00F02E  C04A  FFF7         	movff	printf@f+1,tblptrh
  2435  00F032  4A49               	infsnz	printf@f,f,c
  2436  00F034  2A4A               	incf	printf@f+1,f,c
  2437  00F036                     	if	0	;tblptru may be non-zero
  2438  00F036                     	endif
  2439  00F036                     	if	0	;tblptru may be non-zero
  2440  00F036                     	endif
  2441  00F036  0008               	tblrd		*
  2442  00F038  CFF5 F076          	movff	tablat,printf@c
  2443  00F03C  5176               	movf	printf@c& (0+255),w,b
  2444                           
  2445                           ; Switch size 1, requested type "space"
  2446                           ; Number of cases is 4, Range of values is 0 to 105
  2447                           ; switch strategies available:
  2448                           ; Name         Instructions Cycles
  2449                           ; simple_byte           13     7 (average)
  2450                           ;	Chosen strategy is simple_byte
  2451  00F03E  0A00               	xorlw	0	; case 0
  2452  00F040  B4D8               	btfsc	status,2,c
  2453  00F042  0012               	return	
  2454  00F044  0A64               	xorlw	100	; case 100
  2455  00F046  B4D8               	btfsc	status,2,c
  2456  00F048  D006               	goto	l205
  2457  00F04A  0A02               	xorlw	2	; case 102
  2458  00F04C  B4D8               	btfsc	status,2,c
  2459  00F04E  D7EB               	goto	l204
  2460  00F050  0A0F               	xorlw	15	; case 105
  2461  00F052  A4D8               	btfss	status,2,c
  2462  00F054  D34D               	goto	u3550
  2463  00F056                     l205:
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;doprnt.c: 825: if(flag & (0x700)) {
  2467                           
  2468                           ; BSR set to: 0
  2469  00F056  0E07               	movlw	7
  2470  00F058  1566               	andwf	(printf@flag+1)& (0+255),w,b
  2471  00F05A  B4D8               	btfsc	status,2,c
  2472  00F05C  D2B2               	goto	l209
  2473                           
  2474                           ; BSR set to: 0
  2475                           ;doprnt.c: 829: prec = 6;
  2476  00F05E  0E00               	movlw	0
  2477  00F060  6F68               	movwf	(printf@prec+1)& (0+255),b
  2478  00F062  0E06               	movlw	6
  2479  00F064  6F67               	movwf	printf@prec& (0+255),b
  2480                           
  2481                           ; BSR set to: 0
  2482                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2483  00F066  C063  FFD9         	movff	printf@ap,fsr2l
  2484  00F06A  C064  FFDA         	movff	printf@ap+1,fsr2h
  2485  00F06E  CFDE F073          	movff	postinc2,printf@fval
  2486  00F072  CFDE F074          	movff	postinc2,printf@fval+1
  2487  00F076  CFDD F075          	movff	postdec2,printf@fval+2
  2488                           
  2489                           ; BSR set to: 0
  2490  00F07A  0E03               	movlw	3
  2491  00F07C  2763               	addwf	printf@ap& (0+255),f,b
  2492  00F07E  0E00               	movlw	0
  2493  00F080  2364               	addwfc	(printf@ap+1)& (0+255),f,b
  2494                           
  2495                           ; BSR set to: 0
  2496                           ;doprnt.c: 831: if(fval < 0.0) {
  2497  00F082  AF75               	btfss	(printf@fval+2)& (0+255),7,b
  2498  00F084  D011               	goto	l210
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;doprnt.c: 832: fval = -fval;
  2502  00F086  C073  F001         	movff	printf@fval,___ftneg@f1
  2503  00F08A  C074  F002         	movff	printf@fval+1,___ftneg@f1+1
  2504  00F08E  C075  F003         	movff	printf@fval+2,___ftneg@f1+2
  2505  00F092  EC1D  F068         	call	___ftneg	;wreg free
  2506  00F096  C001  F073         	movff	?___ftneg,printf@fval
  2507  00F09A  C002  F074         	movff	?___ftneg+1,printf@fval+1
  2508  00F09E  C003  F075         	movff	?___ftneg+2,printf@fval+2
  2509                           
  2510                           ;doprnt.c: 833: flag |= 0x03;
  2511  00F0A2  0E03               	movlw	3
  2512  00F0A4  0100               	movlb	0	; () banked
  2513  00F0A6  1365               	iorwf	printf@flag& (0+255),f,b
  2514  00F0A8                     l210:
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;doprnt.c: 834: }
  2518                           ;doprnt.c: 835: exp = 0;
  2519                           
  2520                           ; BSR set to: 0
  2521  00F0A8  0E00               	movlw	0
  2522  00F0AA  6F6E               	movwf	(printf@exp+1)& (0+255),b
  2523  00F0AC  0E00               	movlw	0
  2524  00F0AE  6F6D               	movwf	printf@exp& (0+255),b
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;doprnt.c: 836: if( fval!=0) {
  2528  00F0B0  5173               	movf	printf@fval& (0+255),w,b
  2529  00F0B2  1174               	iorwf	(printf@fval+1)& (0+255),w,b
  2530  00F0B4  1175               	iorwf	(printf@fval+2)& (0+255),w,b
  2531  00F0B6  B4D8               	btfsc	status,2,c
  2532  00F0B8  D086               	goto	l215
  2533                           
  2534                           ; BSR set to: 0
  2535                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2536  00F0BA  0E82               	movlw	130
  2537  00F0BC  6E4E               	movwf	??_printf& (0+255),c
  2538  00F0BE  0EFF               	movlw	255
  2539  00F0C0  6E4F               	movwf	(??_printf+1)& (0+255),c
  2540  00F0C2  C073  F050         	movff	printf@fval,??_printf+2
  2541  00F0C6  C074  F051         	movff	printf@fval+1,??_printf+3
  2542  00F0CA  C075  F052         	movff	printf@fval+2,??_printf+4
  2543  00F0CE  C076  F053         	movff	printf@fval+3,??_printf+5
  2544  00F0D2  0E10               	movlw	16
  2545  00F0D4  D005               	goto	u3300
  2546  00F0D6                     u3305:
  2547  00F0D6  90D8               	bcf	status,0,c
  2548  00F0D8  3253               	rrcf	??_printf+5,f,c
  2549  00F0DA  3252               	rrcf	??_printf+4,f,c
  2550  00F0DC  3251               	rrcf	??_printf+3,f,c
  2551  00F0DE  3250               	rrcf	??_printf+2,f,c
  2552  00F0E0                     u3300:
  2553  00F0E0  2EE8               	decfsz	wreg,f,c
  2554  00F0E2  D7F9               	goto	u3305
  2555  00F0E4  5050               	movf	??_printf+2,w,c
  2556  00F0E6  244E               	addwf	??_printf,w,c
  2557  00F0E8  6F6D               	movwf	printf@exp& (0+255),b
  2558  00F0EA  0E00               	movlw	0
  2559  00F0EC  204F               	addwfc	??_printf+1,w,c
  2560  00F0EE  6F6E               	movwf	(printf@exp+1)& (0+255),b
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;doprnt.c: 838: exp--;
  2564  00F0F0  076D               	decf	printf@exp& (0+255),f,b
  2565  00F0F2  A0D8               	btfss	status,0,c
  2566  00F0F4  076E               	decf	(printf@exp+1)& (0+255),f,b
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;doprnt.c: 839: exp *= 3;
  2570  00F0F6  C06D  F00F         	movff	printf@exp,___wmul@multiplier
  2571  00F0FA  C06E  F010         	movff	printf@exp+1,___wmul@multiplier+1
  2572  00F0FE  0E00               	movlw	0
  2573  00F100  6E12               	movwf	___wmul@multiplicand+1,c
  2574  00F102  0E03               	movlw	3
  2575  00F104  6E11               	movwf	___wmul@multiplicand,c
  2576  00F106  EC2F  F068         	call	___wmul	;wreg free
  2577  00F10A  C00F  F06D         	movff	?___wmul,printf@exp
  2578  00F10E  C010  F06E         	movff	?___wmul+1,printf@exp+1
  2579                           
  2580                           ;doprnt.c: 840: exp /= 10;
  2581  00F112  C06D  F007         	movff	printf@exp,___awdiv@dividend
  2582  00F116  C06E  F008         	movff	printf@exp+1,___awdiv@dividend+1
  2583  00F11A  0E00               	movlw	0
  2584  00F11C  6E0A               	movwf	___awdiv@divisor+1,c
  2585  00F11E  0E0A               	movlw	10
  2586  00F120  6E09               	movwf	___awdiv@divisor,c
  2587  00F122  ECE3  F069         	call	___awdiv	;wreg free
  2588  00F126  C007  F06D         	movff	?___awdiv,printf@exp
  2589  00F12A  C008  F06E         	movff	?___awdiv+1,printf@exp+1
  2590                           
  2591                           ;doprnt.c: 841: if(exp < 0)
  2592  00F12E  0100               	movlb	0	; () banked
  2593  00F130  AF6E               	btfss	(printf@exp+1)& (0+255),7,b
  2594  00F132  D003               	goto	l212
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;doprnt.c: 842: exp--;
  2598  00F134  076D               	decf	printf@exp& (0+255),f,b
  2599  00F136  A0D8               	btfss	status,0,c
  2600  00F138  076E               	decf	(printf@exp+1)& (0+255),f,b
  2601  00F13A                     l212:
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2605                           
  2606                           ; BSR set to: 0
  2607  00F13A  516D               	movf	printf@exp& (0+255),w,b
  2608  00F13C  0800               	sublw	0
  2609  00F13E  ECFB  F075         	call	_scale
  2610  00F142  C028  F06F         	movff	?_scale,printf@tmpval
  2611  00F146  C029  F070         	movff	?_scale+1,printf@tmpval+1
  2612  00F14A  C02A  F071         	movff	?_scale+2,printf@tmpval+2
  2613                           
  2614                           ;doprnt.c: 847: tmpval.integ *= fval;
  2615  00F14E  C06F  F019         	movff	printf@tmpval,___ftmul@f1
  2616  00F152  C070  F01A         	movff	printf@tmpval+1,___ftmul@f1+1
  2617  00F156  C071  F01B         	movff	printf@tmpval+2,___ftmul@f1+2
  2618  00F15A  C073  F01C         	movff	printf@fval,___ftmul@f2
  2619  00F15E  C074  F01D         	movff	printf@fval+1,___ftmul@f2+1
  2620  00F162  C075  F01E         	movff	printf@fval+2,___ftmul@f2+2
  2621  00F166  ECBA  F06C         	call	___ftmul	;wreg free
  2622  00F16A  C019  F06F         	movff	?___ftmul,printf@tmpval
  2623  00F16E  C01A  F070         	movff	?___ftmul+1,printf@tmpval+1
  2624  00F172  C01B  F071         	movff	?___ftmul+2,printf@tmpval+2
  2625                           
  2626                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2627  00F176  C06F  F007         	movff	printf@tmpval,___ftge@ff1
  2628  00F17A  C070  F008         	movff	printf@tmpval+1,___ftge@ff1+1
  2629  00F17E  C071  F009         	movff	printf@tmpval+2,___ftge@ff1+2
  2630  00F182  0E00               	movlw	0
  2631  00F184  6E0A               	movwf	___ftge@ff2,c
  2632  00F186  0E80               	movlw	128
  2633  00F188  6E0B               	movwf	___ftge@ff2+1,c
  2634  00F18A  0E3F               	movlw	63
  2635  00F18C  6E0C               	movwf	___ftge@ff2+2,c
  2636  00F18E  EC25  F06A         	call	___ftge	;wreg free
  2637  00F192  B0D8               	btfsc	status,0,c
  2638  00F194  D005               	goto	l213
  2639                           
  2640                           ;doprnt.c: 849: exp--;
  2641  00F196  0100               	movlb	0	; () banked
  2642  00F198  076D               	decf	printf@exp& (0+255),f,b
  2643  00F19A  A0D8               	btfss	status,0,c
  2644  00F19C  076E               	decf	(printf@exp+1)& (0+255),f,b
  2645  00F19E  D013               	goto	l215
  2646  00F1A0                     l213:
  2647                           
  2648                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2649                           
  2650                           ; BSR set to: 0
  2651  00F1A0  C06F  F007         	movff	printf@tmpval,___ftge@ff1
  2652  00F1A4  C070  F008         	movff	printf@tmpval+1,___ftge@ff1+1
  2653  00F1A8  C071  F009         	movff	printf@tmpval+2,___ftge@ff1+2
  2654  00F1AC  0E00               	movlw	0
  2655  00F1AE  6E0A               	movwf	___ftge@ff2,c
  2656  00F1B0  0E20               	movlw	32
  2657  00F1B2  6E0B               	movwf	___ftge@ff2+1,c
  2658  00F1B4  0E41               	movlw	65
  2659  00F1B6  6E0C               	movwf	___ftge@ff2+2,c
  2660  00F1B8  EC25  F06A         	call	___ftge	;wreg free
  2661  00F1BC  A0D8               	btfss	status,0,c
  2662  00F1BE  D003               	goto	l215
  2663                           
  2664                           ;doprnt.c: 851: exp++;
  2665  00F1C0  0100               	movlb	0	; () banked
  2666  00F1C2  4B6D               	infsnz	printf@exp& (0+255),f,b
  2667  00F1C4  2B6E               	incf	(printf@exp+1)& (0+255),f,b
  2668  00F1C6                     l215:
  2669                           
  2670                           ;doprnt.c: 852: }
  2671                           ;doprnt.c: 1112: if(prec <= 12)
  2672                           
  2673                           ; BSR set to: 0
  2674                           
  2675                           ; BSR set to: 0
  2676                           
  2677                           ; BSR set to: 0
  2678  00F1C6  0100               	movlb	0	; () banked
  2679  00F1C8  BF68               	btfsc	(printf@prec+1)& (0+255),7,b
  2680  00F1CA  D006               	goto	u3340
  2681  00F1CC  5168               	movf	(printf@prec+1)& (0+255),w,b
  2682  00F1CE  E11B               	bnz	l3431
  2683  00F1D0  0E0D               	movlw	13
  2684  00F1D2  5D67               	subwf	printf@prec& (0+255),w,b
  2685  00F1D4  B0D8               	btfsc	status,0,c
  2686  00F1D6  D017               	goto	l216
  2687  00F1D8                     u3340:
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;doprnt.c: 1113: fval += fround(prec);
  2691  00F1D8  C073  F037         	movff	printf@fval,___ftadd@f1
  2692  00F1DC  C074  F038         	movff	printf@fval+1,___ftadd@f1+1
  2693  00F1E0  C075  F039         	movff	printf@fval+2,___ftadd@f1+2
  2694  00F1E4  5167               	movf	printf@prec& (0+255),w,b
  2695  00F1E6  EC9D  F073         	call	_fround
  2696  00F1EA  C028  F03A         	movff	?_fround,___ftadd@f2
  2697  00F1EE  C029  F03B         	movff	?_fround+1,___ftadd@f2+1
  2698  00F1F2  C02A  F03C         	movff	?_fround+2,___ftadd@f2+2
  2699  00F1F6  ECF1  F070         	call	___ftadd	;wreg free
  2700  00F1FA  C037  F073         	movff	?___ftadd,printf@fval
  2701  00F1FE  C038  F074         	movff	?___ftadd+1,printf@fval+1
  2702  00F202  C039  F075         	movff	?___ftadd+2,printf@fval+2
  2703  00F206                     l216:
  2704  00F206                     l3431:
  2705                           
  2706                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2707  00F206  0100               	movlb	0	; () banked
  2708  00F208  BF6E               	btfsc	(printf@exp+1)& (0+255),7,b
  2709  00F20A  D006               	goto	u3350
  2710  00F20C  516E               	movf	(printf@exp+1)& (0+255),w,b
  2711  00F20E  E120               	bnz	l3439
  2712  00F210  0E0A               	movlw	10
  2713  00F212  5D6D               	subwf	printf@exp& (0+255),w,b
  2714  00F214  B0D8               	btfsc	status,0,c
  2715  00F216  D01C               	goto	u3380
  2716  00F218                     u3350:
  2717                           
  2718                           ; BSR set to: 0
  2719  00F218  5173               	movf	printf@fval& (0+255),w,b
  2720  00F21A  1174               	iorwf	(printf@fval+1)& (0+255),w,b
  2721  00F21C  1175               	iorwf	(printf@fval+2)& (0+255),w,b
  2722  00F21E  B4D8               	btfsc	status,2,c
  2723  00F220  D056               	goto	l217
  2724                           
  2725                           ; BSR set to: 0
  2726  00F222  C073  F02F         	movff	printf@fval,___fttol@f1
  2727  00F226  C074  F030         	movff	printf@fval+1,___fttol@f1+1
  2728  00F22A  C075  F031         	movff	printf@fval+2,___fttol@f1+2
  2729  00F22E  EC34  F06D         	call	___fttol	;wreg free
  2730  00F232  502F               	movf	?___fttol,w,c
  2731  00F234  1030               	iorwf	?___fttol+1,w,c
  2732  00F236  1031               	iorwf	?___fttol+2,w,c
  2733  00F238  1032               	iorwf	?___fttol+3,w,c
  2734  00F23A  A4D8               	btfss	status,2,c
  2735  00F23C  D048               	goto	l217
  2736  00F23E  0100               	movlb	0	; () banked
  2737  00F240  BF6E               	btfsc	(printf@exp+1)& (0+255),7,b
  2738  00F242  D045               	goto	l217
  2739  00F244  516E               	movf	(printf@exp+1)& (0+255),w,b
  2740  00F246  E104               	bnz	l3439
  2741  00F248  0E02               	movlw	2
  2742  00F24A  5D6D               	subwf	printf@exp& (0+255),w,b
  2743  00F24C  A0D8               	btfss	status,0,c
  2744  00F24E  D03F               	goto	l217
  2745  00F250                     u3380:
  2746  00F250                     l3439:
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2750  00F250  C06F  F007         	movff	printf@tmpval,___ftge@ff1
  2751  00F254  C070  F008         	movff	printf@tmpval+1,___ftge@ff1+1
  2752  00F258  C071  F009         	movff	printf@tmpval+2,___ftge@ff1+2
  2753  00F25C  0E70               	movlw	112
  2754  00F25E  6E0A               	movwf	___ftge@ff2,c
  2755  00F260  0E89               	movlw	137
  2756  00F262  6E0B               	movwf	___ftge@ff2+1,c
  2757  00F264  0E40               	movlw	64
  2758  00F266  6E0C               	movwf	___ftge@ff2+2,c
  2759  00F268  EC25  F06A         	call	___ftge	;wreg free
  2760  00F26C  B0D8               	btfsc	status,0,c
  2761  00F26E  D003               	goto	l220
  2762                           
  2763                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2764  00F270  0100               	movlb	0	; () banked
  2765  00F272  0EF7               	movlw	247
  2766  00F274  D002               	goto	L1
  2767  00F276                     l220:
  2768                           
  2769                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2770                           
  2771                           ; BSR set to: 0
  2772  00F276  0100               	movlb	0	; () banked
  2773  00F278  0EF8               	movlw	248
  2774  00F27A                     L1:
  2775  00F27A  276D               	addwf	printf@exp& (0+255),f,b
  2776  00F27C  0EFF               	movlw	255
  2777  00F27E  236E               	addwfc	(printf@exp+1)& (0+255),f,b
  2778                           
  2779                           ; BSR set to: 0
  2780                           ;doprnt.c: 1124: }
  2781                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2782                           
  2783                           ; BSR set to: 0
  2784  00F280  516D               	movf	printf@exp& (0+255),w,b
  2785  00F282  ECFB  F075         	call	_scale
  2786  00F286  C028  F06F         	movff	?_scale,printf@tmpval
  2787  00F28A  C029  F070         	movff	?_scale+1,printf@tmpval+1
  2788  00F28E  C02A  F071         	movff	?_scale+2,printf@tmpval+2
  2789                           
  2790                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2791  00F292  C073  F001         	movff	printf@fval,__tdiv_to_l_@f1
  2792  00F296  C074  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  2793  00F29A  C075  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  2794  00F29E  C06F  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  2795  00F2A2  C070  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  2796  00F2A6  C071  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  2797  00F2AA  ECD1  F06E         	call	__tdiv_to_l_	;wreg free
  2798  00F2AE  C001  F069         	movff	?__tdiv_to_l_,printf@val
  2799  00F2B2  C002  F06A         	movff	?__tdiv_to_l_+1,printf@val+1
  2800  00F2B6  C003  F06B         	movff	?__tdiv_to_l_+2,printf@val+2
  2801  00F2BA  C004  F06C         	movff	?__tdiv_to_l_+3,printf@val+3
  2802                           
  2803                           ;doprnt.c: 1129: fval = 0.0;
  2804  00F2BE  0E00               	movlw	0
  2805  00F2C0  0100               	movlb	0	; () banked
  2806  00F2C2  6F73               	movwf	printf@fval& (0+255),b
  2807  00F2C4  0E00               	movlw	0
  2808  00F2C6  6F74               	movwf	(printf@fval+1)& (0+255),b
  2809  00F2C8  0E00               	movlw	0
  2810  00F2CA  6F75               	movwf	(printf@fval+2)& (0+255),b
  2811                           
  2812                           ;doprnt.c: 1130: } else {
  2813  00F2CC  D033               	goto	l226
  2814  00F2CE                     l217:
  2815                           
  2816                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2817                           
  2818                           ; BSR set to: 0
  2819  00F2CE  C073  F02F         	movff	printf@fval,___fttol@f1
  2820  00F2D2  C074  F030         	movff	printf@fval+1,___fttol@f1+1
  2821  00F2D6  C075  F031         	movff	printf@fval+2,___fttol@f1+2
  2822  00F2DA  EC34  F06D         	call	___fttol	;wreg free
  2823  00F2DE  C02F  F069         	movff	?___fttol,printf@val
  2824  00F2E2  C030  F06A         	movff	?___fttol+1,printf@val+1
  2825  00F2E6  C031  F06B         	movff	?___fttol+2,printf@val+2
  2826  00F2EA  C032  F06C         	movff	?___fttol+3,printf@val+3
  2827                           
  2828                           ;doprnt.c: 1132: fval -= (double)val;
  2829  00F2EE  C073  F043         	movff	printf@fval,___ftsub@f1
  2830  00F2F2  C074  F044         	movff	printf@fval+1,___ftsub@f1+1
  2831  00F2F6  C075  F045         	movff	printf@fval+2,___ftsub@f1+2
  2832  00F2FA  C069  F009         	movff	printf@val,___lltoft@c
  2833  00F2FE  C06A  F00A         	movff	printf@val+1,___lltoft@c+1
  2834  00F302  C06B  F00B         	movff	printf@val+2,___lltoft@c+2
  2835  00F306  C06C  F00C         	movff	printf@val+3,___lltoft@c+3
  2836  00F30A  ECCD  F068         	call	___lltoft	;wreg free
  2837  00F30E  C009  F046         	movff	?___lltoft,___ftsub@f2
  2838  00F312  C00A  F047         	movff	?___lltoft+1,___ftsub@f2+1
  2839  00F316  C00B  F048         	movff	?___lltoft+2,___ftsub@f2+2
  2840  00F31A  ECAD  F068         	call	___ftsub	;wreg free
  2841  00F31E  C043  F073         	movff	?___ftsub,printf@fval
  2842  00F322  C044  F074         	movff	?___ftsub+1,printf@fval+1
  2843  00F326  C045  F075         	movff	?___ftsub+2,printf@fval+2
  2844                           
  2845                           ;doprnt.c: 1133: exp = 0;
  2846  00F32A  0E00               	movlw	0
  2847  00F32C  0100               	movlb	0	; () banked
  2848  00F32E  6F6E               	movwf	(printf@exp+1)& (0+255),b
  2849  00F330  0E00               	movlw	0
  2850  00F332  6F6D               	movwf	printf@exp& (0+255),b
  2851  00F334                     l226:
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;doprnt.c: 1134: }
  2855                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2856                           
  2857                           ; BSR set to: 0
  2858  00F334  0E01               	movlw	1
  2859  00F336  6F76               	movwf	printf@c& (0+255),b
  2860  00F338                     l3459:
  2861                           
  2862                           ; BSR set to: 0
  2863  00F338  0E0A               	movlw	10
  2864  00F33A  1976               	xorwf	printf@c& (0+255),w,b
  2865  00F33C  B4D8               	btfsc	status,2,c
  2866  00F33E  D018               	goto	u3420
  2867                           
  2868                           ; BSR set to: 0
  2869                           ;doprnt.c: 1137: if(val < dpowers[c])
  2870                           
  2871                           ; BSR set to: 0
  2872                           
  2873                           ; BSR set to: 0
  2874  00F340  5176               	movf	printf@c& (0+255),w,b
  2875  00F342  0D04               	mullw	4
  2876  00F344  0E9B               	movlw	low _dpowers
  2877  00F346  24F3               	addwf	prodl,w,c
  2878  00F348  6EF6               	movwf	tblptrl,c
  2879  00F34A  0EFE               	movlw	high _dpowers
  2880  00F34C  20F4               	addwfc	prodh,w,c
  2881  00F34E  6EF7               	movwf	tblptrh,c
  2882  00F350                     	if	0	;There are less than 3 active tblptr bytes
  2883  00F350                     	endif
  2884  00F350  0009               	tblrd		*+
  2885  00F352  50F5               	movf	tablat,w,c
  2886  00F354  5D69               	subwf	printf@val& (0+255),w,b
  2887  00F356  0009               	tblrd		*+
  2888  00F358  50F5               	movf	tablat,w,c
  2889  00F35A  596A               	subwfb	(printf@val+1)& (0+255),w,b
  2890  00F35C  0009               	tblrd		*+
  2891  00F35E  50F5               	movf	tablat,w,c
  2892  00F360  596B               	subwfb	(printf@val+2)& (0+255),w,b
  2893  00F362  0009               	tblrd		*+
  2894  00F364  50F5               	movf	tablat,w,c
  2895  00F366  596C               	subwfb	(printf@val+3)& (0+255),w,b
  2896  00F368  A0D8               	btfss	status,0,c
  2897  00F36A  D002               	goto	u3420
  2898                           
  2899                           ; BSR set to: 0
  2900                           
  2901                           ; BSR set to: 0
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;doprnt.c: 1138: break;
  2905  00F36C  2B76               	incf	printf@c& (0+255),f,b
  2906  00F36E  D7E4               	goto	l3459
  2907  00F370                     u3420:
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;doprnt.c: 1175: {
  2911                           ;doprnt.c: 1188: if(flag & 0x03)
  2912                           
  2913                           ; BSR set to: 0
  2914  00F370  0E03               	movlw	3
  2915  00F372  1565               	andwf	printf@flag& (0+255),w,b
  2916  00F374  6E4E               	movwf	??_printf& (0+255),c
  2917  00F376  0E00               	movlw	0
  2918  00F378  1566               	andwf	(printf@flag+1)& (0+255),w,b
  2919  00F37A  6E4F               	movwf	(??_printf+1)& (0+255),c
  2920  00F37C  504E               	movf	??_printf,w,c
  2921  00F37E  104F               	iorwf	??_printf+1,w,c
  2922  00F380  B4D8               	btfsc	status,2,c
  2923  00F382  D04A               	goto	l231
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;doprnt.c: 1190: (putch('-') );
  2927  00F384  0E2D               	movlw	45
  2928  00F386  ECE4  F067         	call	_putch
  2929                           
  2930                           ;doprnt.c: 1195: }
  2931                           ;doprnt.c: 1196: while(c--) {
  2932  00F38A  D046               	goto	l231
  2933  00F38C                     
  2934                           ;doprnt.c: 1200: {
  2935                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2936  00F38C  C069  F001         	movff	printf@val,___lldiv@dividend
  2937  00F390  C06A  F002         	movff	printf@val+1,___lldiv@dividend+1
  2938  00F394  C06B  F003         	movff	printf@val+2,___lldiv@dividend+2
  2939  00F398  C06C  F004         	movff	printf@val+3,___lldiv@dividend+3
  2940  00F39C  0100               	movlb	0	; () banked
  2941  00F39E  5176               	movf	printf@c& (0+255),w,b
  2942  00F3A0  0D04               	mullw	4
  2943  00F3A2  0E9B               	movlw	low _dpowers
  2944  00F3A4  24F3               	addwf	prodl,w,c
  2945  00F3A6  6EF6               	movwf	tblptrl,c
  2946  00F3A8  0EFE               	movlw	high _dpowers
  2947  00F3AA  20F4               	addwfc	prodh,w,c
  2948  00F3AC  6EF7               	movwf	tblptrh,c
  2949  00F3AE                     	if	0	;There are less than 3 active tblptr bytes
  2950  00F3AE                     	endif
  2951  00F3AE  0009               	tblrd		*+
  2952  00F3B0  CFF5 F005          	movff	tablat,___lldiv@divisor
  2953  00F3B4  0009               	tblrd		*+
  2954  00F3B6  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2955  00F3BA  0009               	tblrd		*+
  2956  00F3BC  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2957  00F3C0  000A               	tblrd		*-
  2958  00F3C2  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2959  00F3C6  ECA2  F069         	call	___lldiv	;wreg free
  2960  00F3CA  C001  F06F         	movff	?___lldiv,printf@tmpval
  2961  00F3CE  C002  F070         	movff	?___lldiv+1,printf@tmpval+1
  2962  00F3D2  C003  F071         	movff	?___lldiv+2,printf@tmpval+2
  2963  00F3D6  C004  F072         	movff	?___lldiv+3,printf@tmpval+3
  2964                           
  2965                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2966  00F3DA  C06F  F00E         	movff	printf@tmpval,___llmod@dividend
  2967  00F3DE  C070  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  2968  00F3E2  C071  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  2969  00F3E6  C072  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  2970  00F3EA  0E0A               	movlw	10
  2971  00F3EC  6E12               	movwf	___llmod@divisor,c
  2972  00F3EE  0E00               	movlw	0
  2973  00F3F0  6E13               	movwf	___llmod@divisor+1,c
  2974  00F3F2  0E00               	movlw	0
  2975  00F3F4  6E14               	movwf	___llmod@divisor+2,c
  2976  00F3F6  0E00               	movlw	0
  2977  00F3F8  6E15               	movwf	___llmod@divisor+3,c
  2978  00F3FA  ECFB  F068         	call	___llmod	;wreg free
  2979  00F3FE  C00E  F06F         	movff	?___llmod,printf@tmpval
  2980  00F402  C00F  F070         	movff	?___llmod+1,printf@tmpval+1
  2981  00F406  C010  F071         	movff	?___llmod+2,printf@tmpval+2
  2982  00F40A  C011  F072         	movff	?___llmod+3,printf@tmpval+3
  2983                           
  2984                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  2985  00F40E  0100               	movlb	0	; () banked
  2986  00F410  516F               	movf	printf@tmpval& (0+255),w,b
  2987  00F412  0F30               	addlw	48
  2988  00F414  ECE4  F067         	call	_putch
  2989  00F418                     l231:
  2990  00F418  0100               	movlb	0	; () banked
  2991  00F41A  0776               	decf	printf@c& (0+255),f,b
  2992  00F41C  2976               	incf	printf@c& (0+255),w,b
  2993  00F41E  B4D8               	btfsc	status,2,c
  2994  00F420  D008               	goto	l234
  2995  00F422  D7B4               	goto	l232
  2996  00F424                     l3483:
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;doprnt.c: 1208: (putch('0') );
  3000  00F424  0E30               	movlw	48
  3001  00F426  ECE4  F067         	call	_putch
  3002                           
  3003                           ;doprnt.c: 1209: exp--;
  3004  00F42A  0100               	movlb	0	; () banked
  3005  00F42C  076D               	decf	printf@exp& (0+255),f,b
  3006  00F42E  A0D8               	btfss	status,0,c
  3007  00F430  076E               	decf	(printf@exp+1)& (0+255),f,b
  3008  00F432                     l234:
  3009                           
  3010                           ; BSR set to: 0
  3011                           
  3012                           ; BSR set to: 0
  3013  00F432  BF6E               	btfsc	(printf@exp+1)& (0+255),7,b
  3014  00F434  D005               	goto	u3450
  3015  00F436  516E               	movf	(printf@exp+1)& (0+255),w,b
  3016  00F438  E1F5               	bnz	l3483
  3017  00F43A  056D               	decf	printf@exp& (0+255),w,b
  3018  00F43C  B0D8               	btfsc	status,0,c
  3019  00F43E  D7F2               	goto	l235
  3020  00F440                     u3450:
  3021                           
  3022                           ; BSR set to: 0
  3023                           ;doprnt.c: 1210: }
  3024                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3025                           
  3026                           ; BSR set to: 0
  3027  00F440  BF68               	btfsc	(printf@prec+1)& (0+255),7,b
  3028  00F442  D009               	goto	l237
  3029  00F444  5168               	movf	(printf@prec+1)& (0+255),w,b
  3030  00F446  E104               	bnz	u3460
  3031  00F448  0E09               	movlw	9
  3032  00F44A  5D67               	subwf	printf@prec& (0+255),w,b
  3033  00F44C  A0D8               	btfss	status,0,c
  3034  00F44E  D003               	goto	l237
  3035  00F450                     u3460:
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3039  00F450  0E08               	movlw	8
  3040  00F452  6F76               	movwf	printf@c& (0+255),b
  3041  00F454  D002               	goto	l238
  3042  00F456                     l237:
  3043                           
  3044                           ; BSR set to: 0
  3045                           ;doprnt.c: 1213: else
  3046                           ;doprnt.c: 1214: c = prec;
  3047  00F456  C067  F076         	movff	printf@prec,printf@c
  3048  00F45A                     l238:
  3049                           
  3050                           ; BSR set to: 0
  3051                           ;doprnt.c: 1215: prec -= c;
  3052                           
  3053                           ; BSR set to: 0
  3054  00F45A  5176               	movf	printf@c& (0+255),w,b
  3055  00F45C  5F67               	subwf	printf@prec& (0+255),f,b
  3056  00F45E  0E00               	movlw	0
  3057  00F460  BF76               	btfsc	printf@c& (0+255),7,b
  3058  00F462  0EFF               	movlw	255
  3059  00F464  5B68               	subwfb	(printf@prec+1)& (0+255),f,b
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;doprnt.c: 1219: if(c)
  3063  00F466  5176               	movf	printf@c& (0+255),w,b
  3064  00F468  B4D8               	btfsc	status,2,c
  3065  00F46A  D003               	goto	l239
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;doprnt.c: 1221: (putch('.') );
  3069  00F46C  0E2E               	movlw	46
  3070  00F46E  ECE4  F067         	call	_putch
  3071  00F472                     l239:
  3072                           
  3073                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3074  00F472  0100               	movlb	0	; () banked
  3075  00F474  5176               	movf	printf@c& (0+255),w,b
  3076  00F476  ECFB  F075         	call	_scale
  3077  00F47A  C028  F060         	movff	?_scale,_printf$1341
  3078  00F47E  C029  F061         	movff	?_scale+1,_printf$1341+1
  3079  00F482  C02A  F062         	movff	?_scale+2,_printf$1341+2
  3080                           
  3081                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3082  00F486  C073  F01C         	movff	printf@fval,___ftmul@f2
  3083  00F48A  C074  F01D         	movff	printf@fval+1,___ftmul@f2+1
  3084  00F48E  C075  F01E         	movff	printf@fval+2,___ftmul@f2+2
  3085  00F492  C060  F019         	movff	_printf$1341,___ftmul@f1
  3086  00F496  C061  F01A         	movff	_printf$1341+1,___ftmul@f1+1
  3087  00F49A  C062  F01B         	movff	_printf$1341+2,___ftmul@f1+2
  3088  00F49E  ECBA  F06C         	call	___ftmul	;wreg free
  3089  00F4A2  C019  F02F         	movff	?___ftmul,___fttol@f1
  3090  00F4A6  C01A  F030         	movff	?___ftmul+1,___fttol@f1+1
  3091  00F4AA  C01B  F031         	movff	?___ftmul+2,___fttol@f1+2
  3092  00F4AE  EC34  F06D         	call	___fttol	;wreg free
  3093  00F4B2  C02F  F069         	movff	?___fttol,printf@val
  3094  00F4B6  C030  F06A         	movff	?___fttol+1,printf@val+1
  3095  00F4BA  C031  F06B         	movff	?___fttol+2,printf@val+2
  3096  00F4BE  C032  F06C         	movff	?___fttol+3,printf@val+3
  3097                           
  3098                           ;doprnt.c: 1228: while(c--) {
  3099  00F4C2  D06D               	goto	l240
  3100  00F4C4                     
  3101                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3102  00F4C4  C069  F001         	movff	printf@val,___lldiv@dividend
  3103  00F4C8  C06A  F002         	movff	printf@val+1,___lldiv@dividend+1
  3104  00F4CC  C06B  F003         	movff	printf@val+2,___lldiv@dividend+2
  3105  00F4D0  C06C  F004         	movff	printf@val+3,___lldiv@dividend+3
  3106  00F4D4  0100               	movlb	0	; () banked
  3107  00F4D6  5176               	movf	printf@c& (0+255),w,b
  3108  00F4D8  0D04               	mullw	4
  3109  00F4DA  0E9B               	movlw	low _dpowers
  3110  00F4DC  24F3               	addwf	prodl,w,c
  3111  00F4DE  6EF6               	movwf	tblptrl,c
  3112  00F4E0  0EFE               	movlw	high _dpowers
  3113  00F4E2  20F4               	addwfc	prodh,w,c
  3114  00F4E4  6EF7               	movwf	tblptrh,c
  3115  00F4E6                     	if	0	;There are less than 3 active tblptr bytes
  3116  00F4E6                     	endif
  3117  00F4E6  0009               	tblrd		*+
  3118  00F4E8  CFF5 F005          	movff	tablat,___lldiv@divisor
  3119  00F4EC  0009               	tblrd		*+
  3120  00F4EE  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3121  00F4F2  0009               	tblrd		*+
  3122  00F4F4  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3123  00F4F8  000A               	tblrd		*-
  3124  00F4FA  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3125  00F4FE  ECA2  F069         	call	___lldiv	;wreg free
  3126  00F502  C001  F06F         	movff	?___lldiv,printf@tmpval
  3127  00F506  C002  F070         	movff	?___lldiv+1,printf@tmpval+1
  3128  00F50A  C003  F071         	movff	?___lldiv+2,printf@tmpval+2
  3129  00F50E  C004  F072         	movff	?___lldiv+3,printf@tmpval+3
  3130                           
  3131                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3132  00F512  C06F  F00E         	movff	printf@tmpval,___llmod@dividend
  3133  00F516  C070  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  3134  00F51A  C071  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  3135  00F51E  C072  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  3136  00F522  0E0A               	movlw	10
  3137  00F524  6E12               	movwf	___llmod@divisor,c
  3138  00F526  0E00               	movlw	0
  3139  00F528  6E13               	movwf	___llmod@divisor+1,c
  3140  00F52A  0E00               	movlw	0
  3141  00F52C  6E14               	movwf	___llmod@divisor+2,c
  3142  00F52E  0E00               	movlw	0
  3143  00F530  6E15               	movwf	___llmod@divisor+3,c
  3144  00F532  ECFB  F068         	call	___llmod	;wreg free
  3145  00F536  C00E  F06F         	movff	?___llmod,printf@tmpval
  3146  00F53A  C00F  F070         	movff	?___llmod+1,printf@tmpval+1
  3147  00F53E  C010  F071         	movff	?___llmod+2,printf@tmpval+2
  3148  00F542  C011  F072         	movff	?___llmod+3,printf@tmpval+3
  3149                           
  3150                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  3151  00F546  0100               	movlb	0	; () banked
  3152  00F548  516F               	movf	printf@tmpval& (0+255),w,b
  3153  00F54A  0F30               	addlw	48
  3154  00F54C  ECE4  F067         	call	_putch
  3155                           
  3156                           ;doprnt.c: 1232: val %= dpowers[c];
  3157  00F550  C069  F00E         	movff	printf@val,___llmod@dividend
  3158  00F554  C06A  F00F         	movff	printf@val+1,___llmod@dividend+1
  3159  00F558  C06B  F010         	movff	printf@val+2,___llmod@dividend+2
  3160  00F55C  C06C  F011         	movff	printf@val+3,___llmod@dividend+3
  3161  00F560  0100               	movlb	0	; () banked
  3162  00F562  5176               	movf	printf@c& (0+255),w,b
  3163  00F564  0D04               	mullw	4
  3164  00F566  0E9B               	movlw	low _dpowers
  3165  00F568  24F3               	addwf	prodl,w,c
  3166  00F56A  6EF6               	movwf	tblptrl,c
  3167  00F56C  0EFE               	movlw	high _dpowers
  3168  00F56E  20F4               	addwfc	prodh,w,c
  3169  00F570  6EF7               	movwf	tblptrh,c
  3170  00F572                     	if	0	;There are less than 3 active tblptr bytes
  3171  00F572                     	endif
  3172  00F572  0009               	tblrd		*+
  3173  00F574  CFF5 F012          	movff	tablat,___llmod@divisor
  3174  00F578  0009               	tblrd		*+
  3175  00F57A  CFF5 F013          	movff	tablat,___llmod@divisor+1
  3176  00F57E  0009               	tblrd		*+
  3177  00F580  CFF5 F014          	movff	tablat,___llmod@divisor+2
  3178  00F584  000A               	tblrd		*-
  3179  00F586  CFF5 F015          	movff	tablat,___llmod@divisor+3
  3180  00F58A  ECFB  F068         	call	___llmod	;wreg free
  3181  00F58E  C00E  F069         	movff	?___llmod,printf@val
  3182  00F592  C00F  F06A         	movff	?___llmod+1,printf@val+1
  3183  00F596  C010  F06B         	movff	?___llmod+2,printf@val+2
  3184  00F59A  C011  F06C         	movff	?___llmod+3,printf@val+3
  3185  00F59E                     l240:
  3186  00F59E  0100               	movlb	0	; () banked
  3187  00F5A0  0776               	decf	printf@c& (0+255),f,b
  3188  00F5A2  2976               	incf	printf@c& (0+255),w,b
  3189  00F5A4  B4D8               	btfsc	status,2,c
  3190  00F5A6  D008               	goto	l243
  3191  00F5A8  D78D               	goto	l241
  3192  00F5AA                     
  3193                           ; BSR set to: 0
  3194                           ;doprnt.c: 1236: (putch('0') );
  3195                           
  3196                           ; BSR set to: 0
  3197  00F5AA  0E30               	movlw	48
  3198  00F5AC  ECE4  F067         	call	_putch
  3199                           
  3200                           ;doprnt.c: 1237: prec--;
  3201  00F5B0  0100               	movlb	0	; () banked
  3202  00F5B2  0767               	decf	printf@prec& (0+255),f,b
  3203  00F5B4  A0D8               	btfss	status,0,c
  3204  00F5B6  0768               	decf	(printf@prec+1)& (0+255),f,b
  3205  00F5B8                     l243:
  3206                           
  3207                           ; BSR set to: 0
  3208                           
  3209                           ; BSR set to: 0
  3210  00F5B8  5167               	movf	printf@prec& (0+255),w,b
  3211  00F5BA  1168               	iorwf	(printf@prec+1)& (0+255),w,b
  3212  00F5BC  B4D8               	btfsc	status,2,c
  3213  00F5BE  D098               	goto	u3550
  3214  00F5C0  D7F4               	goto	l244
  3215  00F5C2                     l209:
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;doprnt.c: 1246: }
  3219                           ;doprnt.c: 1253: {
  3220                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3221                           
  3222                           ; BSR set to: 0
  3223  00F5C2  C063  FFD9         	movff	printf@ap,fsr2l
  3224  00F5C6  C064  FFDA         	movff	printf@ap+1,fsr2h
  3225  00F5CA  CFDE F069          	movff	postinc2,printf@val
  3226  00F5CE  CFDD F06A          	movff	postdec2,printf@val+1
  3227  00F5D2  0E00               	movlw	0
  3228  00F5D4  BF6A               	btfsc	(printf@val+1)& (0+255),7,b
  3229  00F5D6  0EFF               	movlw	-1
  3230  00F5D8  6F6B               	movwf	(printf@val+2)& (0+255),b
  3231  00F5DA  6F6C               	movwf	(printf@val+3)& (0+255),b
  3232                           
  3233                           ; BSR set to: 0
  3234  00F5DC  0E02               	movlw	2
  3235  00F5DE  2763               	addwf	printf@ap& (0+255),f,b
  3236  00F5E0  0E00               	movlw	0
  3237  00F5E2  2364               	addwfc	(printf@ap+1)& (0+255),f,b
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;doprnt.c: 1261: if((long)val < 0) {
  3241  00F5E4  AF6C               	btfss	(printf@val+3)& (0+255),7,b
  3242  00F5E6  D00A               	goto	l246
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;doprnt.c: 1262: flag |= 0x03;
  3246  00F5E8  0E03               	movlw	3
  3247  00F5EA  1365               	iorwf	printf@flag& (0+255),f,b
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;doprnt.c: 1263: val = -val;
  3251  00F5EC  1F6C               	comf	(printf@val+3)& (0+255),f,b
  3252  00F5EE  1F6B               	comf	(printf@val+2)& (0+255),f,b
  3253  00F5F0  1F6A               	comf	(printf@val+1)& (0+255),f,b
  3254  00F5F2  6D69               	negf	printf@val& (0+255),b
  3255  00F5F4  0E00               	movlw	0
  3256  00F5F6  236A               	addwfc	(printf@val+1)& (0+255),f,b
  3257  00F5F8  236B               	addwfc	(printf@val+2)& (0+255),f,b
  3258  00F5FA  236C               	addwfc	(printf@val+3)& (0+255),f,b
  3259  00F5FC                     l246:
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;doprnt.c: 1264: }
  3263                           ;doprnt.c: 1266: }
  3264                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3265                           
  3266                           ; BSR set to: 0
  3267  00F5FC  0E01               	movlw	1
  3268  00F5FE  6F76               	movwf	printf@c& (0+255),b
  3269  00F600                     l3529:
  3270                           
  3271                           ; BSR set to: 0
  3272  00F600  0E0A               	movlw	10
  3273  00F602  1976               	xorwf	printf@c& (0+255),w,b
  3274  00F604  B4D8               	btfsc	status,2,c
  3275  00F606  D018               	goto	u3530
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;doprnt.c: 1306: if(val < dpowers[c])
  3279                           
  3280                           ; BSR set to: 0
  3281                           
  3282                           ; BSR set to: 0
  3283  00F608  5176               	movf	printf@c& (0+255),w,b
  3284  00F60A  0D04               	mullw	4
  3285  00F60C  0E9B               	movlw	low _dpowers
  3286  00F60E  24F3               	addwf	prodl,w,c
  3287  00F610  6EF6               	movwf	tblptrl,c
  3288  00F612  0EFE               	movlw	high _dpowers
  3289  00F614  20F4               	addwfc	prodh,w,c
  3290  00F616  6EF7               	movwf	tblptrh,c
  3291  00F618                     	if	0	;There are less than 3 active tblptr bytes
  3292  00F618                     	endif
  3293  00F618  0009               	tblrd		*+
  3294  00F61A  50F5               	movf	tablat,w,c
  3295  00F61C  5D69               	subwf	printf@val& (0+255),w,b
  3296  00F61E  0009               	tblrd		*+
  3297  00F620  50F5               	movf	tablat,w,c
  3298  00F622  596A               	subwfb	(printf@val+1)& (0+255),w,b
  3299  00F624  0009               	tblrd		*+
  3300  00F626  50F5               	movf	tablat,w,c
  3301  00F628  596B               	subwfb	(printf@val+2)& (0+255),w,b
  3302  00F62A  0009               	tblrd		*+
  3303  00F62C  50F5               	movf	tablat,w,c
  3304  00F62E  596C               	subwfb	(printf@val+3)& (0+255),w,b
  3305  00F630  A0D8               	btfss	status,0,c
  3306  00F632  D002               	goto	u3530
  3307                           
  3308                           ; BSR set to: 0
  3309                           
  3310                           ; BSR set to: 0
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;doprnt.c: 1307: break;
  3314  00F634  2B76               	incf	printf@c& (0+255),f,b
  3315  00F636  D7E4               	goto	l3529
  3316  00F638                     u3530:
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;doprnt.c: 1422: {
  3320                           ;doprnt.c: 1438: if(flag & 0x03)
  3321                           
  3322                           ; BSR set to: 0
  3323  00F638  0E03               	movlw	3
  3324  00F63A  1565               	andwf	printf@flag& (0+255),w,b
  3325  00F63C  6E4E               	movwf	??_printf& (0+255),c
  3326  00F63E  0E00               	movlw	0
  3327  00F640  1566               	andwf	(printf@flag+1)& (0+255),w,b
  3328  00F642  6E4F               	movwf	(??_printf+1)& (0+255),c
  3329  00F644  504E               	movf	??_printf,w,c
  3330  00F646  104F               	iorwf	??_printf+1,w,c
  3331  00F648  B4D8               	btfsc	status,2,c
  3332  00F64A  D003               	goto	l250
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;doprnt.c: 1439: (putch('-') );
  3336  00F64C  0E2D               	movlw	45
  3337  00F64E  ECE4  F067         	call	_putch
  3338  00F652                     l250:
  3339                           
  3340                           ;doprnt.c: 1469: }
  3341                           ;doprnt.c: 1472: prec = c;
  3342  00F652  0100               	movlb	0	; () banked
  3343  00F654  5176               	movf	printf@c& (0+255),w,b
  3344  00F656  6F67               	movwf	printf@prec& (0+255),b
  3345  00F658  6B68               	clrf	(printf@prec+1)& (0+255),b
  3346  00F65A  BF67               	btfsc	printf@prec& (0+255),7,b
  3347  00F65C  0768               	decf	(printf@prec+1)& (0+255),f,b
  3348                           
  3349                           ;doprnt.c: 1474: while(prec--) {
  3350  00F65E  D03F               	goto	l251
  3351  00F660                     l3547:
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;doprnt.c: 1478: {
  3355                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3356  00F660  C067  F04E         	movff	printf@prec,??_printf
  3357  00F664  C068  F04F         	movff	printf@prec+1,??_printf+1
  3358  00F668  90D8               	bcf	status,0,c
  3359  00F66A  364E               	rlcf	??_printf,f,c
  3360  00F66C  364F               	rlcf	??_printf+1,f,c
  3361  00F66E  90D8               	bcf	status,0,c
  3362  00F670  364E               	rlcf	??_printf,f,c
  3363  00F672  364F               	rlcf	??_printf+1,f,c
  3364  00F674  0E9B               	movlw	low _dpowers
  3365  00F676  244E               	addwf	??_printf,w,c
  3366  00F678  6EF6               	movwf	tblptrl,c
  3367  00F67A  0EFE               	movlw	high _dpowers
  3368  00F67C  204F               	addwfc	??_printf+1,w,c
  3369  00F67E  6EF7               	movwf	tblptrh,c
  3370  00F680                     	if	0	;There are less than 3 active tblptr bytes
  3371  00F680                     	endif
  3372  00F680  0009               	tblrd		*+
  3373  00F682  CFF5 F005          	movff	tablat,___lldiv@divisor
  3374  00F686  0009               	tblrd		*+
  3375  00F688  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3376  00F68C  0009               	tblrd		*+
  3377  00F68E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3378  00F692  000A               	tblrd		*-
  3379  00F694  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3380  00F698  C069  F001         	movff	printf@val,___lldiv@dividend
  3381  00F69C  C06A  F002         	movff	printf@val+1,___lldiv@dividend+1
  3382  00F6A0  C06B  F003         	movff	printf@val+2,___lldiv@dividend+2
  3383  00F6A4  C06C  F004         	movff	printf@val+3,___lldiv@dividend+3
  3384  00F6A8  ECA2  F069         	call	___lldiv	;wreg free
  3385  00F6AC  C001  F00E         	movff	?___lldiv,___llmod@dividend
  3386  00F6B0  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  3387  00F6B4  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  3388  00F6B8  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  3389  00F6BC  0E0A               	movlw	10
  3390  00F6BE  6E12               	movwf	___llmod@divisor,c
  3391  00F6C0  0E00               	movlw	0
  3392  00F6C2  6E13               	movwf	___llmod@divisor+1,c
  3393  00F6C4  0E00               	movlw	0
  3394  00F6C6  6E14               	movwf	___llmod@divisor+2,c
  3395  00F6C8  0E00               	movlw	0
  3396  00F6CA  6E15               	movwf	___llmod@divisor+3,c
  3397  00F6CC  ECFB  F068         	call	___llmod	;wreg free
  3398  00F6D0  500E               	movf	?___llmod,w,c
  3399  00F6D2  0F30               	addlw	48
  3400  00F6D4  0100               	movlb	0	; () banked
  3401  00F6D6  6F76               	movwf	printf@c& (0+255),b
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;doprnt.c: 1523: }
  3405                           ;doprnt.c: 1524: (putch(c) );
  3406  00F6D8  5176               	movf	printf@c& (0+255),w,b
  3407  00F6DA  ECE4  F067         	call	_putch
  3408  00F6DE                     l251:
  3409  00F6DE  0100               	movlb	0	; () banked
  3410  00F6E0  0767               	decf	printf@prec& (0+255),f,b
  3411  00F6E2  A0D8               	btfss	status,0,c
  3412  00F6E4  0768               	decf	(printf@prec+1)& (0+255),f,b
  3413  00F6E6  2967               	incf	printf@prec& (0+255),w,b
  3414  00F6E8  E1BB               	bnz	l3547
  3415  00F6EA  2968               	incf	(printf@prec+1)& (0+255),w,b
  3416  00F6EC  A4D8               	btfss	status,2,c
  3417  00F6EE  D7B8               	goto	l252
  3418  00F6F0                     u3550:
  3419                           
  3420                           ; BSR set to: 0
  3421                           
  3422                           ; BSR set to: 0
  3423  00F6F0  C049  FFF6         	movff	printf@f,tblptrl
  3424  00F6F4  C04A  FFF7         	movff	printf@f+1,tblptrh
  3425  00F6F8  4A49               	infsnz	printf@f,f,c
  3426  00F6FA  2A4A               	incf	printf@f+1,f,c
  3427  00F6FC                     	if	0	;tblptru may be non-zero
  3428  00F6FC                     	endif
  3429  00F6FC                     	if	0	;tblptru may be non-zero
  3430  00F6FC                     	endif
  3431  00F6FC  0008               	tblrd		*
  3432  00F6FE  CFF5 F076          	movff	tablat,printf@c
  3433  00F702  0100               	movlb	0	; () banked
  3434  00F704  5176               	movf	printf@c& (0+255),w,b
  3435  00F706  B4D8               	btfsc	status,2,c
  3436  00F708  0012               	return	
  3437  00F70A  D47F               	goto	l199
  3438  00F70C                     __end_of_printf:
  3439                           	opt stack 0
  3440                           tblptru	equ	0xFF8
  3441                           tblptrh	equ	0xFF7
  3442                           tblptrl	equ	0xFF6
  3443                           tablat	equ	0xFF5
  3444                           prodh	equ	0xFF4
  3445                           prodl	equ	0xFF3
  3446                           wreg	equ	0xFE8
  3447                           postinc2	equ	0xFDE
  3448                           postdec2	equ	0xFDD
  3449                           fsr2h	equ	0xFDA
  3450                           fsr2l	equ	0xFD9
  3451                           status	equ	0xFD8
  3452                           
  3453 ;; *************** function _scale *****************
  3454 ;; Defined at:
  3455 ;;		line 425 in file "/opt/microchip/xc8/v1.44/sources/common/doprnt.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;  scl             1    wreg     char 
  3458 ;; Auto vars:     Size  Location     Type
  3459 ;;  scl             1   45[COMRAM] char 
  3460 ;; Return value:  Size  Location     Type
  3461 ;;                  3   39[COMRAM] char 
  3462 ;; Registers used:
  3463 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3469 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3470 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3472 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3473 ;;Total ram usage:        7 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; Hardware stack levels required when called:    2
  3476 ;; This function calls:
  3477 ;;		___awdiv
  3478 ;;		___awmod
  3479 ;;		___ftmul
  3480 ;;		___wmul
  3481 ;; This function is called by:
  3482 ;;		_printf
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           	psect	text3
  3487  00EBF6                     __ptext3:
  3488                           	opt stack 0
  3489  00EBF6                     _scale:
  3490                           	opt stack 27
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;incstack = 0
  3494                           ;scale@scl stored from wreg
  3495  00EBF6  6E2E               	movwf	scale@scl,c
  3496                           
  3497                           ;doprnt.c: 428: if(scl < 0) {
  3498  00EBF8  AE2E               	btfss	scale@scl,7,c
  3499  00EBFA  D101               	goto	l188
  3500                           
  3501                           ;doprnt.c: 429: scl = -scl;
  3502  00EBFC  6C2E               	negf	scale@scl,c
  3503                           
  3504                           ;doprnt.c: 430: if(scl>=110)
  3505  00EBFE  502E               	movf	scale@scl,w,c
  3506  00EC00  0A80               	xorlw	128
  3507  00EC02  0F12               	addlw	-238
  3508  00EC04  A0D8               	btfss	status,0,c
  3509  00EC06  D091               	goto	l189
  3510                           
  3511                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3512  00EC08  0E00               	movlw	0
  3513  00EC0A  6E12               	movwf	___wmul@multiplicand+1,c
  3514  00EC0C  0E03               	movlw	3
  3515  00EC0E  6E11               	movwf	___wmul@multiplicand,c
  3516  00EC10  0E00               	movlw	0
  3517  00EC12  6E0A               	movwf	___awdiv@divisor+1,c
  3518  00EC14  0E0A               	movlw	10
  3519  00EC16  6E09               	movwf	___awdiv@divisor,c
  3520  00EC18  0E00               	movlw	0
  3521  00EC1A  6E04               	movwf	___awmod@divisor+1,c
  3522  00EC1C  0E64               	movlw	100
  3523  00EC1E  6E03               	movwf	___awmod@divisor,c
  3524  00EC20  502E               	movf	scale@scl,w,c
  3525  00EC22  6E01               	movwf	___awmod@dividend,c
  3526  00EC24  6A02               	clrf	___awmod@dividend+1,c
  3527  00EC26  BE01               	btfsc	___awmod@dividend,7,c
  3528  00EC28  0602               	decf	___awmod@dividend+1,f,c
  3529  00EC2A  EC2E  F069         	call	___awmod	;wreg free
  3530  00EC2E  C001  F007         	movff	?___awmod,___awdiv@dividend
  3531  00EC32  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3532  00EC36  ECE3  F069         	call	___awdiv	;wreg free
  3533  00EC3A  0E09               	movlw	9
  3534  00EC3C  2407               	addwf	?___awdiv,w,c
  3535  00EC3E  6E0F               	movwf	___wmul@multiplier,c
  3536  00EC40  0E00               	movlw	0
  3537  00EC42  2008               	addwfc	?___awdiv+1,w,c
  3538  00EC44  6E10               	movwf	___wmul@multiplier+1,c
  3539  00EC46  EC2F  F068         	call	___wmul	;wreg free
  3540  00EC4A  0EEA               	movlw	low __npowers_
  3541  00EC4C  240F               	addwf	?___wmul,w,c
  3542  00EC4E  6EF6               	movwf	tblptrl,c
  3543  00EC50  0EFE               	movlw	high __npowers_
  3544  00EC52  2010               	addwfc	?___wmul+1,w,c
  3545  00EC54  6EF7               	movwf	tblptrh,c
  3546  00EC56                     	if	0	;There are less than 3 active tblptr bytes
  3547  00EC56                     	endif
  3548  00EC56  0009               	tblrd		*+
  3549  00EC58  CFF5 F01C          	movff	tablat,___ftmul@f2
  3550  00EC5C  0009               	tblrd		*+
  3551  00EC5E  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  3552  00EC62  000A               	tblrd		*-
  3553  00EC64  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  3554  00EC68  0E00               	movlw	0
  3555  00EC6A  6E0A               	movwf	___awdiv@divisor+1,c
  3556  00EC6C  0E64               	movlw	100
  3557  00EC6E  6E09               	movwf	___awdiv@divisor,c
  3558  00EC70  502E               	movf	scale@scl,w,c
  3559  00EC72  6E07               	movwf	___awdiv@dividend,c
  3560  00EC74  6A08               	clrf	___awdiv@dividend+1,c
  3561  00EC76  BE07               	btfsc	___awdiv@dividend,7,c
  3562  00EC78  0608               	decf	___awdiv@dividend+1,f,c
  3563  00EC7A  ECE3  F069         	call	___awdiv	;wreg free
  3564  00EC7E  0E12               	movlw	18
  3565  00EC80  2407               	addwf	?___awdiv,w,c
  3566  00EC82  6E0F               	movwf	___wmul@multiplier,c
  3567  00EC84  0E00               	movlw	0
  3568  00EC86  2008               	addwfc	?___awdiv+1,w,c
  3569  00EC88  6E10               	movwf	___wmul@multiplier+1,c
  3570  00EC8A  0E00               	movlw	0
  3571  00EC8C  6E12               	movwf	___wmul@multiplicand+1,c
  3572  00EC8E  0E03               	movlw	3
  3573  00EC90  6E11               	movwf	___wmul@multiplicand,c
  3574  00EC92  EC2F  F068         	call	___wmul	;wreg free
  3575  00EC96  0EEA               	movlw	low __npowers_
  3576  00EC98  240F               	addwf	?___wmul,w,c
  3577  00EC9A  6EF6               	movwf	tblptrl,c
  3578  00EC9C  0EFE               	movlw	high __npowers_
  3579  00EC9E  2010               	addwfc	?___wmul+1,w,c
  3580  00ECA0  6EF7               	movwf	tblptrh,c
  3581  00ECA2                     	if	0	;There are less than 3 active tblptr bytes
  3582  00ECA2                     	endif
  3583  00ECA2  0009               	tblrd		*+
  3584  00ECA4  CFF5 F019          	movff	tablat,___ftmul@f1
  3585  00ECA8  0009               	tblrd		*+
  3586  00ECAA  CFF5 F01A          	movff	tablat,___ftmul@f1+1
  3587  00ECAE  000A               	tblrd		*-
  3588  00ECB0  CFF5 F01B          	movff	tablat,___ftmul@f1+2
  3589  00ECB4  ECBA  F06C         	call	___ftmul	;wreg free
  3590  00ECB8  C019  F02B         	movff	?___ftmul,_scale$1340
  3591  00ECBC  C01A  F02C         	movff	?___ftmul+1,_scale$1340+1
  3592  00ECC0  C01B  F02D         	movff	?___ftmul+2,_scale$1340+2
  3593                           
  3594                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3595  00ECC4  C02B  F019         	movff	_scale$1340,___ftmul@f1
  3596  00ECC8  C02C  F01A         	movff	_scale$1340+1,___ftmul@f1+1
  3597  00ECCC  C02D  F01B         	movff	_scale$1340+2,___ftmul@f1+2
  3598  00ECD0  0E00               	movlw	0
  3599  00ECD2  6E12               	movwf	___wmul@multiplicand+1,c
  3600  00ECD4  0E03               	movlw	3
  3601  00ECD6  6E11               	movwf	___wmul@multiplicand,c
  3602  00ECD8  0E00               	movlw	0
  3603  00ECDA  6E04               	movwf	___awmod@divisor+1,c
  3604  00ECDC  0E0A               	movlw	10
  3605  00ECDE  6E03               	movwf	___awmod@divisor,c
  3606  00ECE0  502E               	movf	scale@scl,w,c
  3607  00ECE2  6E01               	movwf	___awmod@dividend,c
  3608  00ECE4  6A02               	clrf	___awmod@dividend+1,c
  3609  00ECE6  BE01               	btfsc	___awmod@dividend,7,c
  3610  00ECE8  0602               	decf	___awmod@dividend+1,f,c
  3611  00ECEA  EC2E  F069         	call	___awmod	;wreg free
  3612  00ECEE  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3613  00ECF2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3614  00ECF6  EC2F  F068         	call	___wmul	;wreg free
  3615  00ECFA  0EEA               	movlw	low __npowers_
  3616  00ECFC  240F               	addwf	?___wmul,w,c
  3617  00ECFE  6EF6               	movwf	tblptrl,c
  3618  00ED00  0EFE               	movlw	high __npowers_
  3619  00ED02  2010               	addwfc	?___wmul+1,w,c
  3620  00ED04  6EF7               	movwf	tblptrh,c
  3621  00ED06                     	if	0	;There are less than 3 active tblptr bytes
  3622  00ED06                     	endif
  3623  00ED06  0009               	tblrd		*+
  3624  00ED08  CFF5 F01C          	movff	tablat,___ftmul@f2
  3625  00ED0C  0009               	tblrd		*+
  3626  00ED0E  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  3627  00ED12  000A               	tblrd		*-
  3628  00ED14  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  3629  00ED18  ECBA  F06C         	call	___ftmul	;wreg free
  3630  00ED1C  C019  F028         	movff	?___ftmul,?_scale
  3631  00ED20  C01A  F029         	movff	?___ftmul+1,?_scale+1
  3632  00ED24  C01B  F02A         	movff	?___ftmul+2,?_scale+2
  3633  00ED28  0012               	return	
  3634  00ED2A                     l189:
  3635                           
  3636                           ;doprnt.c: 432: else if(scl > 10)
  3637  00ED2A  502E               	movf	scale@scl,w,c
  3638  00ED2C  0A80               	xorlw	128
  3639  00ED2E  0F75               	addlw	-139
  3640  00ED30  A0D8               	btfss	status,0,c
  3641  00ED32  D053               	goto	l192
  3642                           
  3643                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3644  00ED34  0E00               	movlw	0
  3645  00ED36  6E0A               	movwf	___awdiv@divisor+1,c
  3646  00ED38  0E0A               	movlw	10
  3647  00ED3A  6E09               	movwf	___awdiv@divisor,c
  3648  00ED3C  502E               	movf	scale@scl,w,c
  3649  00ED3E  6E07               	movwf	___awdiv@dividend,c
  3650  00ED40  6A08               	clrf	___awdiv@dividend+1,c
  3651  00ED42  BE07               	btfsc	___awdiv@dividend,7,c
  3652  00ED44  0608               	decf	___awdiv@dividend+1,f,c
  3653  00ED46  ECE3  F069         	call	___awdiv	;wreg free
  3654  00ED4A  0E09               	movlw	9
  3655  00ED4C  2407               	addwf	?___awdiv,w,c
  3656  00ED4E  6E0F               	movwf	___wmul@multiplier,c
  3657  00ED50  0E00               	movlw	0
  3658  00ED52  2008               	addwfc	?___awdiv+1,w,c
  3659  00ED54  6E10               	movwf	___wmul@multiplier+1,c
  3660  00ED56  0E00               	movlw	0
  3661  00ED58  6E12               	movwf	___wmul@multiplicand+1,c
  3662  00ED5A  0E03               	movlw	3
  3663  00ED5C  6E11               	movwf	___wmul@multiplicand,c
  3664  00ED5E  EC2F  F068         	call	___wmul	;wreg free
  3665  00ED62  0EEA               	movlw	low __npowers_
  3666  00ED64  240F               	addwf	?___wmul,w,c
  3667  00ED66  6EF6               	movwf	tblptrl,c
  3668  00ED68  0EFE               	movlw	high __npowers_
  3669  00ED6A  2010               	addwfc	?___wmul+1,w,c
  3670  00ED6C  6EF7               	movwf	tblptrh,c
  3671  00ED6E                     	if	0	;There are less than 3 active tblptr bytes
  3672  00ED6E                     	endif
  3673  00ED6E  0009               	tblrd		*+
  3674  00ED70  CFF5 F019          	movff	tablat,___ftmul@f1
  3675  00ED74  0009               	tblrd		*+
  3676  00ED76  CFF5 F01A          	movff	tablat,___ftmul@f1+1
  3677  00ED7A  000A               	tblrd		*-
  3678  00ED7C  CFF5 F01B          	movff	tablat,___ftmul@f1+2
  3679  00ED80  0E00               	movlw	0
  3680  00ED82  6E12               	movwf	___wmul@multiplicand+1,c
  3681  00ED84  0E03               	movlw	3
  3682  00ED86  6E11               	movwf	___wmul@multiplicand,c
  3683  00ED88  0E00               	movlw	0
  3684  00ED8A  6E04               	movwf	___awmod@divisor+1,c
  3685  00ED8C  0E0A               	movlw	10
  3686  00ED8E  6E03               	movwf	___awmod@divisor,c
  3687  00ED90  502E               	movf	scale@scl,w,c
  3688  00ED92  6E01               	movwf	___awmod@dividend,c
  3689  00ED94  6A02               	clrf	___awmod@dividend+1,c
  3690  00ED96  BE01               	btfsc	___awmod@dividend,7,c
  3691  00ED98  0602               	decf	___awmod@dividend+1,f,c
  3692  00ED9A  EC2E  F069         	call	___awmod	;wreg free
  3693  00ED9E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3694  00EDA2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3695  00EDA6  EC2F  F068         	call	___wmul	;wreg free
  3696  00EDAA  0EEA               	movlw	low __npowers_
  3697  00EDAC  240F               	addwf	?___wmul,w,c
  3698  00EDAE  6EF6               	movwf	tblptrl,c
  3699  00EDB0  0EFE               	movlw	high __npowers_
  3700  00EDB2  2010               	addwfc	?___wmul+1,w,c
  3701  00EDB4  6EF7               	movwf	tblptrh,c
  3702  00EDB6                     	if	0	;There are less than 3 active tblptr bytes
  3703  00EDB6                     	endif
  3704  00EDB6  0009               	tblrd		*+
  3705  00EDB8  CFF5 F01C          	movff	tablat,___ftmul@f2
  3706  00EDBC  0009               	tblrd		*+
  3707  00EDBE  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  3708  00EDC2  000A               	tblrd		*-
  3709  00EDC4  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  3710  00EDC8  ECBA  F06C         	call	___ftmul	;wreg free
  3711  00EDCC  C019  F028         	movff	?___ftmul,?_scale
  3712  00EDD0  C01A  F029         	movff	?___ftmul+1,?_scale+1
  3713  00EDD4  C01B  F02A         	movff	?___ftmul+2,?_scale+2
  3714  00EDD8  0012               	return	
  3715  00EDDA                     l192:
  3716                           
  3717                           ;doprnt.c: 434: return _npowers_[scl];
  3718  00EDDA  502E               	movf	scale@scl,w,c
  3719  00EDDC  0D03               	mullw	3
  3720  00EDDE  0EEA               	movlw	low __npowers_
  3721  00EDE0  24F3               	addwf	prodl,w,c
  3722  00EDE2  6EF6               	movwf	tblptrl,c
  3723  00EDE4  0EFE               	movlw	high __npowers_
  3724  00EDE6  20F4               	addwfc	prodh,w,c
  3725  00EDE8  6EF7               	movwf	tblptrh,c
  3726  00EDEA                     	if	0	;There are less than 3 active tblptr bytes
  3727  00EDEA                     	endif
  3728  00EDEA  0009               	tblrd		*+
  3729  00EDEC  CFF5 F028          	movff	tablat,?_scale
  3730  00EDF0  0009               	tblrd		*+
  3731  00EDF2  CFF5 F029          	movff	tablat,?_scale+1
  3732  00EDF6  000A               	tblrd		*-
  3733  00EDF8  CFF5 F02A          	movff	tablat,?_scale+2
  3734  00EDFC  0012               	return	
  3735  00EDFE                     l188:
  3736                           
  3737                           ;doprnt.c: 435: }
  3738                           ;doprnt.c: 436: if(scl>=110)
  3739  00EDFE  502E               	movf	scale@scl,w,c
  3740  00EE00  0A80               	xorlw	128
  3741  00EE02  0F12               	addlw	-238
  3742  00EE04  A0D8               	btfss	status,0,c
  3743  00EE06  D091               	goto	l193
  3744                           
  3745                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3746  00EE08  0E00               	movlw	0
  3747  00EE0A  6E12               	movwf	___wmul@multiplicand+1,c
  3748  00EE0C  0E03               	movlw	3
  3749  00EE0E  6E11               	movwf	___wmul@multiplicand,c
  3750  00EE10  0E00               	movlw	0
  3751  00EE12  6E0A               	movwf	___awdiv@divisor+1,c
  3752  00EE14  0E0A               	movlw	10
  3753  00EE16  6E09               	movwf	___awdiv@divisor,c
  3754  00EE18  0E00               	movlw	0
  3755  00EE1A  6E04               	movwf	___awmod@divisor+1,c
  3756  00EE1C  0E64               	movlw	100
  3757  00EE1E  6E03               	movwf	___awmod@divisor,c
  3758  00EE20  502E               	movf	scale@scl,w,c
  3759  00EE22  6E01               	movwf	___awmod@dividend,c
  3760  00EE24  6A02               	clrf	___awmod@dividend+1,c
  3761  00EE26  BE01               	btfsc	___awmod@dividend,7,c
  3762  00EE28  0602               	decf	___awmod@dividend+1,f,c
  3763  00EE2A  EC2E  F069         	call	___awmod	;wreg free
  3764  00EE2E  C001  F007         	movff	?___awmod,___awdiv@dividend
  3765  00EE32  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3766  00EE36  ECE3  F069         	call	___awdiv	;wreg free
  3767  00EE3A  0E09               	movlw	9
  3768  00EE3C  2407               	addwf	?___awdiv,w,c
  3769  00EE3E  6E0F               	movwf	___wmul@multiplier,c
  3770  00EE40  0E00               	movlw	0
  3771  00EE42  2008               	addwfc	?___awdiv+1,w,c
  3772  00EE44  6E10               	movwf	___wmul@multiplier+1,c
  3773  00EE46  EC2F  F068         	call	___wmul	;wreg free
  3774  00EE4A  0EC3               	movlw	low __powers_
  3775  00EE4C  240F               	addwf	?___wmul,w,c
  3776  00EE4E  6EF6               	movwf	tblptrl,c
  3777  00EE50  0EFE               	movlw	high __powers_
  3778  00EE52  2010               	addwfc	?___wmul+1,w,c
  3779  00EE54  6EF7               	movwf	tblptrh,c
  3780  00EE56                     	if	0	;There are less than 3 active tblptr bytes
  3781  00EE56                     	endif
  3782  00EE56  0009               	tblrd		*+
  3783  00EE58  CFF5 F01C          	movff	tablat,___ftmul@f2
  3784  00EE5C  0009               	tblrd		*+
  3785  00EE5E  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  3786  00EE62  000A               	tblrd		*-
  3787  00EE64  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  3788  00EE68  0E00               	movlw	0
  3789  00EE6A  6E0A               	movwf	___awdiv@divisor+1,c
  3790  00EE6C  0E64               	movlw	100
  3791  00EE6E  6E09               	movwf	___awdiv@divisor,c
  3792  00EE70  502E               	movf	scale@scl,w,c
  3793  00EE72  6E07               	movwf	___awdiv@dividend,c
  3794  00EE74  6A08               	clrf	___awdiv@dividend+1,c
  3795  00EE76  BE07               	btfsc	___awdiv@dividend,7,c
  3796  00EE78  0608               	decf	___awdiv@dividend+1,f,c
  3797  00EE7A  ECE3  F069         	call	___awdiv	;wreg free
  3798  00EE7E  0E12               	movlw	18
  3799  00EE80  2407               	addwf	?___awdiv,w,c
  3800  00EE82  6E0F               	movwf	___wmul@multiplier,c
  3801  00EE84  0E00               	movlw	0
  3802  00EE86  2008               	addwfc	?___awdiv+1,w,c
  3803  00EE88  6E10               	movwf	___wmul@multiplier+1,c
  3804  00EE8A  0E00               	movlw	0
  3805  00EE8C  6E12               	movwf	___wmul@multiplicand+1,c
  3806  00EE8E  0E03               	movlw	3
  3807  00EE90  6E11               	movwf	___wmul@multiplicand,c
  3808  00EE92  EC2F  F068         	call	___wmul	;wreg free
  3809  00EE96  0EC3               	movlw	low __powers_
  3810  00EE98  240F               	addwf	?___wmul,w,c
  3811  00EE9A  6EF6               	movwf	tblptrl,c
  3812  00EE9C  0EFE               	movlw	high __powers_
  3813  00EE9E  2010               	addwfc	?___wmul+1,w,c
  3814  00EEA0  6EF7               	movwf	tblptrh,c
  3815  00EEA2                     	if	0	;There are less than 3 active tblptr bytes
  3816  00EEA2                     	endif
  3817  00EEA2  0009               	tblrd		*+
  3818  00EEA4  CFF5 F019          	movff	tablat,___ftmul@f1
  3819  00EEA8  0009               	tblrd		*+
  3820  00EEAA  CFF5 F01A          	movff	tablat,___ftmul@f1+1
  3821  00EEAE  000A               	tblrd		*-
  3822  00EEB0  CFF5 F01B          	movff	tablat,___ftmul@f1+2
  3823  00EEB4  ECBA  F06C         	call	___ftmul	;wreg free
  3824  00EEB8  C019  F02B         	movff	?___ftmul,_scale$1340
  3825  00EEBC  C01A  F02C         	movff	?___ftmul+1,_scale$1340+1
  3826  00EEC0  C01B  F02D         	movff	?___ftmul+2,_scale$1340+2
  3827                           
  3828                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3829  00EEC4  C02B  F019         	movff	_scale$1340,___ftmul@f1
  3830  00EEC8  C02C  F01A         	movff	_scale$1340+1,___ftmul@f1+1
  3831  00EECC  C02D  F01B         	movff	_scale$1340+2,___ftmul@f1+2
  3832  00EED0  0E00               	movlw	0
  3833  00EED2  6E12               	movwf	___wmul@multiplicand+1,c
  3834  00EED4  0E03               	movlw	3
  3835  00EED6  6E11               	movwf	___wmul@multiplicand,c
  3836  00EED8  0E00               	movlw	0
  3837  00EEDA  6E04               	movwf	___awmod@divisor+1,c
  3838  00EEDC  0E0A               	movlw	10
  3839  00EEDE  6E03               	movwf	___awmod@divisor,c
  3840  00EEE0  502E               	movf	scale@scl,w,c
  3841  00EEE2  6E01               	movwf	___awmod@dividend,c
  3842  00EEE4  6A02               	clrf	___awmod@dividend+1,c
  3843  00EEE6  BE01               	btfsc	___awmod@dividend,7,c
  3844  00EEE8  0602               	decf	___awmod@dividend+1,f,c
  3845  00EEEA  EC2E  F069         	call	___awmod	;wreg free
  3846  00EEEE  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3847  00EEF2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3848  00EEF6  EC2F  F068         	call	___wmul	;wreg free
  3849  00EEFA  0EC3               	movlw	low __powers_
  3850  00EEFC  240F               	addwf	?___wmul,w,c
  3851  00EEFE  6EF6               	movwf	tblptrl,c
  3852  00EF00  0EFE               	movlw	high __powers_
  3853  00EF02  2010               	addwfc	?___wmul+1,w,c
  3854  00EF04  6EF7               	movwf	tblptrh,c
  3855  00EF06                     	if	0	;There are less than 3 active tblptr bytes
  3856  00EF06                     	endif
  3857  00EF06  0009               	tblrd		*+
  3858  00EF08  CFF5 F01C          	movff	tablat,___ftmul@f2
  3859  00EF0C  0009               	tblrd		*+
  3860  00EF0E  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  3861  00EF12  000A               	tblrd		*-
  3862  00EF14  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  3863  00EF18  ECBA  F06C         	call	___ftmul	;wreg free
  3864  00EF1C  C019  F028         	movff	?___ftmul,?_scale
  3865  00EF20  C01A  F029         	movff	?___ftmul+1,?_scale+1
  3866  00EF24  C01B  F02A         	movff	?___ftmul+2,?_scale+2
  3867  00EF28  0012               	return	
  3868  00EF2A                     l193:
  3869                           
  3870                           ;doprnt.c: 438: else if(scl > 10)
  3871  00EF2A  502E               	movf	scale@scl,w,c
  3872  00EF2C  0A80               	xorlw	128
  3873  00EF2E  0F75               	addlw	-139
  3874  00EF30  A0D8               	btfss	status,0,c
  3875  00EF32  D053               	goto	l195
  3876                           
  3877                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3878  00EF34  0E00               	movlw	0
  3879  00EF36  6E0A               	movwf	___awdiv@divisor+1,c
  3880  00EF38  0E0A               	movlw	10
  3881  00EF3A  6E09               	movwf	___awdiv@divisor,c
  3882  00EF3C  502E               	movf	scale@scl,w,c
  3883  00EF3E  6E07               	movwf	___awdiv@dividend,c
  3884  00EF40  6A08               	clrf	___awdiv@dividend+1,c
  3885  00EF42  BE07               	btfsc	___awdiv@dividend,7,c
  3886  00EF44  0608               	decf	___awdiv@dividend+1,f,c
  3887  00EF46  ECE3  F069         	call	___awdiv	;wreg free
  3888  00EF4A  0E09               	movlw	9
  3889  00EF4C  2407               	addwf	?___awdiv,w,c
  3890  00EF4E  6E0F               	movwf	___wmul@multiplier,c
  3891  00EF50  0E00               	movlw	0
  3892  00EF52  2008               	addwfc	?___awdiv+1,w,c
  3893  00EF54  6E10               	movwf	___wmul@multiplier+1,c
  3894  00EF56  0E00               	movlw	0
  3895  00EF58  6E12               	movwf	___wmul@multiplicand+1,c
  3896  00EF5A  0E03               	movlw	3
  3897  00EF5C  6E11               	movwf	___wmul@multiplicand,c
  3898  00EF5E  EC2F  F068         	call	___wmul	;wreg free
  3899  00EF62  0EC3               	movlw	low __powers_
  3900  00EF64  240F               	addwf	?___wmul,w,c
  3901  00EF66  6EF6               	movwf	tblptrl,c
  3902  00EF68  0EFE               	movlw	high __powers_
  3903  00EF6A  2010               	addwfc	?___wmul+1,w,c
  3904  00EF6C  6EF7               	movwf	tblptrh,c
  3905  00EF6E                     	if	0	;There are less than 3 active tblptr bytes
  3906  00EF6E                     	endif
  3907  00EF6E  0009               	tblrd		*+
  3908  00EF70  CFF5 F019          	movff	tablat,___ftmul@f1
  3909  00EF74  0009               	tblrd		*+
  3910  00EF76  CFF5 F01A          	movff	tablat,___ftmul@f1+1
  3911  00EF7A  000A               	tblrd		*-
  3912  00EF7C  CFF5 F01B          	movff	tablat,___ftmul@f1+2
  3913  00EF80  0E00               	movlw	0
  3914  00EF82  6E12               	movwf	___wmul@multiplicand+1,c
  3915  00EF84  0E03               	movlw	3
  3916  00EF86  6E11               	movwf	___wmul@multiplicand,c
  3917  00EF88  0E00               	movlw	0
  3918  00EF8A  6E04               	movwf	___awmod@divisor+1,c
  3919  00EF8C  0E0A               	movlw	10
  3920  00EF8E  6E03               	movwf	___awmod@divisor,c
  3921  00EF90  502E               	movf	scale@scl,w,c
  3922  00EF92  6E01               	movwf	___awmod@dividend,c
  3923  00EF94  6A02               	clrf	___awmod@dividend+1,c
  3924  00EF96  BE01               	btfsc	___awmod@dividend,7,c
  3925  00EF98  0602               	decf	___awmod@dividend+1,f,c
  3926  00EF9A  EC2E  F069         	call	___awmod	;wreg free
  3927  00EF9E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3928  00EFA2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3929  00EFA6  EC2F  F068         	call	___wmul	;wreg free
  3930  00EFAA  0EC3               	movlw	low __powers_
  3931  00EFAC  240F               	addwf	?___wmul,w,c
  3932  00EFAE  6EF6               	movwf	tblptrl,c
  3933  00EFB0  0EFE               	movlw	high __powers_
  3934  00EFB2  2010               	addwfc	?___wmul+1,w,c
  3935  00EFB4  6EF7               	movwf	tblptrh,c
  3936  00EFB6                     	if	0	;There are less than 3 active tblptr bytes
  3937  00EFB6                     	endif
  3938  00EFB6  0009               	tblrd		*+
  3939  00EFB8  CFF5 F01C          	movff	tablat,___ftmul@f2
  3940  00EFBC  0009               	tblrd		*+
  3941  00EFBE  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  3942  00EFC2  000A               	tblrd		*-
  3943  00EFC4  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  3944  00EFC8  ECBA  F06C         	call	___ftmul	;wreg free
  3945  00EFCC  C019  F028         	movff	?___ftmul,?_scale
  3946  00EFD0  C01A  F029         	movff	?___ftmul+1,?_scale+1
  3947  00EFD4  C01B  F02A         	movff	?___ftmul+2,?_scale+2
  3948  00EFD8  0012               	return	
  3949  00EFDA                     l195:
  3950                           
  3951                           ;doprnt.c: 440: return _powers_[scl];
  3952  00EFDA  502E               	movf	scale@scl,w,c
  3953  00EFDC  0D03               	mullw	3
  3954  00EFDE  0EC3               	movlw	low __powers_
  3955  00EFE0  24F3               	addwf	prodl,w,c
  3956  00EFE2  6EF6               	movwf	tblptrl,c
  3957  00EFE4  0EFE               	movlw	high __powers_
  3958  00EFE6  20F4               	addwfc	prodh,w,c
  3959  00EFE8  6EF7               	movwf	tblptrh,c
  3960  00EFEA                     	if	0	;There are less than 3 active tblptr bytes
  3961  00EFEA                     	endif
  3962  00EFEA  0009               	tblrd		*+
  3963  00EFEC  CFF5 F028          	movff	tablat,?_scale
  3964  00EFF0  0009               	tblrd		*+
  3965  00EFF2  CFF5 F029          	movff	tablat,?_scale+1
  3966  00EFF6  000A               	tblrd		*-
  3967  00EFF8  CFF5 F02A          	movff	tablat,?_scale+2
  3968  00EFFC  0012               	return	
  3969  00EFFE                     __end_of_scale:
  3970                           	opt stack 0
  3971                           tblptru	equ	0xFF8
  3972                           tblptrh	equ	0xFF7
  3973                           tblptrl	equ	0xFF6
  3974                           tablat	equ	0xFF5
  3975                           prodh	equ	0xFF4
  3976                           prodl	equ	0xFF3
  3977                           wreg	equ	0xFE8
  3978                           postinc2	equ	0xFDE
  3979                           postdec2	equ	0xFDD
  3980                           fsr2h	equ	0xFDA
  3981                           fsr2l	equ	0xFD9
  3982                           status	equ	0xFD8
  3983                           
  3984 ;; *************** function _putch *****************
  3985 ;; Defined at:
  3986 ;;		line 111 in file "mcc_generated_files/eusart1.c"
  3987 ;; Parameters:    Size  Location     Type
  3988 ;;  txData          1    wreg     unsigned char 
  3989 ;; Auto vars:     Size  Location     Type
  3990 ;;  txData          1    1[COMRAM] unsigned char 
  3991 ;; Return value:  Size  Location     Type
  3992 ;;                  1    wreg      void 
  3993 ;; Registers used:
  3994 ;;		wreg, status,2, cstack
  3995 ;; Tracked objects:
  3996 ;;		On entry : 0/0
  3997 ;;		On exit  : 0/0
  3998 ;;		Unchanged: 0/0
  3999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4001 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4003 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4004 ;;Total ram usage:        1 bytes
  4005 ;; Hardware stack levels used:    1
  4006 ;; Hardware stack levels required when called:    1
  4007 ;; This function calls:
  4008 ;;		_EUSART1_Write
  4009 ;; This function is called by:
  4010 ;;		_printf
  4011 ;; This function uses a non-reentrant model
  4012 ;;
  4013                           
  4014                           	psect	text4
  4015  00CFC8                     __ptext4:
  4016                           	opt stack 0
  4017  00CFC8                     _putch:
  4018                           	opt stack 28
  4019                           
  4020                           ;incstack = 0
  4021                           ;putch@txData stored from wreg
  4022  00CFC8  6E02               	movwf	putch@txData,c
  4023                           
  4024                           ;eusart1.c: 113: EUSART1_Write(txData);
  4025  00CFCA  5002               	movf	putch@txData,w,c
  4026  00CFCC  ECE9  F067         	call	_EUSART1_Write
  4027  00CFD0  0012               	return		;funcret
  4028  00CFD2                     __end_of_putch:
  4029                           	opt stack 0
  4030                           tblptru	equ	0xFF8
  4031                           tblptrh	equ	0xFF7
  4032                           tblptrl	equ	0xFF6
  4033                           tablat	equ	0xFF5
  4034                           prodh	equ	0xFF4
  4035                           prodl	equ	0xFF3
  4036                           wreg	equ	0xFE8
  4037                           postinc2	equ	0xFDE
  4038                           postdec2	equ	0xFDD
  4039                           fsr2h	equ	0xFDA
  4040                           fsr2l	equ	0xFD9
  4041                           status	equ	0xFD8
  4042                           
  4043 ;; *************** function _EUSART1_Write *****************
  4044 ;; Defined at:
  4045 ;;		line 97 in file "mcc_generated_files/eusart1.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;  txData          1    wreg     unsigned char 
  4048 ;; Auto vars:     Size  Location     Type
  4049 ;;  txData          1    0[COMRAM] unsigned char 
  4050 ;; Return value:  Size  Location     Type
  4051 ;;                  1    wreg      void 
  4052 ;; Registers used:
  4053 ;;		wreg
  4054 ;; Tracked objects:
  4055 ;;		On entry : 0/0
  4056 ;;		On exit  : 0/0
  4057 ;;		Unchanged: 0/0
  4058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4060 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;Total ram usage:        1 bytes
  4064 ;; Hardware stack levels used:    1
  4065 ;; This function calls:
  4066 ;;		Nothing
  4067 ;; This function is called by:
  4068 ;;		_putch
  4069 ;; This function uses a non-reentrant model
  4070 ;;
  4071                           
  4072                           	psect	text5
  4073  00CFD2                     __ptext5:
  4074                           	opt stack 0
  4075  00CFD2                     _EUSART1_Write:
  4076                           	opt stack 28
  4077                           
  4078                           ;incstack = 0
  4079                           ;EUSART1_Write@txData stored from wreg
  4080  00CFD2  6E01               	movwf	EUSART1_Write@txData,c
  4081  00CFD4                     
  4082                           ;eusart1.c: 100: {
  4083                           
  4084                           ;eusart1.c: 99: while(0 == PIR1bits.TX1IF)
  4085  00CFD4  A89E               	btfss	3998,4,c	;volatile
  4086  00CFD6  D7FE               	goto	l2659
  4087                           
  4088                           ;eusart1.c: 101: }
  4089                           ;eusart1.c: 103: TXREG1 = txData;
  4090  00CFD8  C001  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  4091  00CFDC  0012               	return		;funcret
  4092  00CFDE                     __end_of_EUSART1_Write:
  4093                           	opt stack 0
  4094                           tblptru	equ	0xFF8
  4095                           tblptrh	equ	0xFF7
  4096                           tblptrl	equ	0xFF6
  4097                           tablat	equ	0xFF5
  4098                           prodh	equ	0xFF4
  4099                           prodl	equ	0xFF3
  4100                           wreg	equ	0xFE8
  4101                           postinc2	equ	0xFDE
  4102                           postdec2	equ	0xFDD
  4103                           fsr2h	equ	0xFDA
  4104                           fsr2l	equ	0xFD9
  4105                           status	equ	0xFD8
  4106                           
  4107 ;; *************** function _fround *****************
  4108 ;; Defined at:
  4109 ;;		line 409 in file "/opt/microchip/xc8/v1.44/sources/common/doprnt.c"
  4110 ;; Parameters:    Size  Location     Type
  4111 ;;  prec            1    wreg     unsigned char 
  4112 ;; Auto vars:     Size  Location     Type
  4113 ;;  prec            1   48[COMRAM] unsigned char 
  4114 ;; Return value:  Size  Location     Type
  4115 ;;                  3   39[COMRAM] unsigned char 
  4116 ;; Registers used:
  4117 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4118 ;; Tracked objects:
  4119 ;;		On entry : 0/0
  4120 ;;		On exit  : 0/0
  4121 ;;		Unchanged: 0/0
  4122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4123 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4124 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4126 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4127 ;;Total ram usage:       10 bytes
  4128 ;; Hardware stack levels used:    1
  4129 ;; Hardware stack levels required when called:    2
  4130 ;; This function calls:
  4131 ;;		___awdiv
  4132 ;;		___awmod
  4133 ;;		___ftmul
  4134 ;;		___wmul
  4135 ;; This function is called by:
  4136 ;;		_printf
  4137 ;; This function uses a non-reentrant model
  4138 ;;
  4139                           
  4140                           	psect	text6
  4141  00E73A                     __ptext6:
  4142                           	opt stack 0
  4143  00E73A                     _fround:
  4144                           	opt stack 27
  4145                           
  4146                           ;incstack = 0
  4147                           ;fround@prec stored from wreg
  4148  00E73A  6E31               	movwf	fround@prec,c
  4149                           
  4150                           ;doprnt.c: 413: if(prec>=110)
  4151  00E73C  0E6D               	movlw	109
  4152  00E73E  6431               	cpfsgt	fround@prec,c
  4153  00E740  D09F               	goto	l182
  4154                           
  4155                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4156  00E742  0E00               	movlw	0
  4157  00E744  6E12               	movwf	___wmul@multiplicand+1,c
  4158  00E746  0E03               	movlw	3
  4159  00E748  6E11               	movwf	___wmul@multiplicand,c
  4160  00E74A  0E00               	movlw	0
  4161  00E74C  6E0A               	movwf	___awdiv@divisor+1,c
  4162  00E74E  0E0A               	movlw	10
  4163  00E750  6E09               	movwf	___awdiv@divisor,c
  4164  00E752  0E00               	movlw	0
  4165  00E754  6E04               	movwf	___awmod@divisor+1,c
  4166  00E756  0E64               	movlw	100
  4167  00E758  6E03               	movwf	___awmod@divisor,c
  4168  00E75A  C031  F001         	movff	fround@prec,___awmod@dividend
  4169  00E75E  6A02               	clrf	___awmod@dividend+1,c
  4170  00E760  EC2E  F069         	call	___awmod	;wreg free
  4171  00E764  C001  F007         	movff	?___awmod,___awdiv@dividend
  4172  00E768  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4173  00E76C  ECE3  F069         	call	___awdiv	;wreg free
  4174  00E770  0E09               	movlw	9
  4175  00E772  2407               	addwf	?___awdiv,w,c
  4176  00E774  6E0F               	movwf	___wmul@multiplier,c
  4177  00E776  0E00               	movlw	0
  4178  00E778  2008               	addwfc	?___awdiv+1,w,c
  4179  00E77A  6E10               	movwf	___wmul@multiplier+1,c
  4180  00E77C  EC2F  F068         	call	___wmul	;wreg free
  4181  00E780  0EEA               	movlw	low __npowers_
  4182  00E782  240F               	addwf	?___wmul,w,c
  4183  00E784  6EF6               	movwf	tblptrl,c
  4184  00E786  0EFE               	movlw	high __npowers_
  4185  00E788  2010               	addwfc	?___wmul+1,w,c
  4186  00E78A  6EF7               	movwf	tblptrh,c
  4187  00E78C                     	if	0	;There are less than 3 active tblptr bytes
  4188  00E78C                     	endif
  4189  00E78C  0009               	tblrd		*+
  4190  00E78E  CFF5 F01C          	movff	tablat,___ftmul@f2
  4191  00E792  0009               	tblrd		*+
  4192  00E794  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  4193  00E798  000A               	tblrd		*-
  4194  00E79A  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  4195  00E79E  0E00               	movlw	0
  4196  00E7A0  6E0A               	movwf	___awdiv@divisor+1,c
  4197  00E7A2  0E64               	movlw	100
  4198  00E7A4  6E09               	movwf	___awdiv@divisor,c
  4199  00E7A6  C031  F007         	movff	fround@prec,___awdiv@dividend
  4200  00E7AA  6A08               	clrf	___awdiv@dividend+1,c
  4201  00E7AC  ECE3  F069         	call	___awdiv	;wreg free
  4202  00E7B0  0E12               	movlw	18
  4203  00E7B2  2407               	addwf	?___awdiv,w,c
  4204  00E7B4  6E0F               	movwf	___wmul@multiplier,c
  4205  00E7B6  0E00               	movlw	0
  4206  00E7B8  2008               	addwfc	?___awdiv+1,w,c
  4207  00E7BA  6E10               	movwf	___wmul@multiplier+1,c
  4208  00E7BC  0E00               	movlw	0
  4209  00E7BE  6E12               	movwf	___wmul@multiplicand+1,c
  4210  00E7C0  0E03               	movlw	3
  4211  00E7C2  6E11               	movwf	___wmul@multiplicand,c
  4212  00E7C4  EC2F  F068         	call	___wmul	;wreg free
  4213  00E7C8  0EEA               	movlw	low __npowers_
  4214  00E7CA  240F               	addwf	?___wmul,w,c
  4215  00E7CC  6EF6               	movwf	tblptrl,c
  4216  00E7CE  0EFE               	movlw	high __npowers_
  4217  00E7D0  2010               	addwfc	?___wmul+1,w,c
  4218  00E7D2  6EF7               	movwf	tblptrh,c
  4219  00E7D4                     	if	0	;There are less than 3 active tblptr bytes
  4220  00E7D4                     	endif
  4221  00E7D4  0009               	tblrd		*+
  4222  00E7D6  CFF5 F019          	movff	tablat,___ftmul@f1
  4223  00E7DA  0009               	tblrd		*+
  4224  00E7DC  CFF5 F01A          	movff	tablat,___ftmul@f1+1
  4225  00E7E0  000A               	tblrd		*-
  4226  00E7E2  CFF5 F01B          	movff	tablat,___ftmul@f1+2
  4227  00E7E6  ECBA  F06C         	call	___ftmul	;wreg free
  4228  00E7EA  C019  F02E         	movff	?___ftmul,_fround$1338
  4229  00E7EE  C01A  F02F         	movff	?___ftmul+1,_fround$1338+1
  4230  00E7F2  C01B  F030         	movff	?___ftmul+2,_fround$1338+2
  4231                           
  4232                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4233  00E7F6  0E00               	movlw	0
  4234  00E7F8  6E12               	movwf	___wmul@multiplicand+1,c
  4235  00E7FA  0E03               	movlw	3
  4236  00E7FC  6E11               	movwf	___wmul@multiplicand,c
  4237  00E7FE  0E00               	movlw	0
  4238  00E800  6E04               	movwf	___awmod@divisor+1,c
  4239  00E802  0E0A               	movlw	10
  4240  00E804  6E03               	movwf	___awmod@divisor,c
  4241  00E806  C031  F001         	movff	fround@prec,___awmod@dividend
  4242  00E80A  6A02               	clrf	___awmod@dividend+1,c
  4243  00E80C  EC2E  F069         	call	___awmod	;wreg free
  4244  00E810  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4245  00E814  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4246  00E818  EC2F  F068         	call	___wmul	;wreg free
  4247  00E81C  0EEA               	movlw	low __npowers_
  4248  00E81E  240F               	addwf	?___wmul,w,c
  4249  00E820  6EF6               	movwf	tblptrl,c
  4250  00E822  0EFE               	movlw	high __npowers_
  4251  00E824  2010               	addwfc	?___wmul+1,w,c
  4252  00E826  6EF7               	movwf	tblptrh,c
  4253  00E828                     	if	0	;There are less than 3 active tblptr bytes
  4254  00E828                     	endif
  4255  00E828  0009               	tblrd		*+
  4256  00E82A  CFF5 F01C          	movff	tablat,___ftmul@f2
  4257  00E82E  0009               	tblrd		*+
  4258  00E830  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  4259  00E834  000A               	tblrd		*-
  4260  00E836  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  4261  00E83A  C02E  F019         	movff	_fround$1338,___ftmul@f1
  4262  00E83E  C02F  F01A         	movff	_fround$1338+1,___ftmul@f1+1
  4263  00E842  C030  F01B         	movff	_fround$1338+2,___ftmul@f1+2
  4264  00E846  ECBA  F06C         	call	___ftmul	;wreg free
  4265  00E84A  C019  F02B         	movff	?___ftmul,_fround$1339
  4266  00E84E  C01A  F02C         	movff	?___ftmul+1,_fround$1339+1
  4267  00E852  C01B  F02D         	movff	?___ftmul+2,_fround$1339+2
  4268                           
  4269                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4270  00E856  C02B  F019         	movff	_fround$1339,___ftmul@f1
  4271  00E85A  C02C  F01A         	movff	_fround$1339+1,___ftmul@f1+1
  4272  00E85E  C02D  F01B         	movff	_fround$1339+2,___ftmul@f1+2
  4273  00E862  0E00               	movlw	0
  4274  00E864  6E1C               	movwf	___ftmul@f2,c
  4275  00E866  0E00               	movlw	0
  4276  00E868  6E1D               	movwf	___ftmul@f2+1,c
  4277  00E86A  0E3F               	movlw	63
  4278  00E86C  6E1E               	movwf	___ftmul@f2+2,c
  4279  00E86E  ECBA  F06C         	call	___ftmul	;wreg free
  4280  00E872  C019  F028         	movff	?___ftmul,?_fround
  4281  00E876  C01A  F029         	movff	?___ftmul+1,?_fround+1
  4282  00E87A  C01B  F02A         	movff	?___ftmul+2,?_fround+2
  4283  00E87E  0012               	return	
  4284  00E880                     l182:
  4285                           
  4286                           ;doprnt.c: 415: else if(prec > 10)
  4287  00E880  0E0A               	movlw	10
  4288  00E882  6431               	cpfsgt	fround@prec,c
  4289  00E884  D063               	goto	l185
  4290                           
  4291                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4292  00E886  0E00               	movlw	0
  4293  00E888  6E12               	movwf	___wmul@multiplicand+1,c
  4294  00E88A  0E03               	movlw	3
  4295  00E88C  6E11               	movwf	___wmul@multiplicand,c
  4296  00E88E  0E00               	movlw	0
  4297  00E890  6E04               	movwf	___awmod@divisor+1,c
  4298  00E892  0E0A               	movlw	10
  4299  00E894  6E03               	movwf	___awmod@divisor,c
  4300  00E896  C031  F001         	movff	fround@prec,___awmod@dividend
  4301  00E89A  6A02               	clrf	___awmod@dividend+1,c
  4302  00E89C  EC2E  F069         	call	___awmod	;wreg free
  4303  00E8A0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4304  00E8A4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4305  00E8A8  EC2F  F068         	call	___wmul	;wreg free
  4306  00E8AC  0EEA               	movlw	low __npowers_
  4307  00E8AE  240F               	addwf	?___wmul,w,c
  4308  00E8B0  6EF6               	movwf	tblptrl,c
  4309  00E8B2  0EFE               	movlw	high __npowers_
  4310  00E8B4  2010               	addwfc	?___wmul+1,w,c
  4311  00E8B6  6EF7               	movwf	tblptrh,c
  4312  00E8B8                     	if	0	;There are less than 3 active tblptr bytes
  4313  00E8B8                     	endif
  4314  00E8B8  0009               	tblrd		*+
  4315  00E8BA  CFF5 F01C          	movff	tablat,___ftmul@f2
  4316  00E8BE  0009               	tblrd		*+
  4317  00E8C0  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  4318  00E8C4  000A               	tblrd		*-
  4319  00E8C6  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  4320  00E8CA  0E00               	movlw	0
  4321  00E8CC  6E0A               	movwf	___awdiv@divisor+1,c
  4322  00E8CE  0E0A               	movlw	10
  4323  00E8D0  6E09               	movwf	___awdiv@divisor,c
  4324  00E8D2  C031  F007         	movff	fround@prec,___awdiv@dividend
  4325  00E8D6  6A08               	clrf	___awdiv@dividend+1,c
  4326  00E8D8  ECE3  F069         	call	___awdiv	;wreg free
  4327  00E8DC  0E09               	movlw	9
  4328  00E8DE  2407               	addwf	?___awdiv,w,c
  4329  00E8E0  6E0F               	movwf	___wmul@multiplier,c
  4330  00E8E2  0E00               	movlw	0
  4331  00E8E4  2008               	addwfc	?___awdiv+1,w,c
  4332  00E8E6  6E10               	movwf	___wmul@multiplier+1,c
  4333  00E8E8  0E00               	movlw	0
  4334  00E8EA  6E12               	movwf	___wmul@multiplicand+1,c
  4335  00E8EC  0E03               	movlw	3
  4336  00E8EE  6E11               	movwf	___wmul@multiplicand,c
  4337  00E8F0  EC2F  F068         	call	___wmul	;wreg free
  4338  00E8F4  0EEA               	movlw	low __npowers_
  4339  00E8F6  240F               	addwf	?___wmul,w,c
  4340  00E8F8  6EF6               	movwf	tblptrl,c
  4341  00E8FA  0EFE               	movlw	high __npowers_
  4342  00E8FC  2010               	addwfc	?___wmul+1,w,c
  4343  00E8FE  6EF7               	movwf	tblptrh,c
  4344  00E900                     	if	0	;There are less than 3 active tblptr bytes
  4345  00E900                     	endif
  4346  00E900  0009               	tblrd		*+
  4347  00E902  CFF5 F019          	movff	tablat,___ftmul@f1
  4348  00E906  0009               	tblrd		*+
  4349  00E908  CFF5 F01A          	movff	tablat,___ftmul@f1+1
  4350  00E90C  000A               	tblrd		*-
  4351  00E90E  CFF5 F01B          	movff	tablat,___ftmul@f1+2
  4352  00E912  ECBA  F06C         	call	___ftmul	;wreg free
  4353  00E916  C019  F02E         	movff	?___ftmul,_fround$1338
  4354  00E91A  C01A  F02F         	movff	?___ftmul+1,_fround$1338+1
  4355  00E91E  C01B  F030         	movff	?___ftmul+2,_fround$1338+2
  4356                           
  4357                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4358  00E922  C02E  F019         	movff	_fround$1338,___ftmul@f1
  4359  00E926  C02F  F01A         	movff	_fround$1338+1,___ftmul@f1+1
  4360  00E92A  C030  F01B         	movff	_fround$1338+2,___ftmul@f1+2
  4361  00E92E  0E00               	movlw	0
  4362  00E930  6E1C               	movwf	___ftmul@f2,c
  4363  00E932  0E00               	movlw	0
  4364  00E934  6E1D               	movwf	___ftmul@f2+1,c
  4365  00E936  0E3F               	movlw	63
  4366  00E938  6E1E               	movwf	___ftmul@f2+2,c
  4367  00E93A  ECBA  F06C         	call	___ftmul	;wreg free
  4368  00E93E  C019  F028         	movff	?___ftmul,?_fround
  4369  00E942  C01A  F029         	movff	?___ftmul+1,?_fround+1
  4370  00E946  C01B  F02A         	movff	?___ftmul+2,?_fround+2
  4371  00E94A  0012               	return	
  4372  00E94C                     l185:
  4373                           
  4374                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4375  00E94C  5031               	movf	fround@prec,w,c
  4376  00E94E  0D03               	mullw	3
  4377  00E950  0EEA               	movlw	low __npowers_
  4378  00E952  24F3               	addwf	prodl,w,c
  4379  00E954  6EF6               	movwf	tblptrl,c
  4380  00E956  0EFE               	movlw	high __npowers_
  4381  00E958  20F4               	addwfc	prodh,w,c
  4382  00E95A  6EF7               	movwf	tblptrh,c
  4383  00E95C                     	if	0	;There are less than 3 active tblptr bytes
  4384  00E95C                     	endif
  4385  00E95C  0009               	tblrd		*+
  4386  00E95E  CFF5 F019          	movff	tablat,___ftmul@f1
  4387  00E962  0009               	tblrd		*+
  4388  00E964  CFF5 F01A          	movff	tablat,___ftmul@f1+1
  4389  00E968  000A               	tblrd		*-
  4390  00E96A  CFF5 F01B          	movff	tablat,___ftmul@f1+2
  4391  00E96E  0E00               	movlw	0
  4392  00E970  6E1C               	movwf	___ftmul@f2,c
  4393  00E972  0E00               	movlw	0
  4394  00E974  6E1D               	movwf	___ftmul@f2+1,c
  4395  00E976  0E3F               	movlw	63
  4396  00E978  6E1E               	movwf	___ftmul@f2+2,c
  4397  00E97A  ECBA  F06C         	call	___ftmul	;wreg free
  4398  00E97E  C019  F028         	movff	?___ftmul,?_fround
  4399  00E982  C01A  F029         	movff	?___ftmul+1,?_fround+1
  4400  00E986  C01B  F02A         	movff	?___ftmul+2,?_fround+2
  4401  00E98A  0012               	return	
  4402  00E98C                     __end_of_fround:
  4403                           	opt stack 0
  4404                           tblptru	equ	0xFF8
  4405                           tblptrh	equ	0xFF7
  4406                           tblptrl	equ	0xFF6
  4407                           tablat	equ	0xFF5
  4408                           prodh	equ	0xFF4
  4409                           prodl	equ	0xFF3
  4410                           wreg	equ	0xFE8
  4411                           postinc2	equ	0xFDE
  4412                           postdec2	equ	0xFDD
  4413                           fsr2h	equ	0xFDA
  4414                           fsr2l	equ	0xFD9
  4415                           status	equ	0xFD8
  4416                           
  4417 ;; *************** function ___awmod *****************
  4418 ;; Defined at:
  4419 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/awmod.c"
  4420 ;; Parameters:    Size  Location     Type
  4421 ;;  dividend        2    0[COMRAM] int 
  4422 ;;  divisor         2    2[COMRAM] int 
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;  sign            1    5[COMRAM] unsigned char 
  4425 ;;  counter         1    4[COMRAM] unsigned char 
  4426 ;; Return value:  Size  Location     Type
  4427 ;;                  2    0[COMRAM] int 
  4428 ;; Registers used:
  4429 ;;		wreg, status,2, status,0
  4430 ;; Tracked objects:
  4431 ;;		On entry : 0/0
  4432 ;;		On exit  : 0/0
  4433 ;;		Unchanged: 0/0
  4434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4435 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4436 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4438 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4439 ;;Total ram usage:        6 bytes
  4440 ;; Hardware stack levels used:    1
  4441 ;; This function calls:
  4442 ;;		Nothing
  4443 ;; This function is called by:
  4444 ;;		_fround
  4445 ;;		_scale
  4446 ;; This function uses a non-reentrant model
  4447 ;;
  4448                           
  4449                           	psect	text7
  4450  00D25C                     __ptext7:
  4451                           	opt stack 0
  4452  00D25C                     ___awmod:
  4453                           	opt stack 28
  4454                           
  4455                           ;incstack = 0
  4456  00D25C  0E00               	movlw	0
  4457  00D25E  6E06               	movwf	___awmod@sign,c
  4458  00D260  AE02               	btfss	___awmod@dividend+1,7,c
  4459  00D262  D006               	goto	l476
  4460  00D264  6C01               	negf	___awmod@dividend,c
  4461  00D266  1E02               	comf	___awmod@dividend+1,f,c
  4462  00D268  B0D8               	btfsc	status,0,c
  4463  00D26A  2A02               	incf	___awmod@dividend+1,f,c
  4464  00D26C  0E01               	movlw	1
  4465  00D26E  6E06               	movwf	___awmod@sign,c
  4466  00D270                     l476:
  4467  00D270  AE04               	btfss	___awmod@divisor+1,7,c
  4468  00D272  D004               	goto	l477
  4469  00D274  6C03               	negf	___awmod@divisor,c
  4470  00D276  1E04               	comf	___awmod@divisor+1,f,c
  4471  00D278  B0D8               	btfsc	status,0,c
  4472  00D27A  2A04               	incf	___awmod@divisor+1,f,c
  4473  00D27C                     l477:
  4474  00D27C  5003               	movf	___awmod@divisor,w,c
  4475  00D27E  1004               	iorwf	___awmod@divisor+1,w,c
  4476  00D280  B4D8               	btfsc	status,2,c
  4477  00D282  D018               	goto	l484
  4478  00D284  0E01               	movlw	1
  4479  00D286  6E05               	movwf	___awmod@counter,c
  4480  00D288  D004               	goto	l479
  4481  00D28A  90D8               	bcf	status,0,c
  4482  00D28C  3603               	rlcf	___awmod@divisor,f,c
  4483  00D28E  3604               	rlcf	___awmod@divisor+1,f,c
  4484  00D290  2A05               	incf	___awmod@counter,f,c
  4485  00D292                     l479:
  4486  00D292  AE04               	btfss	___awmod@divisor+1,7,c
  4487  00D294  D7FA               	goto	l480
  4488  00D296                     u2490:
  4489  00D296  5003               	movf	___awmod@divisor,w,c
  4490  00D298  5C01               	subwf	___awmod@dividend,w,c
  4491  00D29A  5004               	movf	___awmod@divisor+1,w,c
  4492  00D29C  5802               	subwfb	___awmod@dividend+1,w,c
  4493  00D29E  A0D8               	btfss	status,0,c
  4494  00D2A0  D004               	goto	l483
  4495  00D2A2  5003               	movf	___awmod@divisor,w,c
  4496  00D2A4  5E01               	subwf	___awmod@dividend,f,c
  4497  00D2A6  5004               	movf	___awmod@divisor+1,w,c
  4498  00D2A8  5A02               	subwfb	___awmod@dividend+1,f,c
  4499  00D2AA                     l483:
  4500  00D2AA  90D8               	bcf	status,0,c
  4501  00D2AC  3204               	rrcf	___awmod@divisor+1,f,c
  4502  00D2AE  3203               	rrcf	___awmod@divisor,f,c
  4503  00D2B0  2E05               	decfsz	___awmod@counter,f,c
  4504  00D2B2  D7F1               	goto	u2490
  4505  00D2B4                     l484:
  4506  00D2B4  5006               	movf	___awmod@sign,w,c
  4507  00D2B6  B4D8               	btfsc	status,2,c
  4508  00D2B8  D004               	goto	l485
  4509  00D2BA  6C01               	negf	___awmod@dividend,c
  4510  00D2BC  1E02               	comf	___awmod@dividend+1,f,c
  4511  00D2BE  B0D8               	btfsc	status,0,c
  4512  00D2C0  2A02               	incf	___awmod@dividend+1,f,c
  4513  00D2C2                     l485:
  4514  00D2C2  C001  F001         	movff	___awmod@dividend,?___awmod
  4515  00D2C6  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4516  00D2CA  0012               	return	
  4517  00D2CC                     __end_of___awmod:
  4518                           	opt stack 0
  4519                           tblptru	equ	0xFF8
  4520                           tblptrh	equ	0xFF7
  4521                           tblptrl	equ	0xFF6
  4522                           tablat	equ	0xFF5
  4523                           prodh	equ	0xFF4
  4524                           prodl	equ	0xFF3
  4525                           wreg	equ	0xFE8
  4526                           postinc2	equ	0xFDE
  4527                           postdec2	equ	0xFDD
  4528                           fsr2h	equ	0xFDA
  4529                           fsr2l	equ	0xFD9
  4530                           status	equ	0xFD8
  4531                           
  4532 ;; *************** function ___awdiv *****************
  4533 ;; Defined at:
  4534 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/awdiv.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;  dividend        2    6[COMRAM] int 
  4537 ;;  divisor         2    8[COMRAM] int 
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;  quotient        2   12[COMRAM] int 
  4540 ;;  sign            1   11[COMRAM] unsigned char 
  4541 ;;  counter         1   10[COMRAM] unsigned char 
  4542 ;; Return value:  Size  Location     Type
  4543 ;;                  2    6[COMRAM] int 
  4544 ;; Registers used:
  4545 ;;		wreg, status,2, status,0
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/0
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4551 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4552 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;Total ram usage:        8 bytes
  4556 ;; Hardware stack levels used:    1
  4557 ;; This function calls:
  4558 ;;		Nothing
  4559 ;; This function is called by:
  4560 ;;		_fround
  4561 ;;		_scale
  4562 ;;		_printf
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           	psect	text8
  4567  00D3C6                     __ptext8:
  4568                           	opt stack 0
  4569  00D3C6                     ___awdiv:
  4570                           	opt stack 28
  4571                           
  4572                           ;incstack = 0
  4573  00D3C6  0E00               	movlw	0
  4574  00D3C8  6E0C               	movwf	___awdiv@sign,c
  4575  00D3CA  AE0A               	btfss	___awdiv@divisor+1,7,c
  4576  00D3CC  D006               	goto	l463
  4577  00D3CE  6C09               	negf	___awdiv@divisor,c
  4578  00D3D0  1E0A               	comf	___awdiv@divisor+1,f,c
  4579  00D3D2  B0D8               	btfsc	status,0,c
  4580  00D3D4  2A0A               	incf	___awdiv@divisor+1,f,c
  4581  00D3D6  0E01               	movlw	1
  4582  00D3D8  6E0C               	movwf	___awdiv@sign,c
  4583  00D3DA                     l463:
  4584  00D3DA  AE08               	btfss	___awdiv@dividend+1,7,c
  4585  00D3DC  D006               	goto	l464
  4586  00D3DE  6C07               	negf	___awdiv@dividend,c
  4587  00D3E0  1E08               	comf	___awdiv@dividend+1,f,c
  4588  00D3E2  B0D8               	btfsc	status,0,c
  4589  00D3E4  2A08               	incf	___awdiv@dividend+1,f,c
  4590  00D3E6  0E01               	movlw	1
  4591  00D3E8  1A0C               	xorwf	___awdiv@sign,f,c
  4592  00D3EA                     l464:
  4593  00D3EA  0E00               	movlw	0
  4594  00D3EC  6E0E               	movwf	___awdiv@quotient+1,c
  4595  00D3EE  0E00               	movlw	0
  4596  00D3F0  6E0D               	movwf	___awdiv@quotient,c
  4597  00D3F2  5009               	movf	___awdiv@divisor,w,c
  4598  00D3F4  100A               	iorwf	___awdiv@divisor+1,w,c
  4599  00D3F6  B4D8               	btfsc	status,2,c
  4600  00D3F8  D01C               	goto	l471
  4601  00D3FA  0E01               	movlw	1
  4602  00D3FC  6E0B               	movwf	___awdiv@counter,c
  4603  00D3FE  D004               	goto	l466
  4604  00D400  90D8               	bcf	status,0,c
  4605  00D402  3609               	rlcf	___awdiv@divisor,f,c
  4606  00D404  360A               	rlcf	___awdiv@divisor+1,f,c
  4607  00D406  2A0B               	incf	___awdiv@counter,f,c
  4608  00D408                     l466:
  4609  00D408  AE0A               	btfss	___awdiv@divisor+1,7,c
  4610  00D40A  D7FA               	goto	l467
  4611  00D40C                     u2430:
  4612  00D40C  90D8               	bcf	status,0,c
  4613  00D40E  360D               	rlcf	___awdiv@quotient,f,c
  4614  00D410  360E               	rlcf	___awdiv@quotient+1,f,c
  4615  00D412  5009               	movf	___awdiv@divisor,w,c
  4616  00D414  5C07               	subwf	___awdiv@dividend,w,c
  4617  00D416  500A               	movf	___awdiv@divisor+1,w,c
  4618  00D418  5808               	subwfb	___awdiv@dividend+1,w,c
  4619  00D41A  A0D8               	btfss	status,0,c
  4620  00D41C  D005               	goto	l470
  4621  00D41E  5009               	movf	___awdiv@divisor,w,c
  4622  00D420  5E07               	subwf	___awdiv@dividend,f,c
  4623  00D422  500A               	movf	___awdiv@divisor+1,w,c
  4624  00D424  5A08               	subwfb	___awdiv@dividend+1,f,c
  4625  00D426  800D               	bsf	___awdiv@quotient,0,c
  4626  00D428                     l470:
  4627  00D428  90D8               	bcf	status,0,c
  4628  00D42A  320A               	rrcf	___awdiv@divisor+1,f,c
  4629  00D42C  3209               	rrcf	___awdiv@divisor,f,c
  4630  00D42E  2E0B               	decfsz	___awdiv@counter,f,c
  4631  00D430  D7ED               	goto	u2430
  4632  00D432                     l471:
  4633  00D432  500C               	movf	___awdiv@sign,w,c
  4634  00D434  B4D8               	btfsc	status,2,c
  4635  00D436  D004               	goto	l472
  4636  00D438  6C0D               	negf	___awdiv@quotient,c
  4637  00D43A  1E0E               	comf	___awdiv@quotient+1,f,c
  4638  00D43C  B0D8               	btfsc	status,0,c
  4639  00D43E  2A0E               	incf	___awdiv@quotient+1,f,c
  4640  00D440                     l472:
  4641  00D440  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4642  00D444  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4643  00D448  0012               	return	
  4644  00D44A                     __end_of___awdiv:
  4645                           	opt stack 0
  4646                           tblptru	equ	0xFF8
  4647                           tblptrh	equ	0xFF7
  4648                           tblptrl	equ	0xFF6
  4649                           tablat	equ	0xFF5
  4650                           prodh	equ	0xFF4
  4651                           prodl	equ	0xFF3
  4652                           wreg	equ	0xFE8
  4653                           postinc2	equ	0xFDE
  4654                           postdec2	equ	0xFDD
  4655                           fsr2h	equ	0xFDA
  4656                           fsr2l	equ	0xFD9
  4657                           status	equ	0xFD8
  4658                           
  4659 ;; *************** function __tdiv_to_l_ *****************
  4660 ;; Defined at:
  4661 ;;		line 60 in file "/opt/microchip/xc8/v1.44/sources/common/ftdivl.c"
  4662 ;; Parameters:    Size  Location     Type
  4663 ;;  f1              3    0[COMRAM] float 
  4664 ;;  f2              3    3[COMRAM] float 
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;  quot            4    9[COMRAM] unsigned long 
  4667 ;;  exp1            1   14[COMRAM] unsigned char 
  4668 ;;  cntr            1   13[COMRAM] unsigned char 
  4669 ;; Return value:  Size  Location     Type
  4670 ;;                  4    0[COMRAM] unsigned long 
  4671 ;; Registers used:
  4672 ;;		wreg, status,2, status,0
  4673 ;; Tracked objects:
  4674 ;;		On entry : 0/0
  4675 ;;		On exit  : 0/0
  4676 ;;		Unchanged: 0/0
  4677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4678 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4679 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4680 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4681 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4682 ;;Total ram usage:       15 bytes
  4683 ;; Hardware stack levels used:    1
  4684 ;; This function calls:
  4685 ;;		Nothing
  4686 ;; This function is called by:
  4687 ;;		_printf
  4688 ;; This function uses a non-reentrant model
  4689 ;;
  4690                           
  4691                           	psect	text9
  4692  00DDA2                     __ptext9:
  4693                           	opt stack 0
  4694  00DDA2                     __tdiv_to_l_:
  4695                           	opt stack 29
  4696                           
  4697                           ;incstack = 0
  4698  00DDA2  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4699  00DDA6  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4700  00DDA8  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4701  00DDAA  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4702  00DDAC  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4703  00DDAE  E301               	bnc	u2751
  4704  00DDB0  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4705  00DDB2                     u2751:
  4706  00DDB2  5007               	movf	??__tdiv_to_l_,w,c
  4707  00DDB4  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4708  00DDB6  500F               	movf	__tdiv_to_l_@exp1,w,c
  4709  00DDB8  A4D8               	btfss	status,2,c
  4710  00DDBA  D009               	goto	l611
  4711  00DDBC  0E00               	movlw	0
  4712  00DDBE  6E01               	movwf	?__tdiv_to_l_,c
  4713  00DDC0  0E00               	movlw	0
  4714  00DDC2  6E02               	movwf	?__tdiv_to_l_+1,c
  4715  00DDC4  0E00               	movlw	0
  4716  00DDC6  6E03               	movwf	?__tdiv_to_l_+2,c
  4717  00DDC8  0E00               	movlw	0
  4718  00DDCA  6E04               	movwf	?__tdiv_to_l_+3,c
  4719  00DDCC  0012               	return	
  4720  00DDCE                     l611:
  4721  00DDCE  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4722  00DDD2  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4723  00DDD4  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4724  00DDD6  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4725  00DDD8  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4726  00DDDA  E301               	bnc	u2771
  4727  00DDDC  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4728  00DDDE                     u2771:
  4729  00DDDE  5007               	movf	??__tdiv_to_l_,w,c
  4730  00DDE0  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4731  00DDE2  500E               	movf	__tdiv_to_l_@cntr,w,c
  4732  00DDE4  A4D8               	btfss	status,2,c
  4733  00DDE6  D009               	goto	l613
  4734  00DDE8  0E00               	movlw	0
  4735  00DDEA  6E01               	movwf	?__tdiv_to_l_,c
  4736  00DDEC  0E00               	movlw	0
  4737  00DDEE  6E02               	movwf	?__tdiv_to_l_+1,c
  4738  00DDF0  0E00               	movlw	0
  4739  00DDF2  6E03               	movwf	?__tdiv_to_l_+2,c
  4740  00DDF4  0E00               	movlw	0
  4741  00DDF6  6E04               	movwf	?__tdiv_to_l_+3,c
  4742  00DDF8  0012               	return	
  4743  00DDFA                     l613:
  4744  00DDFA  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4745  00DDFC  0EFF               	movlw	255
  4746  00DDFE  1601               	andwf	__tdiv_to_l_@f1,f,c
  4747  00DE00  0EFF               	movlw	255
  4748  00DE02  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4749  00DE04  0E00               	movlw	0
  4750  00DE06  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4751  00DE08  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4752  00DE0A  0EFF               	movlw	255
  4753  00DE0C  1604               	andwf	__tdiv_to_l_@f2,f,c
  4754  00DE0E  0EFF               	movlw	255
  4755  00DE10  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4756  00DE12  0E00               	movlw	0
  4757  00DE14  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4758  00DE16  0E00               	movlw	0
  4759  00DE18  6E0A               	movwf	__tdiv_to_l_@quot,c
  4760  00DE1A  0E00               	movlw	0
  4761  00DE1C  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4762  00DE1E  0E00               	movlw	0
  4763  00DE20  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4764  00DE22  0E00               	movlw	0
  4765  00DE24  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4766  00DE26  0E7F               	movlw	127
  4767  00DE28  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4768  00DE2A  500E               	movf	__tdiv_to_l_@cntr,w,c
  4769  00DE2C  0F98               	addlw	152
  4770  00DE2E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4771  00DE30  0E18               	movlw	24
  4772  00DE32  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4773  00DE34                     l614:
  4774  00DE34  90D8               	bcf	status,0,c
  4775  00DE36  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4776  00DE38  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4777  00DE3A  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4778  00DE3C  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4779  00DE3E  5004               	movf	__tdiv_to_l_@f2,w,c
  4780  00DE40  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4781  00DE42  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4782  00DE44  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4783  00DE46  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4784  00DE48  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4785  00DE4A  A0D8               	btfss	status,0,c
  4786  00DE4C  D007               	goto	l615
  4787  00DE4E  5004               	movf	__tdiv_to_l_@f2,w,c
  4788  00DE50  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4789  00DE52  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4790  00DE54  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4791  00DE56  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4792  00DE58  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4793  00DE5A  800A               	bsf	__tdiv_to_l_@quot,0,c
  4794  00DE5C                     l615:
  4795  00DE5C  90D8               	bcf	status,0,c
  4796  00DE5E  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4797  00DE60  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4798  00DE62  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4799  00DE64  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4800  00DE66  D7E6               	goto	l614
  4801  00DE68  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4802  00DE6A  D016               	goto	l617
  4803  00DE6C  500F               	movf	__tdiv_to_l_@exp1,w,c
  4804  00DE6E  0A80               	xorlw	128
  4805  00DE70  0F97               	addlw	151
  4806  00DE72  B0D8               	btfsc	status,0,c
  4807  00DE74  D009               	goto	l618
  4808  00DE76  0E00               	movlw	0
  4809  00DE78  6E01               	movwf	?__tdiv_to_l_,c
  4810  00DE7A  0E00               	movlw	0
  4811  00DE7C  6E02               	movwf	?__tdiv_to_l_+1,c
  4812  00DE7E  0E00               	movlw	0
  4813  00DE80  6E03               	movwf	?__tdiv_to_l_+2,c
  4814  00DE82  0E00               	movlw	0
  4815  00DE84  6E04               	movwf	?__tdiv_to_l_+3,c
  4816  00DE86  0012               	return	
  4817  00DE88                     l618:
  4818  00DE88  90D8               	bcf	status,0,c
  4819  00DE8A  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4820  00DE8C  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4821  00DE8E  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4822  00DE90  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4823  00DE92  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4824  00DE94  D7F9               	goto	l618
  4825  00DE96  D015               	goto	u2830
  4826  00DE98                     l617:
  4827  00DE98  0E17               	movlw	23
  4828  00DE9A  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4829  00DE9C  D00F               	goto	l623
  4830  00DE9E  0E00               	movlw	0
  4831  00DEA0  6E01               	movwf	?__tdiv_to_l_,c
  4832  00DEA2  0E00               	movlw	0
  4833  00DEA4  6E02               	movwf	?__tdiv_to_l_+1,c
  4834  00DEA6  0E00               	movlw	0
  4835  00DEA8  6E03               	movwf	?__tdiv_to_l_+2,c
  4836  00DEAA  0E00               	movlw	0
  4837  00DEAC  6E04               	movwf	?__tdiv_to_l_+3,c
  4838  00DEAE  0012               	return	
  4839  00DEB0  90D8               	bcf	status,0,c
  4840  00DEB2  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4841  00DEB4  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4842  00DEB6  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4843  00DEB8  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4844  00DEBA  060F               	decf	__tdiv_to_l_@exp1,f,c
  4845  00DEBC                     l623:
  4846  00DEBC  500F               	movf	__tdiv_to_l_@exp1,w,c
  4847  00DEBE  A4D8               	btfss	status,2,c
  4848  00DEC0  D7F7               	goto	l624
  4849  00DEC2                     u2830:
  4850  00DEC2  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4851  00DEC6  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4852  00DECA  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4853  00DECE  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4854  00DED2  0012               	return		;funcret
  4855  00DED4                     __end_of__tdiv_to_l_:
  4856                           	opt stack 0
  4857                           tblptru	equ	0xFF8
  4858                           tblptrh	equ	0xFF7
  4859                           tblptrl	equ	0xFF6
  4860                           tablat	equ	0xFF5
  4861                           prodh	equ	0xFF4
  4862                           prodl	equ	0xFF3
  4863                           wreg	equ	0xFE8
  4864                           postinc2	equ	0xFDE
  4865                           postdec2	equ	0xFDD
  4866                           fsr2h	equ	0xFDA
  4867                           fsr2l	equ	0xFD9
  4868                           status	equ	0xFD8
  4869                           
  4870 ;; *************** function __div_to_l_ *****************
  4871 ;; Defined at:
  4872 ;;		line 60 in file "/opt/microchip/xc8/v1.44/sources/common/fldivl.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;  f1              3    0[COMRAM] unsigned long 
  4875 ;;  f2              3    3[COMRAM] unsigned long 
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;  quot            4    6[COMRAM] unsigned long 
  4878 ;;  exp1            1   11[COMRAM] unsigned char 
  4879 ;;  cntr            1   10[COMRAM] unsigned char 
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  4    0[COMRAM] unsigned long 
  4882 ;; Registers used:
  4883 ;;		wreg, status,2, status,0
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4889 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4890 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4892 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4893 ;;Total ram usage:       12 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; This function calls:
  4896 ;;		Nothing
  4897 ;; This function is called by:
  4898 ;;		_printf
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           	psect	text10
  4903  00DC7A                     __ptext10:
  4904                           	opt stack 0
  4905  00DC7A                     __div_to_l_:
  4906                           	opt stack 29
  4907                           
  4908                           ;incstack = 0
  4909  00DC7A  3403               	rlcf	__div_to_l_@f1+2,w,c
  4910  00DC7C  3404               	rlcf	__div_to_l_@f1+3,w,c
  4911  00DC7E  6E0C               	movwf	__div_to_l_@exp1,c
  4912  00DC80  500C               	movf	__div_to_l_@exp1,w,c
  4913  00DC82  A4D8               	btfss	status,2,c
  4914  00DC84  D009               	goto	l507
  4915  00DC86  0E00               	movlw	0
  4916  00DC88  6E01               	movwf	?__div_to_l_,c
  4917  00DC8A  0E00               	movlw	0
  4918  00DC8C  6E02               	movwf	?__div_to_l_+1,c
  4919  00DC8E  0E00               	movlw	0
  4920  00DC90  6E03               	movwf	?__div_to_l_+2,c
  4921  00DC92  0E00               	movlw	0
  4922  00DC94  6E04               	movwf	?__div_to_l_+3,c
  4923  00DC96  0012               	return	
  4924  00DC98                     l507:
  4925  00DC98  3406               	rlcf	__div_to_l_@f2+2,w,c
  4926  00DC9A  3407               	rlcf	__div_to_l_@f2+3,w,c
  4927  00DC9C  6E0B               	movwf	__div_to_l_@cntr,c
  4928  00DC9E  500B               	movf	__div_to_l_@cntr,w,c
  4929  00DCA0  A4D8               	btfss	status,2,c
  4930  00DCA2  D009               	goto	l509
  4931  00DCA4  0E00               	movlw	0
  4932  00DCA6  6E01               	movwf	?__div_to_l_,c
  4933  00DCA8  0E00               	movlw	0
  4934  00DCAA  6E02               	movwf	?__div_to_l_+1,c
  4935  00DCAC  0E00               	movlw	0
  4936  00DCAE  6E03               	movwf	?__div_to_l_+2,c
  4937  00DCB0  0E00               	movlw	0
  4938  00DCB2  6E04               	movwf	?__div_to_l_+3,c
  4939  00DCB4  0012               	return	
  4940  00DCB6                     l509:
  4941  00DCB6  8E03               	bsf	__div_to_l_@f1+2,7,c
  4942  00DCB8  0EFF               	movlw	255
  4943  00DCBA  1601               	andwf	__div_to_l_@f1,f,c
  4944  00DCBC  0EFF               	movlw	255
  4945  00DCBE  1602               	andwf	__div_to_l_@f1+1,f,c
  4946  00DCC0  0EFF               	movlw	255
  4947  00DCC2  1603               	andwf	__div_to_l_@f1+2,f,c
  4948  00DCC4  0E00               	movlw	0
  4949  00DCC6  1604               	andwf	__div_to_l_@f1+3,f,c
  4950  00DCC8  8E06               	bsf	__div_to_l_@f2+2,7,c
  4951  00DCCA  0EFF               	movlw	255
  4952  00DCCC  1604               	andwf	__div_to_l_@f2,f,c
  4953  00DCCE  0EFF               	movlw	255
  4954  00DCD0  1605               	andwf	__div_to_l_@f2+1,f,c
  4955  00DCD2  0EFF               	movlw	255
  4956  00DCD4  1606               	andwf	__div_to_l_@f2+2,f,c
  4957  00DCD6  0E00               	movlw	0
  4958  00DCD8  1607               	andwf	__div_to_l_@f2+3,f,c
  4959  00DCDA  0E00               	movlw	0
  4960  00DCDC  6E07               	movwf	__div_to_l_@quot,c
  4961  00DCDE  0E00               	movlw	0
  4962  00DCE0  6E08               	movwf	__div_to_l_@quot+1,c
  4963  00DCE2  0E00               	movlw	0
  4964  00DCE4  6E09               	movwf	__div_to_l_@quot+2,c
  4965  00DCE6  0E00               	movlw	0
  4966  00DCE8  6E0A               	movwf	__div_to_l_@quot+3,c
  4967  00DCEA  0E7F               	movlw	127
  4968  00DCEC  5E0C               	subwf	__div_to_l_@exp1,f,c
  4969  00DCEE  500B               	movf	__div_to_l_@cntr,w,c
  4970  00DCF0  0FA0               	addlw	160
  4971  00DCF2  5E0C               	subwf	__div_to_l_@exp1,f,c
  4972  00DCF4  0E20               	movlw	32
  4973  00DCF6  6E0B               	movwf	__div_to_l_@cntr,c
  4974  00DCF8  90D8               	bcf	status,0,c
  4975  00DCFA  3607               	rlcf	__div_to_l_@quot,f,c
  4976  00DCFC  3608               	rlcf	__div_to_l_@quot+1,f,c
  4977  00DCFE  3609               	rlcf	__div_to_l_@quot+2,f,c
  4978  00DD00  360A               	rlcf	__div_to_l_@quot+3,f,c
  4979  00DD02  5004               	movf	__div_to_l_@f2,w,c
  4980  00DD04  5C01               	subwf	__div_to_l_@f1,w,c
  4981  00DD06  5005               	movf	__div_to_l_@f2+1,w,c
  4982  00DD08  5802               	subwfb	__div_to_l_@f1+1,w,c
  4983  00DD0A  5006               	movf	__div_to_l_@f2+2,w,c
  4984  00DD0C  5803               	subwfb	__div_to_l_@f1+2,w,c
  4985  00DD0E  5007               	movf	__div_to_l_@f2+3,w,c
  4986  00DD10  5804               	subwfb	__div_to_l_@f1+3,w,c
  4987  00DD12  A0D8               	btfss	status,0,c
  4988  00DD14  D009               	goto	l511
  4989  00DD16  5004               	movf	__div_to_l_@f2,w,c
  4990  00DD18  5E01               	subwf	__div_to_l_@f1,f,c
  4991  00DD1A  5005               	movf	__div_to_l_@f2+1,w,c
  4992  00DD1C  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4993  00DD1E  5006               	movf	__div_to_l_@f2+2,w,c
  4994  00DD20  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4995  00DD22  5007               	movf	__div_to_l_@f2+3,w,c
  4996  00DD24  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4997  00DD26  8007               	bsf	__div_to_l_@quot,0,c
  4998  00DD28                     l511:
  4999  00DD28  90D8               	bcf	status,0,c
  5000  00DD2A  3601               	rlcf	__div_to_l_@f1,f,c
  5001  00DD2C  3602               	rlcf	__div_to_l_@f1+1,f,c
  5002  00DD2E  3603               	rlcf	__div_to_l_@f1+2,f,c
  5003  00DD30  3604               	rlcf	__div_to_l_@f1+3,f,c
  5004  00DD32  2E0B               	decfsz	__div_to_l_@cntr,f,c
  5005  00DD34  D7E1               	goto	l510
  5006  00DD36  AE0C               	btfss	__div_to_l_@exp1,7,c
  5007  00DD38  D016               	goto	l513
  5008  00DD3A  500C               	movf	__div_to_l_@exp1,w,c
  5009  00DD3C  0A80               	xorlw	128
  5010  00DD3E  0F9F               	addlw	159
  5011  00DD40  B0D8               	btfsc	status,0,c
  5012  00DD42  D009               	goto	l514
  5013  00DD44  0E00               	movlw	0
  5014  00DD46  6E01               	movwf	?__div_to_l_,c
  5015  00DD48  0E00               	movlw	0
  5016  00DD4A  6E02               	movwf	?__div_to_l_+1,c
  5017  00DD4C  0E00               	movlw	0
  5018  00DD4E  6E03               	movwf	?__div_to_l_+2,c
  5019  00DD50  0E00               	movlw	0
  5020  00DD52  6E04               	movwf	?__div_to_l_+3,c
  5021  00DD54  0012               	return	
  5022  00DD56                     l514:
  5023  00DD56  90D8               	bcf	status,0,c
  5024  00DD58  320A               	rrcf	__div_to_l_@quot+3,f,c
  5025  00DD5A  3209               	rrcf	__div_to_l_@quot+2,f,c
  5026  00DD5C  3208               	rrcf	__div_to_l_@quot+1,f,c
  5027  00DD5E  3207               	rrcf	__div_to_l_@quot,f,c
  5028  00DD60  3E0C               	incfsz	__div_to_l_@exp1,f,c
  5029  00DD62  D7F9               	goto	l514
  5030  00DD64  D015               	goto	u2900
  5031  00DD66                     l513:
  5032  00DD66  0E1F               	movlw	31
  5033  00DD68  640C               	cpfsgt	__div_to_l_@exp1,c
  5034  00DD6A  D00F               	goto	l519
  5035  00DD6C  0E00               	movlw	0
  5036  00DD6E  6E01               	movwf	?__div_to_l_,c
  5037  00DD70  0E00               	movlw	0
  5038  00DD72  6E02               	movwf	?__div_to_l_+1,c
  5039  00DD74  0E00               	movlw	0
  5040  00DD76  6E03               	movwf	?__div_to_l_+2,c
  5041  00DD78  0E00               	movlw	0
  5042  00DD7A  6E04               	movwf	?__div_to_l_+3,c
  5043  00DD7C  0012               	return	
  5044  00DD7E  90D8               	bcf	status,0,c
  5045  00DD80  3607               	rlcf	__div_to_l_@quot,f,c
  5046  00DD82  3608               	rlcf	__div_to_l_@quot+1,f,c
  5047  00DD84  3609               	rlcf	__div_to_l_@quot+2,f,c
  5048  00DD86  360A               	rlcf	__div_to_l_@quot+3,f,c
  5049  00DD88  060C               	decf	__div_to_l_@exp1,f,c
  5050  00DD8A                     l519:
  5051  00DD8A  500C               	movf	__div_to_l_@exp1,w,c
  5052  00DD8C  A4D8               	btfss	status,2,c
  5053  00DD8E  D7F7               	goto	l520
  5054  00DD90                     u2900:
  5055  00DD90  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5056  00DD94  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5057  00DD98  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5058  00DD9C  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5059  00DDA0  0012               	return		;funcret
  5060  00DDA2                     __end_of__div_to_l_:
  5061                           	opt stack 0
  5062                           tblptru	equ	0xFF8
  5063                           tblptrh	equ	0xFF7
  5064                           tblptrl	equ	0xFF6
  5065                           tablat	equ	0xFF5
  5066                           prodh	equ	0xFF4
  5067                           prodl	equ	0xFF3
  5068                           wreg	equ	0xFE8
  5069                           postinc2	equ	0xFDE
  5070                           postdec2	equ	0xFDD
  5071                           fsr2h	equ	0xFDA
  5072                           fsr2l	equ	0xFD9
  5073                           status	equ	0xFD8
  5074                           
  5075 ;; *************** function ___llmod *****************
  5076 ;; Defined at:
  5077 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/llmod.c"
  5078 ;; Parameters:    Size  Location     Type
  5079 ;;  dividend        4   13[COMRAM] unsigned long 
  5080 ;;  divisor         4   17[COMRAM] unsigned long 
  5081 ;; Auto vars:     Size  Location     Type
  5082 ;;  counter         1   21[COMRAM] unsigned char 
  5083 ;; Return value:  Size  Location     Type
  5084 ;;                  4   13[COMRAM] unsigned long 
  5085 ;; Registers used:
  5086 ;;		wreg, status,2, status,0
  5087 ;; Tracked objects:
  5088 ;;		On entry : 0/0
  5089 ;;		On exit  : 0/0
  5090 ;;		Unchanged: 0/0
  5091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5092 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5095 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5096 ;;Total ram usage:        9 bytes
  5097 ;; Hardware stack levels used:    1
  5098 ;; This function calls:
  5099 ;;		Nothing
  5100 ;; This function is called by:
  5101 ;;		_printf
  5102 ;; This function uses a non-reentrant model
  5103 ;;
  5104                           
  5105                           	psect	text11
  5106  00D1F6                     __ptext11:
  5107                           	opt stack 0
  5108  00D1F6                     ___llmod:
  5109                           	opt stack 29
  5110                           
  5111                           ;incstack = 0
  5112  00D1F6  5012               	movf	___llmod@divisor,w,c
  5113  00D1F8  1013               	iorwf	___llmod@divisor+1,w,c
  5114  00D1FA  1014               	iorwf	___llmod@divisor+2,w,c
  5115  00D1FC  1015               	iorwf	___llmod@divisor+3,w,c
  5116  00D1FE  B4D8               	btfsc	status,2,c
  5117  00D200  D024               	goto	l707
  5118  00D202  0E01               	movlw	1
  5119  00D204  6E16               	movwf	___llmod@counter,c
  5120  00D206  D006               	goto	l702
  5121  00D208  90D8               	bcf	status,0,c
  5122  00D20A  3612               	rlcf	___llmod@divisor,f,c
  5123  00D20C  3613               	rlcf	___llmod@divisor+1,f,c
  5124  00D20E  3614               	rlcf	___llmod@divisor+2,f,c
  5125  00D210  3615               	rlcf	___llmod@divisor+3,f,c
  5126  00D212  2A16               	incf	___llmod@counter,f,c
  5127  00D214                     l702:
  5128  00D214  AE15               	btfss	___llmod@divisor+3,7,c
  5129  00D216  D7F8               	goto	l703
  5130  00D218                     u2950:
  5131  00D218  5012               	movf	___llmod@divisor,w,c
  5132  00D21A  5C0E               	subwf	___llmod@dividend,w,c
  5133  00D21C  5013               	movf	___llmod@divisor+1,w,c
  5134  00D21E  580F               	subwfb	___llmod@dividend+1,w,c
  5135  00D220  5014               	movf	___llmod@divisor+2,w,c
  5136  00D222  5810               	subwfb	___llmod@dividend+2,w,c
  5137  00D224  5015               	movf	___llmod@divisor+3,w,c
  5138  00D226  5811               	subwfb	___llmod@dividend+3,w,c
  5139  00D228  A0D8               	btfss	status,0,c
  5140  00D22A  D008               	goto	l706
  5141  00D22C  5012               	movf	___llmod@divisor,w,c
  5142  00D22E  5E0E               	subwf	___llmod@dividend,f,c
  5143  00D230  5013               	movf	___llmod@divisor+1,w,c
  5144  00D232  5A0F               	subwfb	___llmod@dividend+1,f,c
  5145  00D234  5014               	movf	___llmod@divisor+2,w,c
  5146  00D236  5A10               	subwfb	___llmod@dividend+2,f,c
  5147  00D238  5015               	movf	___llmod@divisor+3,w,c
  5148  00D23A  5A11               	subwfb	___llmod@dividend+3,f,c
  5149  00D23C                     l706:
  5150  00D23C  90D8               	bcf	status,0,c
  5151  00D23E  3215               	rrcf	___llmod@divisor+3,f,c
  5152  00D240  3214               	rrcf	___llmod@divisor+2,f,c
  5153  00D242  3213               	rrcf	___llmod@divisor+1,f,c
  5154  00D244  3212               	rrcf	___llmod@divisor,f,c
  5155  00D246  2E16               	decfsz	___llmod@counter,f,c
  5156  00D248  D7E7               	goto	u2950
  5157  00D24A                     l707:
  5158  00D24A  C00E  F00E         	movff	___llmod@dividend,?___llmod
  5159  00D24E  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  5160  00D252  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  5161  00D256  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  5162  00D25A  0012               	return		;funcret
  5163  00D25C                     __end_of___llmod:
  5164                           	opt stack 0
  5165                           tblptru	equ	0xFF8
  5166                           tblptrh	equ	0xFF7
  5167                           tblptrl	equ	0xFF6
  5168                           tablat	equ	0xFF5
  5169                           prodh	equ	0xFF4
  5170                           prodl	equ	0xFF3
  5171                           wreg	equ	0xFE8
  5172                           postinc2	equ	0xFDE
  5173                           postdec2	equ	0xFDD
  5174                           fsr2h	equ	0xFDA
  5175                           fsr2l	equ	0xFD9
  5176                           status	equ	0xFD8
  5177                           
  5178 ;; *************** function ___lldiv *****************
  5179 ;; Defined at:
  5180 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/lldiv.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;  dividend        4    0[COMRAM] unsigned long 
  5183 ;;  divisor         4    4[COMRAM] unsigned long 
  5184 ;; Auto vars:     Size  Location     Type
  5185 ;;  quotient        4    8[COMRAM] unsigned long 
  5186 ;;  counter         1   12[COMRAM] unsigned char 
  5187 ;; Return value:  Size  Location     Type
  5188 ;;                  4    0[COMRAM] unsigned long 
  5189 ;; Registers used:
  5190 ;;		wreg, status,2, status,0
  5191 ;; Tracked objects:
  5192 ;;		On entry : 0/0
  5193 ;;		On exit  : 0/0
  5194 ;;		Unchanged: 0/0
  5195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5196 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5197 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5199 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5200 ;;Total ram usage:       13 bytes
  5201 ;; Hardware stack levels used:    1
  5202 ;; This function calls:
  5203 ;;		Nothing
  5204 ;; This function is called by:
  5205 ;;		_printf
  5206 ;; This function uses a non-reentrant model
  5207 ;;
  5208                           
  5209                           	psect	text12
  5210  00D344                     __ptext12:
  5211                           	opt stack 0
  5212  00D344                     ___lldiv:
  5213                           	opt stack 29
  5214                           
  5215                           ;incstack = 0
  5216  00D344  0E00               	movlw	0
  5217  00D346  6E09               	movwf	___lldiv@quotient,c
  5218  00D348  0E00               	movlw	0
  5219  00D34A  6E0A               	movwf	___lldiv@quotient+1,c
  5220  00D34C  0E00               	movlw	0
  5221  00D34E  6E0B               	movwf	___lldiv@quotient+2,c
  5222  00D350  0E00               	movlw	0
  5223  00D352  6E0C               	movwf	___lldiv@quotient+3,c
  5224  00D354  5005               	movf	___lldiv@divisor,w,c
  5225  00D356  1006               	iorwf	___lldiv@divisor+1,w,c
  5226  00D358  1007               	iorwf	___lldiv@divisor+2,w,c
  5227  00D35A  1008               	iorwf	___lldiv@divisor+3,w,c
  5228  00D35C  B4D8               	btfsc	status,2,c
  5229  00D35E  D02A               	goto	l697
  5230  00D360  0E01               	movlw	1
  5231  00D362  6E0D               	movwf	___lldiv@counter,c
  5232  00D364  D006               	goto	l692
  5233  00D366  90D8               	bcf	status,0,c
  5234  00D368  3605               	rlcf	___lldiv@divisor,f,c
  5235  00D36A  3606               	rlcf	___lldiv@divisor+1,f,c
  5236  00D36C  3607               	rlcf	___lldiv@divisor+2,f,c
  5237  00D36E  3608               	rlcf	___lldiv@divisor+3,f,c
  5238  00D370  2A0D               	incf	___lldiv@counter,f,c
  5239  00D372                     l692:
  5240  00D372  AE08               	btfss	___lldiv@divisor+3,7,c
  5241  00D374  D7F8               	goto	l693
  5242  00D376                     u2920:
  5243  00D376  90D8               	bcf	status,0,c
  5244  00D378  3609               	rlcf	___lldiv@quotient,f,c
  5245  00D37A  360A               	rlcf	___lldiv@quotient+1,f,c
  5246  00D37C  360B               	rlcf	___lldiv@quotient+2,f,c
  5247  00D37E  360C               	rlcf	___lldiv@quotient+3,f,c
  5248  00D380  5005               	movf	___lldiv@divisor,w,c
  5249  00D382  5C01               	subwf	___lldiv@dividend,w,c
  5250  00D384  5006               	movf	___lldiv@divisor+1,w,c
  5251  00D386  5802               	subwfb	___lldiv@dividend+1,w,c
  5252  00D388  5007               	movf	___lldiv@divisor+2,w,c
  5253  00D38A  5803               	subwfb	___lldiv@dividend+2,w,c
  5254  00D38C  5008               	movf	___lldiv@divisor+3,w,c
  5255  00D38E  5804               	subwfb	___lldiv@dividend+3,w,c
  5256  00D390  A0D8               	btfss	status,0,c
  5257  00D392  D009               	goto	l696
  5258  00D394  5005               	movf	___lldiv@divisor,w,c
  5259  00D396  5E01               	subwf	___lldiv@dividend,f,c
  5260  00D398  5006               	movf	___lldiv@divisor+1,w,c
  5261  00D39A  5A02               	subwfb	___lldiv@dividend+1,f,c
  5262  00D39C  5007               	movf	___lldiv@divisor+2,w,c
  5263  00D39E  5A03               	subwfb	___lldiv@dividend+2,f,c
  5264  00D3A0  5008               	movf	___lldiv@divisor+3,w,c
  5265  00D3A2  5A04               	subwfb	___lldiv@dividend+3,f,c
  5266  00D3A4  8009               	bsf	___lldiv@quotient,0,c
  5267  00D3A6                     l696:
  5268  00D3A6  90D8               	bcf	status,0,c
  5269  00D3A8  3208               	rrcf	___lldiv@divisor+3,f,c
  5270  00D3AA  3207               	rrcf	___lldiv@divisor+2,f,c
  5271  00D3AC  3206               	rrcf	___lldiv@divisor+1,f,c
  5272  00D3AE  3205               	rrcf	___lldiv@divisor,f,c
  5273  00D3B0  2E0D               	decfsz	___lldiv@counter,f,c
  5274  00D3B2  D7E1               	goto	u2920
  5275  00D3B4                     l697:
  5276  00D3B4  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5277  00D3B8  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5278  00D3BC  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5279  00D3C0  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5280  00D3C4  0012               	return		;funcret
  5281  00D3C6                     __end_of___lldiv:
  5282                           	opt stack 0
  5283                           tblptru	equ	0xFF8
  5284                           tblptrh	equ	0xFF7
  5285                           tblptrl	equ	0xFF6
  5286                           tablat	equ	0xFF5
  5287                           prodh	equ	0xFF4
  5288                           prodl	equ	0xFF3
  5289                           wreg	equ	0xFE8
  5290                           postinc2	equ	0xFDE
  5291                           postdec2	equ	0xFDD
  5292                           fsr2h	equ	0xFDA
  5293                           fsr2l	equ	0xFD9
  5294                           status	equ	0xFD8
  5295                           
  5296 ;; *************** function _pow *****************
  5297 ;; Defined at:
  5298 ;;		line 5 in file "/opt/microchip/xc8/v1.44/sources/common/pow.c"
  5299 ;; Parameters:    Size  Location     Type
  5300 ;;  x               3    0[BANK0 ] unsigned long 
  5301 ;;  y               3    3[BANK0 ] unsigned long 
  5302 ;; Auto vars:     Size  Location     Type
  5303 ;;  yi              4   13[BANK0 ] unsigned long 
  5304 ;;  sign            1   12[BANK0 ] unsigned char 
  5305 ;; Return value:  Size  Location     Type
  5306 ;;                  3    0[BANK0 ] unsigned char 
  5307 ;; Registers used:
  5308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5309 ;; Tracked objects:
  5310 ;;		On entry : 0/0
  5311 ;;		On exit  : 0/0
  5312 ;;		Unchanged: 0/0
  5313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5314 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5315 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5317 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5318 ;;Total ram usage:       17 bytes
  5319 ;; Hardware stack levels used:    1
  5320 ;; Hardware stack levels required when called:    4
  5321 ;; This function calls:
  5322 ;;		___ftge
  5323 ;;		___ftmul
  5324 ;;		___ftneg
  5325 ;;		___fttol
  5326 ;;		___lltoft
  5327 ;;		_exp
  5328 ;;		_log
  5329 ;; This function is called by:
  5330 ;;		_main
  5331 ;; This function uses a non-reentrant model
  5332 ;;
  5333                           
  5334                           	psect	text13
  5335  00DED4                     __ptext13:
  5336                           	opt stack 0
  5337  00DED4                     _pow:
  5338                           	opt stack 26
  5339                           
  5340                           ;incstack = 0
  5341  00DED4  0E00               	movlw	0
  5342  00DED6  0100               	movlb	0	; () banked
  5343  00DED8  6F6C               	movwf	pow@sign& (0+255),b
  5344                           
  5345                           ; BSR set to: 0
  5346  00DEDA  5160               	movf	pow@x& (0+255),w,b
  5347  00DEDC  1161               	iorwf	(pow@x+1)& (0+255),w,b
  5348  00DEDE  1162               	iorwf	(pow@x+2)& (0+255),w,b
  5349  00DEE0  A4D8               	btfss	status,2,c
  5350  00DEE2  D01D               	goto	l775
  5351                           
  5352                           ; BSR set to: 0
  5353  00DEE4  0E00               	movlw	0
  5354  00DEE6  6E07               	movwf	___ftge@ff1,c
  5355  00DEE8  0E00               	movlw	0
  5356  00DEEA  6E08               	movwf	___ftge@ff1+1,c
  5357  00DEEC  0E00               	movlw	0
  5358  00DEEE  6E09               	movwf	___ftge@ff1+2,c
  5359  00DEF0  C063  F00A         	movff	pow@y,___ftge@ff2
  5360  00DEF4  C064  F00B         	movff	pow@y+1,___ftge@ff2+1
  5361  00DEF8  C065  F00C         	movff	pow@y+2,___ftge@ff2+2
  5362  00DEFC  EC25  F06A         	call	___ftge	;wreg free
  5363  00DF00  A0D8               	btfss	status,0,c
  5364  00DF02  D005               	goto	l776
  5365  00DF04  0E00               	movlw	0
  5366  00DF06  0100               	movlb	0	; () banked
  5367  00DF08  6FE2               	movwf	(_errno+1)& (0+255),b
  5368  00DF0A  0E21               	movlw	33
  5369  00DF0C  6FE1               	movwf	_errno& (0+255),b
  5370  00DF0E                     l776:
  5371  00DF0E  0E00               	movlw	0
  5372  00DF10  0100               	movlb	0	; () banked
  5373  00DF12  6F60               	movwf	?_pow& (0+255),b
  5374  00DF14  0E00               	movlw	0
  5375  00DF16  6F61               	movwf	(?_pow+1)& (0+255),b
  5376  00DF18  0E00               	movlw	0
  5377  00DF1A  6F62               	movwf	(?_pow+2)& (0+255),b
  5378                           
  5379                           ; BSR set to: 0
  5380  00DF1C  0012               	return	
  5381  00DF1E                     l775:
  5382                           
  5383                           ; BSR set to: 0
  5384                           
  5385                           ; BSR set to: 0
  5386  00DF1E  5163               	movf	pow@y& (0+255),w,b
  5387  00DF20  1164               	iorwf	(pow@y+1)& (0+255),w,b
  5388  00DF22  1165               	iorwf	(pow@y+2)& (0+255),w,b
  5389  00DF24  A4D8               	btfss	status,2,c
  5390  00DF26  D007               	goto	l778
  5391                           
  5392                           ; BSR set to: 0
  5393  00DF28  0E00               	movlw	0
  5394  00DF2A  6F60               	movwf	?_pow& (0+255),b
  5395  00DF2C  0E80               	movlw	128
  5396  00DF2E  6F61               	movwf	(?_pow+1)& (0+255),b
  5397  00DF30  0E3F               	movlw	63
  5398  00DF32  6F62               	movwf	(?_pow+2)& (0+255),b
  5399                           
  5400                           ; BSR set to: 0
  5401  00DF34  0012               	return	
  5402  00DF36                     l778:
  5403                           
  5404                           ; BSR set to: 0
  5405                           
  5406                           ; BSR set to: 0
  5407  00DF36  AF62               	btfss	(pow@x+2)& (0+255),7,b
  5408  00DF38  D041               	goto	l779
  5409                           
  5410                           ; BSR set to: 0
  5411  00DF3A  C063  F02F         	movff	pow@y,___fttol@f1
  5412  00DF3E  C064  F030         	movff	pow@y+1,___fttol@f1+1
  5413  00DF42  C065  F031         	movff	pow@y+2,___fttol@f1+2
  5414  00DF46  EC34  F06D         	call	___fttol	;wreg free
  5415  00DF4A  C02F  F06D         	movff	?___fttol,pow@yi
  5416  00DF4E  C030  F06E         	movff	?___fttol+1,pow@yi+1
  5417  00DF52  C031  F06F         	movff	?___fttol+2,pow@yi+2
  5418  00DF56  C032  F070         	movff	?___fttol+3,pow@yi+3
  5419  00DF5A  C06D  F009         	movff	pow@yi,___lltoft@c
  5420  00DF5E  C06E  F00A         	movff	pow@yi+1,___lltoft@c+1
  5421  00DF62  C06F  F00B         	movff	pow@yi+2,___lltoft@c+2
  5422  00DF66  C070  F00C         	movff	pow@yi+3,___lltoft@c+3
  5423  00DF6A  ECCD  F068         	call	___lltoft	;wreg free
  5424  00DF6E  0100               	movlb	0	; () banked
  5425  00DF70  5163               	movf	pow@y& (0+255),w,b
  5426  00DF72  1809               	xorwf	?___lltoft,w,c
  5427  00DF74  E107               	bnz	u3130
  5428  00DF76  5164               	movf	(pow@y+1)& (0+255),w,b
  5429  00DF78  180A               	xorwf	?___lltoft+1,w,c
  5430  00DF7A  E104               	bnz	u3130
  5431  00DF7C  5165               	movf	(pow@y+2)& (0+255),w,b
  5432  00DF7E  180B               	xorwf	?___lltoft+2,w,c
  5433  00DF80  B4D8               	btfsc	status,2,c
  5434  00DF82  D00B               	goto	l780
  5435  00DF84                     u3130:
  5436                           
  5437                           ; BSR set to: 0
  5438  00DF84  0E00               	movlw	0
  5439  00DF86  6FE2               	movwf	(_errno+1)& (0+255),b
  5440  00DF88  0E21               	movlw	33
  5441  00DF8A  6FE1               	movwf	_errno& (0+255),b
  5442  00DF8C  0E00               	movlw	0
  5443  00DF8E  6F60               	movwf	?_pow& (0+255),b
  5444  00DF90  0E00               	movlw	0
  5445  00DF92  6F61               	movwf	(?_pow+1)& (0+255),b
  5446  00DF94  0E00               	movlw	0
  5447  00DF96  6F62               	movwf	(?_pow+2)& (0+255),b
  5448                           
  5449                           ; BSR set to: 0
  5450  00DF98  0012               	return	
  5451  00DF9A                     l780:
  5452                           
  5453                           ; BSR set to: 0
  5454                           
  5455                           ; BSR set to: 0
  5456  00DF9A  516D               	movf	pow@yi& (0+255),w,b
  5457  00DF9C  0B01               	andlw	1
  5458  00DF9E  6F6C               	movwf	pow@sign& (0+255),b
  5459                           
  5460                           ; BSR set to: 0
  5461  00DFA0  C060  F001         	movff	pow@x,___ftneg@f1
  5462  00DFA4  C061  F002         	movff	pow@x+1,___ftneg@f1+1
  5463  00DFA8  C062  F003         	movff	pow@x+2,___ftneg@f1+2
  5464  00DFAC  EC1D  F068         	call	___ftneg	;wreg free
  5465  00DFB0  C001  F060         	movff	?___ftneg,pow@x
  5466  00DFB4  C002  F061         	movff	?___ftneg+1,pow@x+1
  5467  00DFB8  C003  F062         	movff	?___ftneg+2,pow@x+2
  5468  00DFBC                     l779:
  5469  00DFBC  C060  F04F         	movff	pow@x,log@x
  5470  00DFC0  C061  F050         	movff	pow@x+1,log@x+1
  5471  00DFC4  C062  F051         	movff	pow@x+2,log@x+2
  5472  00DFC8  ECAE  F06D         	call	_log	;wreg free
  5473  00DFCC  C04F  F066         	movff	?_log,_pow$1344
  5474  00DFD0  C050  F067         	movff	?_log+1,_pow$1344+1
  5475  00DFD4  C051  F068         	movff	?_log+2,_pow$1344+2
  5476  00DFD8  C066  F019         	movff	_pow$1344,___ftmul@f1
  5477  00DFDC  C067  F01A         	movff	_pow$1344+1,___ftmul@f1+1
  5478  00DFE0  C068  F01B         	movff	_pow$1344+2,___ftmul@f1+2
  5479  00DFE4  C063  F01C         	movff	pow@y,___ftmul@f2
  5480  00DFE8  C064  F01D         	movff	pow@y+1,___ftmul@f2+1
  5481  00DFEC  C065  F01E         	movff	pow@y+2,___ftmul@f2+2
  5482  00DFF0  ECBA  F06C         	call	___ftmul	;wreg free
  5483  00DFF4  C019  F069         	movff	?___ftmul,_pow$1345
  5484  00DFF8  C01A  F06A         	movff	?___ftmul+1,_pow$1345+1
  5485  00DFFC  C01B  F06B         	movff	?___ftmul+2,_pow$1345+2
  5486  00E000  C069  F056         	movff	_pow$1345,exp@x
  5487  00E004  C06A  F057         	movff	_pow$1345+1,exp@x+1
  5488  00E008  C06B  F058         	movff	_pow$1345+2,exp@x+2
  5489  00E00C  ECA9  F072         	call	_exp	;wreg free
  5490  00E010  C056  F060         	movff	?_exp,pow@x
  5491  00E014  C057  F061         	movff	?_exp+1,pow@x+1
  5492  00E018  C058  F062         	movff	?_exp+2,pow@x+2
  5493  00E01C  0100               	movlb	0	; () banked
  5494  00E01E  516C               	movf	pow@sign& (0+255),w,b
  5495  00E020  B4D8               	btfsc	status,2,c
  5496  00E022  D00F               	goto	l781
  5497                           
  5498                           ; BSR set to: 0
  5499  00E024  C060  F001         	movff	pow@x,___ftneg@f1
  5500  00E028  C061  F002         	movff	pow@x+1,___ftneg@f1+1
  5501  00E02C  C062  F003         	movff	pow@x+2,___ftneg@f1+2
  5502  00E030  EC1D  F068         	call	___ftneg	;wreg free
  5503  00E034  C001  F060         	movff	?___ftneg,?_pow
  5504  00E038  C002  F061         	movff	?___ftneg+1,?_pow+1
  5505  00E03C  C003  F062         	movff	?___ftneg+2,?_pow+2
  5506  00E040  0012               	return	
  5507  00E042                     l781:
  5508                           
  5509                           ; BSR set to: 0
  5510  00E042  C060  F060         	movff	pow@x,?_pow
  5511  00E046  C061  F061         	movff	pow@x+1,?_pow+1
  5512  00E04A  C062  F062         	movff	pow@x+2,?_pow+2
  5513  00E04E  0012               	return		;funcret
  5514  00E050                     __end_of_pow:
  5515                           	opt stack 0
  5516                           tblptru	equ	0xFF8
  5517                           tblptrh	equ	0xFF7
  5518                           tblptrl	equ	0xFF6
  5519                           tablat	equ	0xFF5
  5520                           prodh	equ	0xFF4
  5521                           prodl	equ	0xFF3
  5522                           wreg	equ	0xFE8
  5523                           postinc2	equ	0xFDE
  5524                           postdec2	equ	0xFDD
  5525                           fsr2h	equ	0xFDA
  5526                           fsr2l	equ	0xFD9
  5527                           status	equ	0xFD8
  5528                           
  5529 ;; *************** function _log *****************
  5530 ;; Defined at:
  5531 ;;		line 5 in file "/opt/microchip/xc8/v1.44/sources/common/log.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;  x               3   78[COMRAM] unsigned char 
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;  exponent        2   81[COMRAM] int 
  5536 ;; Return value:  Size  Location     Type
  5537 ;;                  3   78[COMRAM] int 
  5538 ;; Registers used:
  5539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5545 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5546 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5548 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5549 ;;Total ram usage:        5 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; Hardware stack levels required when called:    3
  5552 ;; This function calls:
  5553 ;;		___awtoft
  5554 ;;		___ftadd
  5555 ;;		___ftmul
  5556 ;;		_eval_poly
  5557 ;;		_frexp
  5558 ;; This function is called by:
  5559 ;;		_pow
  5560 ;; This function uses a non-reentrant model
  5561 ;;
  5562                           
  5563                           	psect	text14
  5564  00DB5C                     __ptext14:
  5565                           	opt stack 0
  5566  00DB5C                     _log:
  5567                           	opt stack 26
  5568                           
  5569                           ;incstack = 0
  5570  00DB5C  AE51               	btfss	log@x+2,7,c
  5571  00DB5E  D00C               	goto	l988
  5572  00DB60  0E00               	movlw	0
  5573  00DB62  0100               	movlb	0	; () banked
  5574  00DB64  6FE2               	movwf	(_errno+1)& (0+255),b
  5575  00DB66  0E21               	movlw	33
  5576  00DB68  6FE1               	movwf	_errno& (0+255),b
  5577  00DB6A  0E00               	movlw	0
  5578  00DB6C  6E4F               	movwf	?_log,c
  5579  00DB6E  0E00               	movlw	0
  5580  00DB70  6E50               	movwf	?_log+1,c
  5581  00DB72  0E00               	movlw	0
  5582  00DB74  6E51               	movwf	?_log+2,c
  5583                           
  5584                           ; BSR set to: 0
  5585  00DB76  0012               	return	
  5586  00DB78                     l988:
  5587                           
  5588                           ; BSR set to: 0
  5589  00DB78  504F               	movf	log@x,w,c
  5590  00DB7A  1050               	iorwf	log@x+1,w,c
  5591  00DB7C  1051               	iorwf	log@x+2,w,c
  5592  00DB7E  A4D8               	btfss	status,2,c
  5593  00DB80  D00C               	goto	l990
  5594  00DB82  0E00               	movlw	0
  5595  00DB84  0100               	movlb	0	; () banked
  5596  00DB86  6FE2               	movwf	(_errno+1)& (0+255),b
  5597  00DB88  0E22               	movlw	34
  5598  00DB8A  6FE1               	movwf	_errno& (0+255),b
  5599  00DB8C  0E00               	movlw	0
  5600  00DB8E  6E4F               	movwf	?_log,c
  5601  00DB90  0E00               	movlw	0
  5602  00DB92  6E50               	movwf	?_log+1,c
  5603  00DB94  0E00               	movlw	0
  5604  00DB96  6E51               	movwf	?_log+2,c
  5605                           
  5606                           ; BSR set to: 0
  5607  00DB98  0012               	return	
  5608  00DB9A                     l990:
  5609                           
  5610                           ; BSR set to: 0
  5611  00DB9A  0E00               	movlw	0
  5612  00DB9C  6E1C               	movwf	___ftmul@f2,c
  5613  00DB9E  0E00               	movlw	0
  5614  00DBA0  6E1D               	movwf	___ftmul@f2+1,c
  5615  00DBA2  0E40               	movlw	64
  5616  00DBA4  6E1E               	movwf	___ftmul@f2+2,c
  5617  00DBA6  0E52               	movlw	low log@exponent
  5618  00DBA8  6E04               	movwf	frexp@eptr,c
  5619  00DBAA  0E00               	movlw	high log@exponent
  5620  00DBAC  6E05               	movwf	frexp@eptr+1,c
  5621  00DBAE  C04F  F001         	movff	log@x,frexp@value
  5622  00DBB2  C050  F002         	movff	log@x+1,frexp@value+1
  5623  00DBB6  C051  F003         	movff	log@x+2,frexp@value+2
  5624  00DBBA  EC6D  F06A         	call	_frexp	;wreg free
  5625  00DBBE  C001  F019         	movff	?_frexp,___ftmul@f1
  5626  00DBC2  C002  F01A         	movff	?_frexp+1,___ftmul@f1+1
  5627  00DBC6  C003  F01B         	movff	?_frexp+2,___ftmul@f1+2
  5628  00DBCA  ECBA  F06C         	call	___ftmul	;wreg free
  5629  00DBCE  C019  F037         	movff	?___ftmul,___ftadd@f1
  5630  00DBD2  C01A  F038         	movff	?___ftmul+1,___ftadd@f1+1
  5631  00DBD6  C01B  F039         	movff	?___ftmul+2,___ftadd@f1+2
  5632  00DBDA  0E00               	movlw	0
  5633  00DBDC  6E3A               	movwf	___ftadd@f2,c
  5634  00DBDE  0E80               	movlw	128
  5635  00DBE0  6E3B               	movwf	___ftadd@f2+1,c
  5636  00DBE2  0EBF               	movlw	191
  5637  00DBE4  6E3C               	movwf	___ftadd@f2+2,c
  5638  00DBE6  ECF1  F070         	call	___ftadd	;wreg free
  5639  00DBEA  C037  F04F         	movff	?___ftadd,log@x
  5640  00DBEE  C038  F050         	movff	?___ftadd+1,log@x+1
  5641  00DBF2  C039  F051         	movff	?___ftadd+2,log@x+2
  5642  00DBF6  0652               	decf	log@exponent,f,c
  5643  00DBF8  A0D8               	btfss	status,0,c
  5644  00DBFA  0653               	decf	log@exponent+1,f,c
  5645  00DBFC  C04F  F043         	movff	log@x,eval_poly@x
  5646  00DC00  C050  F044         	movff	log@x+1,eval_poly@x+1
  5647  00DC04  C051  F045         	movff	log@x+2,eval_poly@x+2
  5648  00DC08  0E2F               	movlw	low log@coeff
  5649  00DC0A  6E46               	movwf	eval_poly@d,c
  5650  00DC0C  0EFF               	movlw	high log@coeff
  5651  00DC0E  6E47               	movwf	eval_poly@d+1,c
  5652  00DC10  0E00               	movlw	0
  5653  00DC12  6E49               	movwf	eval_poly@n+1,c
  5654  00DC14  0E08               	movlw	8
  5655  00DC16  6E48               	movwf	eval_poly@n,c
  5656  00DC18  EC6F  F06B         	call	_eval_poly	;wreg free
  5657  00DC1C  C043  F04F         	movff	?_eval_poly,log@x
  5658  00DC20  C044  F050         	movff	?_eval_poly+1,log@x+1
  5659  00DC24  C045  F051         	movff	?_eval_poly+2,log@x+2
  5660  00DC28  0E72               	movlw	114
  5661  00DC2A  6E1C               	movwf	___ftmul@f2,c
  5662  00DC2C  0E31               	movlw	49
  5663  00DC2E  6E1D               	movwf	___ftmul@f2+1,c
  5664  00DC30  0E3F               	movlw	63
  5665  00DC32  6E1E               	movwf	___ftmul@f2+2,c
  5666  00DC34  C052  F015         	movff	log@exponent,___awtoft@c
  5667  00DC38  C053  F016         	movff	log@exponent+1,___awtoft@c+1
  5668  00DC3C  EC72  F068         	call	___awtoft	;wreg free
  5669  00DC40  C015  F019         	movff	?___awtoft,___ftmul@f1
  5670  00DC44  C016  F01A         	movff	?___awtoft+1,___ftmul@f1+1
  5671  00DC48  C017  F01B         	movff	?___awtoft+2,___ftmul@f1+2
  5672  00DC4C  ECBA  F06C         	call	___ftmul	;wreg free
  5673  00DC50  C019  F037         	movff	?___ftmul,___ftadd@f1
  5674  00DC54  C01A  F038         	movff	?___ftmul+1,___ftadd@f1+1
  5675  00DC58  C01B  F039         	movff	?___ftmul+2,___ftadd@f1+2
  5676  00DC5C  C04F  F03A         	movff	log@x,___ftadd@f2
  5677  00DC60  C050  F03B         	movff	log@x+1,___ftadd@f2+1
  5678  00DC64  C051  F03C         	movff	log@x+2,___ftadd@f2+2
  5679  00DC68  ECF1  F070         	call	___ftadd	;wreg free
  5680  00DC6C  C037  F04F         	movff	?___ftadd,?_log
  5681  00DC70  C038  F050         	movff	?___ftadd+1,?_log+1
  5682  00DC74  C039  F051         	movff	?___ftadd+2,?_log+2
  5683  00DC78  0012               	return	
  5684  00DC7A                     __end_of_log:
  5685                           	opt stack 0
  5686                           tblptru	equ	0xFF8
  5687                           tblptrh	equ	0xFF7
  5688                           tblptrl	equ	0xFF6
  5689                           tablat	equ	0xFF5
  5690                           prodh	equ	0xFF4
  5691                           prodl	equ	0xFF3
  5692                           wreg	equ	0xFE8
  5693                           postinc2	equ	0xFDE
  5694                           postdec2	equ	0xFDD
  5695                           fsr2h	equ	0xFDA
  5696                           fsr2l	equ	0xFD9
  5697                           status	equ	0xFD8
  5698                           
  5699 ;; *************** function _exp *****************
  5700 ;; Defined at:
  5701 ;;		line 12 in file "/opt/microchip/xc8/v1.44/sources/common/exp.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;  x               3   85[COMRAM] int 
  5704 ;; Auto vars:     Size  Location     Type
  5705 ;;  exponent        2   91[COMRAM] int 
  5706 ;;  sign            1   93[COMRAM] unsigned char 
  5707 ;; Return value:  Size  Location     Type
  5708 ;;                  3   85[COMRAM] unsigned char 
  5709 ;; Registers used:
  5710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5711 ;; Tracked objects:
  5712 ;;		On entry : 0/0
  5713 ;;		On exit  : 0/0
  5714 ;;		Unchanged: 0/0
  5715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5716 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5717 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5719 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5720 ;;Total ram usage:        9 bytes
  5721 ;; Hardware stack levels used:    1
  5722 ;; Hardware stack levels required when called:    3
  5723 ;; This function calls:
  5724 ;;		___awtoft
  5725 ;;		___ftdiv
  5726 ;;		___ftge
  5727 ;;		___ftmul
  5728 ;;		___ftneg
  5729 ;;		___ftsub
  5730 ;;		___fttol
  5731 ;;		_eval_poly
  5732 ;;		_floor
  5733 ;;		_ldexp
  5734 ;; This function is called by:
  5735 ;;		_pow
  5736 ;; This function uses a non-reentrant model
  5737 ;;
  5738                           
  5739                           	psect	text15
  5740  00E552                     __ptext15:
  5741                           	opt stack 0
  5742  00E552                     _exp:
  5743                           	opt stack 26
  5744                           
  5745                           ;incstack = 0
  5746  00E552  5056               	movf	exp@x,w,c
  5747  00E554  1057               	iorwf	exp@x+1,w,c
  5748  00E556  1058               	iorwf	exp@x+2,w,c
  5749  00E558  A4D8               	btfss	status,2,c
  5750  00E55A  D007               	goto	l946
  5751  00E55C  0E00               	movlw	0
  5752  00E55E  6E56               	movwf	?_exp,c
  5753  00E560  0E80               	movlw	128
  5754  00E562  6E57               	movwf	?_exp+1,c
  5755  00E564  0E3F               	movlw	63
  5756  00E566  6E58               	movwf	?_exp+2,c
  5757  00E568  0012               	return	
  5758  00E56A                     l946:
  5759  00E56A  0E72               	movlw	114
  5760  00E56C  6E07               	movwf	___ftge@ff1,c
  5761  00E56E  0E31               	movlw	49
  5762  00E570  6E08               	movwf	___ftge@ff1+1,c
  5763  00E572  0E44               	movlw	68
  5764  00E574  6E09               	movwf	___ftge@ff1+2,c
  5765  00E576  C056  F00A         	movff	exp@x,___ftge@ff2
  5766  00E57A  C057  F00B         	movff	exp@x+1,___ftge@ff2+1
  5767  00E57E  C058  F00C         	movff	exp@x+2,___ftge@ff2+2
  5768  00E582  EC25  F06A         	call	___ftge	;wreg free
  5769  00E586  B0D8               	btfsc	status,0,c
  5770  00E588  D00C               	goto	l948
  5771  00E58A  0E00               	movlw	0
  5772  00E58C  0100               	movlb	0	; () banked
  5773  00E58E  6FE2               	movwf	(_errno+1)& (0+255),b
  5774  00E590  0E22               	movlw	34
  5775  00E592  6FE1               	movwf	_errno& (0+255),b
  5776  00E594  0EFF               	movlw	255
  5777  00E596  6E56               	movwf	?_exp,c
  5778  00E598  0E7F               	movlw	127
  5779  00E59A  6E57               	movwf	?_exp+1,c
  5780  00E59C  0E7F               	movlw	127
  5781  00E59E  6E58               	movwf	?_exp+2,c
  5782                           
  5783                           ; BSR set to: 0
  5784  00E5A0  0012               	return	
  5785  00E5A2                     l948:
  5786                           
  5787                           ; BSR set to: 0
  5788  00E5A2  C056  F007         	movff	exp@x,___ftge@ff1
  5789  00E5A6  C057  F008         	movff	exp@x+1,___ftge@ff1+1
  5790  00E5AA  C058  F009         	movff	exp@x+2,___ftge@ff1+2
  5791  00E5AE  0E49               	movlw	73
  5792  00E5B0  6E0A               	movwf	___ftge@ff2,c
  5793  00E5B2  0E3A               	movlw	58
  5794  00E5B4  6E0B               	movwf	___ftge@ff2+1,c
  5795  00E5B6  0EC4               	movlw	196
  5796  00E5B8  6E0C               	movwf	___ftge@ff2+2,c
  5797  00E5BA  EC25  F06A         	call	___ftge	;wreg free
  5798  00E5BE  B0D8               	btfsc	status,0,c
  5799  00E5C0  D00C               	goto	l949
  5800  00E5C2  0E00               	movlw	0
  5801  00E5C4  0100               	movlb	0	; () banked
  5802  00E5C6  6FE2               	movwf	(_errno+1)& (0+255),b
  5803  00E5C8  0E22               	movlw	34
  5804  00E5CA  6FE1               	movwf	_errno& (0+255),b
  5805  00E5CC  0E00               	movlw	0
  5806  00E5CE  6E56               	movwf	?_exp,c
  5807  00E5D0  0E00               	movlw	0
  5808  00E5D2  6E57               	movwf	?_exp+1,c
  5809  00E5D4  0E00               	movlw	0
  5810  00E5D6  6E58               	movwf	?_exp+2,c
  5811                           
  5812                           ; BSR set to: 0
  5813  00E5D8  0012               	return	
  5814  00E5DA                     l949:
  5815                           
  5816                           ; BSR set to: 0
  5817  00E5DA  AE58               	btfss	exp@x+2,7,c
  5818  00E5DC  D002               	goto	u3030
  5819  00E5DE  0E01               	movlw	1
  5820  00E5E0  D001               	goto	u3040
  5821  00E5E2                     u3030:
  5822  00E5E2  0E00               	movlw	0
  5823  00E5E4                     u3040:
  5824  00E5E4  6E5E               	movwf	exp@sign,c
  5825  00E5E6  505E               	movf	exp@sign,w,c
  5826  00E5E8  B4D8               	btfsc	status,2,c
  5827  00E5EA  D00E               	goto	l950
  5828  00E5EC  C056  F001         	movff	exp@x,___ftneg@f1
  5829  00E5F0  C057  F002         	movff	exp@x+1,___ftneg@f1+1
  5830  00E5F4  C058  F003         	movff	exp@x+2,___ftneg@f1+2
  5831  00E5F8  EC1D  F068         	call	___ftneg	;wreg free
  5832  00E5FC  C001  F056         	movff	?___ftneg,exp@x
  5833  00E600  C002  F057         	movff	?___ftneg+1,exp@x+1
  5834  00E604  C003  F058         	movff	?___ftneg+2,exp@x+2
  5835  00E608                     l950:
  5836  00E608  C056  F019         	movff	exp@x,___ftmul@f1
  5837  00E60C  C057  F01A         	movff	exp@x+1,___ftmul@f1+1
  5838  00E610  C058  F01B         	movff	exp@x+2,___ftmul@f1+2
  5839  00E614  0EAA               	movlw	170
  5840  00E616  6E1C               	movwf	___ftmul@f2,c
  5841  00E618  0EB8               	movlw	184
  5842  00E61A  6E1D               	movwf	___ftmul@f2+1,c
  5843  00E61C  0E3F               	movlw	63
  5844  00E61E  6E1E               	movwf	___ftmul@f2+2,c
  5845  00E620  ECBA  F06C         	call	___ftmul	;wreg free
  5846  00E624  C019  F056         	movff	?___ftmul,exp@x
  5847  00E628  C01A  F057         	movff	?___ftmul+1,exp@x+1
  5848  00E62C  C01B  F058         	movff	?___ftmul+2,exp@x+2
  5849  00E630  C056  F048         	movff	exp@x,floor@x
  5850  00E634  C057  F049         	movff	exp@x+1,floor@x+1
  5851  00E638  C058  F04A         	movff	exp@x+2,floor@x+2
  5852  00E63C  ECD8  F06B         	call	_floor	;wreg free
  5853  00E640  C048  F059         	movff	?_floor,_exp$1346
  5854  00E644  C049  F05A         	movff	?_floor+1,_exp$1346+1
  5855  00E648  C04A  F05B         	movff	?_floor+2,_exp$1346+2
  5856  00E64C  C059  F02F         	movff	_exp$1346,___fttol@f1
  5857  00E650  C05A  F030         	movff	_exp$1346+1,___fttol@f1+1
  5858  00E654  C05B  F031         	movff	_exp$1346+2,___fttol@f1+2
  5859  00E658  EC34  F06D         	call	___fttol	;wreg free
  5860  00E65C  C02F  F05C         	movff	?___fttol,exp@exponent
  5861  00E660  C030  F05D         	movff	?___fttol+1,exp@exponent+1
  5862  00E664  C056  F043         	movff	exp@x,___ftsub@f1
  5863  00E668  C057  F044         	movff	exp@x+1,___ftsub@f1+1
  5864  00E66C  C058  F045         	movff	exp@x+2,___ftsub@f1+2
  5865  00E670  C05C  F015         	movff	exp@exponent,___awtoft@c
  5866  00E674  C05D  F016         	movff	exp@exponent+1,___awtoft@c+1
  5867  00E678  EC72  F068         	call	___awtoft	;wreg free
  5868  00E67C  C015  F046         	movff	?___awtoft,___ftsub@f2
  5869  00E680  C016  F047         	movff	?___awtoft+1,___ftsub@f2+1
  5870  00E684  C017  F048         	movff	?___awtoft+2,___ftsub@f2+2
  5871  00E688  ECAD  F068         	call	___ftsub	;wreg free
  5872  00E68C  C043  F056         	movff	?___ftsub,exp@x
  5873  00E690  C044  F057         	movff	?___ftsub+1,exp@x+1
  5874  00E694  C045  F058         	movff	?___ftsub+2,exp@x+2
  5875  00E698  C056  F043         	movff	exp@x,eval_poly@x
  5876  00E69C  C057  F044         	movff	exp@x+1,eval_poly@x+1
  5877  00E6A0  C058  F045         	movff	exp@x+2,eval_poly@x+2
  5878  00E6A4  0E11               	movlw	low exp@coeff
  5879  00E6A6  6E46               	movwf	eval_poly@d,c
  5880  00E6A8  0EFF               	movlw	high exp@coeff
  5881  00E6AA  6E47               	movwf	eval_poly@d+1,c
  5882  00E6AC  0E00               	movlw	0
  5883  00E6AE  6E49               	movwf	eval_poly@n+1,c
  5884  00E6B0  0E09               	movlw	9
  5885  00E6B2  6E48               	movwf	eval_poly@n,c
  5886  00E6B4  EC6F  F06B         	call	_eval_poly	;wreg free
  5887  00E6B8  C043  F04F         	movff	?_eval_poly,ldexp@value
  5888  00E6BC  C044  F050         	movff	?_eval_poly+1,ldexp@value+1
  5889  00E6C0  C045  F051         	movff	?_eval_poly+2,ldexp@value+2
  5890  00E6C4  C05C  F052         	movff	exp@exponent,ldexp@newexp
  5891  00E6C8  C05D  F053         	movff	exp@exponent+1,ldexp@newexp+1
  5892  00E6CC  EC0C  F06B         	call	_ldexp	;wreg free
  5893  00E6D0  C04F  F056         	movff	?_ldexp,exp@x
  5894  00E6D4  C050  F057         	movff	?_ldexp+1,exp@x+1
  5895  00E6D8  C051  F058         	movff	?_ldexp+2,exp@x+2
  5896  00E6DC  505E               	movf	exp@sign,w,c
  5897  00E6DE  B4D8               	btfsc	status,2,c
  5898  00E6E0  D025               	goto	l951
  5899  00E6E2  2856               	incf	exp@x,w,c
  5900  00E6E4  E10E               	bnz	l3213
  5901  00E6E6  0E7F               	movlw	127
  5902  00E6E8  1857               	xorwf	exp@x+1,w,c
  5903  00E6EA  E10B               	bnz	l3213
  5904  00E6EC  0E7F               	movlw	127
  5905  00E6EE  1858               	xorwf	exp@x+2,w,c
  5906  00E6F0  A4D8               	btfss	status,2,c
  5907  00E6F2  D007               	goto	l952
  5908  00E6F4  0E00               	movlw	0
  5909  00E6F6  6E56               	movwf	?_exp,c
  5910  00E6F8  0E00               	movlw	0
  5911  00E6FA  6E57               	movwf	?_exp+1,c
  5912  00E6FC  0E00               	movlw	0
  5913  00E6FE  6E58               	movwf	?_exp+2,c
  5914  00E700  0012               	return	
  5915  00E702                     l952:
  5916  00E702                     l3213:
  5917  00E702  0E00               	movlw	0
  5918  00E704  6E28               	movwf	___ftdiv@f1,c
  5919  00E706  0E80               	movlw	128
  5920  00E708  6E29               	movwf	___ftdiv@f1+1,c
  5921  00E70A  0E3F               	movlw	63
  5922  00E70C  6E2A               	movwf	___ftdiv@f1+2,c
  5923  00E70E  C056  F02B         	movff	exp@x,___ftdiv@f2
  5924  00E712  C057  F02C         	movff	exp@x+1,___ftdiv@f2+1
  5925  00E716  C058  F02D         	movff	exp@x+2,___ftdiv@f2+2
  5926  00E71A  EC47  F06C         	call	___ftdiv	;wreg free
  5927  00E71E  C028  F056         	movff	?___ftdiv,?_exp
  5928  00E722  C029  F057         	movff	?___ftdiv+1,?_exp+1
  5929  00E726  C02A  F058         	movff	?___ftdiv+2,?_exp+2
  5930  00E72A  0012               	return	
  5931  00E72C                     l951:
  5932  00E72C  C056  F056         	movff	exp@x,?_exp
  5933  00E730  C057  F057         	movff	exp@x+1,?_exp+1
  5934  00E734  C058  F058         	movff	exp@x+2,?_exp+2
  5935  00E738  0012               	return		;funcret
  5936  00E73A                     __end_of_exp:
  5937                           	opt stack 0
  5938                           tblptru	equ	0xFF8
  5939                           tblptrh	equ	0xFF7
  5940                           tblptrl	equ	0xFF6
  5941                           tablat	equ	0xFF5
  5942                           prodh	equ	0xFF4
  5943                           prodl	equ	0xFF3
  5944                           wreg	equ	0xFE8
  5945                           postinc2	equ	0xFDE
  5946                           postdec2	equ	0xFDD
  5947                           fsr2h	equ	0xFDA
  5948                           fsr2l	equ	0xFD9
  5949                           status	equ	0xFD8
  5950                           
  5951 ;; *************** function _ldexp *****************
  5952 ;; Defined at:
  5953 ;;		line 277 in file "/opt/microchip/xc8/v1.44/sources/common/frexp.c"
  5954 ;; Parameters:    Size  Location     Type
  5955 ;;  value           3   78[COMRAM] unsigned char 
  5956 ;;  newexp          2   81[COMRAM] int 
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;		None
  5959 ;; Return value:  Size  Location     Type
  5960 ;;                  3   78[COMRAM] int 
  5961 ;; Registers used:
  5962 ;;		wreg, status,2, status,0
  5963 ;; Tracked objects:
  5964 ;;		On entry : 0/0
  5965 ;;		On exit  : 0/0
  5966 ;;		Unchanged: 0/0
  5967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5968 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5970 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5971 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5972 ;;Total ram usage:        7 bytes
  5973 ;; Hardware stack levels used:    1
  5974 ;; This function calls:
  5975 ;;		Nothing
  5976 ;; This function is called by:
  5977 ;;		_exp
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           	psect	text16
  5982  00D618                     __ptext16:
  5983                           	opt stack 0
  5984  00D618                     _ldexp:
  5985                           	opt stack 28
  5986                           
  5987                           ;incstack = 0
  5988  00D618  504F               	movf	ldexp@value,w,c
  5989  00D61A  1050               	iorwf	ldexp@value+1,w,c
  5990  00D61C  1051               	iorwf	ldexp@value+2,w,c
  5991  00D61E  A4D8               	btfss	status,2,c
  5992  00D620  D007               	goto	l970
  5993  00D622  0E00               	movlw	0
  5994  00D624  6E4F               	movwf	?_ldexp,c
  5995  00D626  0E00               	movlw	0
  5996  00D628  6E50               	movwf	?_ldexp+1,c
  5997  00D62A  0E00               	movlw	0
  5998  00D62C  6E51               	movwf	?_ldexp+2,c
  5999  00D62E  0012               	return	
  6000  00D630                     l970:
  6001  00D630  5051               	movf	ldexp@value+2,w,c
  6002  00D632  0B7F               	andlw	127
  6003  00D634  6E54               	movwf	??_ldexp& (0+255),c
  6004  00D636  6A55               	clrf	(??_ldexp+1)& (0+255),c
  6005  00D638  90D8               	bcf	status,0,c
  6006  00D63A  3654               	rlcf	??_ldexp,f,c
  6007  00D63C  3655               	rlcf	??_ldexp+1,f,c
  6008  00D63E  5054               	movf	??_ldexp,w,c
  6009  00D640  2652               	addwf	ldexp@newexp,f,c
  6010  00D642  5055               	movf	??_ldexp+1,w,c
  6011  00D644  2253               	addwfc	ldexp@newexp+1,f,c
  6012  00D646  AE50               	btfss	ldexp@value+1,7,c
  6013  00D648  D003               	goto	u2580
  6014  00D64A  6A54               	clrf	??_ldexp& (0+255),c
  6015  00D64C  2A54               	incf	??_ldexp& (0+255),f,c
  6016  00D64E  D001               	goto	u2588
  6017  00D650                     u2580:
  6018  00D650  6A54               	clrf	??_ldexp& (0+255),c
  6019  00D652                     u2588:
  6020  00D652  5054               	movf	??_ldexp,w,c
  6021  00D654  2652               	addwf	ldexp@newexp,f,c
  6022  00D656  0E00               	movlw	0
  6023  00D658  2253               	addwfc	ldexp@newexp+1,f,c
  6024  00D65A  AE53               	btfss	ldexp@newexp+1,7,c
  6025  00D65C  D00C               	goto	l972
  6026  00D65E  0E00               	movlw	0
  6027  00D660  0100               	movlb	0	; () banked
  6028  00D662  6FE2               	movwf	(_errno+1)& (0+255),b
  6029  00D664  0E22               	movlw	34
  6030  00D666  6FE1               	movwf	_errno& (0+255),b
  6031  00D668  0E00               	movlw	0
  6032  00D66A  6E4F               	movwf	?_ldexp,c
  6033  00D66C  0E00               	movlw	0
  6034  00D66E  6E50               	movwf	?_ldexp+1,c
  6035  00D670  0E00               	movlw	0
  6036  00D672                     L2:
  6037  00D672  6E51               	movwf	?_ldexp+2,c
  6038                           
  6039                           ; BSR set to: 0
  6040  00D674  0012               	return	
  6041  00D676                     l972:
  6042                           
  6043                           ; BSR set to: 0
  6044  00D676  BE53               	btfsc	ldexp@newexp+1,7,c
  6045  00D678  D016               	goto	l974
  6046  00D67A  0453               	decf	ldexp@newexp+1,w,c
  6047  00D67C  A0D8               	btfss	status,0,c
  6048  00D67E  D013               	goto	l974
  6049  00D680  0E00               	movlw	0
  6050  00D682  0100               	movlb	0	; () banked
  6051  00D684  6FE2               	movwf	(_errno+1)& (0+255),b
  6052  00D686  0E22               	movlw	34
  6053  00D688  6FE1               	movwf	_errno& (0+255),b
  6054                           
  6055                           ; BSR set to: 0
  6056  00D68A  AE51               	btfss	ldexp@value+2,7,c
  6057  00D68C  D006               	goto	l975
  6058                           
  6059                           ; BSR set to: 0
  6060  00D68E  0EFF               	movlw	255
  6061  00D690  6E4F               	movwf	?_ldexp,c
  6062  00D692  0E7F               	movlw	127
  6063  00D694  6E50               	movwf	?_ldexp+1,c
  6064  00D696  0EFF               	movlw	255
  6065  00D698  D7EC               	goto	L2
  6066  00D69A                     l975:
  6067                           
  6068                           ; BSR set to: 0
  6069                           
  6070                           ; BSR set to: 0
  6071  00D69A  0EFF               	movlw	255
  6072  00D69C  6E4F               	movwf	?_ldexp,c
  6073  00D69E  0E7F               	movlw	127
  6074  00D6A0  6E50               	movwf	?_ldexp+1,c
  6075  00D6A2  0E7F               	movlw	127
  6076  00D6A4  D7E6               	goto	L2
  6077  00D6A6                     l974:
  6078                           
  6079                           ; BSR set to: 0
  6080  00D6A6  3453               	rlcf	ldexp@newexp+1,w,c
  6081  00D6A8  3053               	rrcf	ldexp@newexp+1,w,c
  6082  00D6AA  6E55               	movwf	(??_ldexp+1)& (0+255),c
  6083  00D6AC  3052               	rrcf	ldexp@newexp,w,c
  6084  00D6AE  6E54               	movwf	??_ldexp& (0+255),c
  6085  00D6B0  5051               	movf	ldexp@value+2,w,c
  6086  00D6B2  1854               	xorwf	??_ldexp,w,c
  6087  00D6B4  0B80               	andlw	-128
  6088  00D6B6  1854               	xorwf	??_ldexp,w,c
  6089  00D6B8  6E51               	movwf	ldexp@value+2,c
  6090  00D6BA  C052  F054         	movff	ldexp@newexp,??_ldexp
  6091  00D6BE  0E01               	movlw	1
  6092  00D6C0  1654               	andwf	??_ldexp,f,c
  6093  00D6C2  3254               	rrcf	??_ldexp,f,c
  6094  00D6C4  3254               	rrcf	??_ldexp,f,c
  6095  00D6C6  5050               	movf	ldexp@value+1,w,c
  6096  00D6C8  1854               	xorwf	??_ldexp,w,c
  6097  00D6CA  0B7F               	andlw	-129
  6098  00D6CC  1854               	xorwf	??_ldexp,w,c
  6099  00D6CE  6E50               	movwf	ldexp@value+1,c
  6100  00D6D0  C04F  F04F         	movff	ldexp@value,?_ldexp
  6101  00D6D4  C050  F050         	movff	ldexp@value+1,?_ldexp+1
  6102  00D6D8  C051  F051         	movff	ldexp@value+2,?_ldexp+2
  6103  00D6DC  0012               	return	
  6104  00D6DE                     __end_of_ldexp:
  6105                           	opt stack 0
  6106                           tblptru	equ	0xFF8
  6107                           tblptrh	equ	0xFF7
  6108                           tblptrl	equ	0xFF6
  6109                           tablat	equ	0xFF5
  6110                           prodh	equ	0xFF4
  6111                           prodl	equ	0xFF3
  6112                           wreg	equ	0xFE8
  6113                           postinc2	equ	0xFDE
  6114                           postdec2	equ	0xFDD
  6115                           fsr2h	equ	0xFDA
  6116                           fsr2l	equ	0xFD9
  6117                           status	equ	0xFD8
  6118                           
  6119 ;; *************** function _floor *****************
  6120 ;; Defined at:
  6121 ;;		line 13 in file "/opt/microchip/xc8/v1.44/sources/common/floor.c"
  6122 ;; Parameters:    Size  Location     Type
  6123 ;;  x               3   71[COMRAM] int 
  6124 ;; Auto vars:     Size  Location     Type
  6125 ;;  i               3   74[COMRAM] int 
  6126 ;;  expon           2   77[COMRAM] int 
  6127 ;; Return value:  Size  Location     Type
  6128 ;;                  3   71[COMRAM] int 
  6129 ;; Registers used:
  6130 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6131 ;; Tracked objects:
  6132 ;;		On entry : 0/0
  6133 ;;		On exit  : 0/0
  6134 ;;		Unchanged: 0/0
  6135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6136 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6137 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6139 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6140 ;;Total ram usage:        8 bytes
  6141 ;; Hardware stack levels used:    1
  6142 ;; Hardware stack levels required when called:    2
  6143 ;; This function calls:
  6144 ;;		___altoft
  6145 ;;		___ftadd
  6146 ;;		___ftge
  6147 ;;		___fttol
  6148 ;;		_frexp
  6149 ;; This function is called by:
  6150 ;;		_exp
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           	psect	text17
  6155  00D7B0                     __ptext17:
  6156                           	opt stack 0
  6157  00D7B0                     _floor:
  6158                           	opt stack 26
  6159                           
  6160                           ;incstack = 0
  6161  00D7B0  C048  F001         	movff	floor@x,frexp@value
  6162  00D7B4  C049  F002         	movff	floor@x+1,frexp@value+1
  6163  00D7B8  C04A  F003         	movff	floor@x+2,frexp@value+2
  6164  00D7BC  0E4E               	movlw	low floor@expon
  6165  00D7BE  6E04               	movwf	frexp@eptr,c
  6166  00D7C0  0E00               	movlw	high floor@expon
  6167  00D7C2  6E05               	movwf	frexp@eptr+1,c
  6168  00D7C4  EC6D  F06A         	call	_frexp	;wreg free
  6169  00D7C8  AE4F               	btfss	floor@expon+1,7,c
  6170  00D7CA  D010               	goto	l957
  6171  00D7CC  AE4A               	btfss	floor@x+2,7,c
  6172  00D7CE  D007               	goto	l958
  6173  00D7D0  0E00               	movlw	0
  6174  00D7D2  6E48               	movwf	?_floor,c
  6175  00D7D4  0E80               	movlw	128
  6176  00D7D6  6E49               	movwf	?_floor+1,c
  6177  00D7D8  0EBF               	movlw	191
  6178  00D7DA  6E4A               	movwf	?_floor+2,c
  6179  00D7DC  0012               	return	
  6180  00D7DE                     l958:
  6181  00D7DE  0E00               	movlw	0
  6182  00D7E0  6E48               	movwf	?_floor,c
  6183  00D7E2  0E00               	movlw	0
  6184  00D7E4  6E49               	movwf	?_floor+1,c
  6185  00D7E6  0E00               	movlw	0
  6186  00D7E8  6E4A               	movwf	?_floor+2,c
  6187  00D7EA  0012               	return	
  6188  00D7EC                     l957:
  6189  00D7EC  504F               	movf	floor@expon+1,w,c
  6190  00D7EE  E104               	bnz	u2550
  6191  00D7F0  0E15               	movlw	21
  6192  00D7F2  5C4E               	subwf	floor@expon,w,c
  6193  00D7F4  A0D8               	btfss	status,0,c
  6194  00D7F6  D007               	goto	l960
  6195  00D7F8                     u2550:
  6196  00D7F8  C048  F048         	movff	floor@x,?_floor
  6197  00D7FC  C049  F049         	movff	floor@x+1,?_floor+1
  6198  00D800  C04A  F04A         	movff	floor@x+2,?_floor+2
  6199  00D804  0012               	return	
  6200  00D806                     l960:
  6201  00D806  C048  F02F         	movff	floor@x,___fttol@f1
  6202  00D80A  C049  F030         	movff	floor@x+1,___fttol@f1+1
  6203  00D80E  C04A  F031         	movff	floor@x+2,___fttol@f1+2
  6204  00D812  EC34  F06D         	call	___fttol	;wreg free
  6205  00D816  C02F  F03E         	movff	?___fttol,___altoft@c
  6206  00D81A  C030  F03F         	movff	?___fttol+1,___altoft@c+1
  6207  00D81E  C031  F040         	movff	?___fttol+2,___altoft@c+2
  6208  00D822  C032  F041         	movff	?___fttol+3,___altoft@c+3
  6209  00D826  EC66  F069         	call	___altoft	;wreg free
  6210  00D82A  C03E  F04B         	movff	?___altoft,floor@i
  6211  00D82E  C03F  F04C         	movff	?___altoft+1,floor@i+1
  6212  00D832  C040  F04D         	movff	?___altoft+2,floor@i+2
  6213  00D836  C048  F007         	movff	floor@x,___ftge@ff1
  6214  00D83A  C049  F008         	movff	floor@x+1,___ftge@ff1+1
  6215  00D83E  C04A  F009         	movff	floor@x+2,___ftge@ff1+2
  6216  00D842  C04B  F00A         	movff	floor@i,___ftge@ff2
  6217  00D846  C04C  F00B         	movff	floor@i+1,___ftge@ff2+1
  6218  00D84A  C04D  F00C         	movff	floor@i+2,___ftge@ff2+2
  6219  00D84E  EC25  F06A         	call	___ftge	;wreg free
  6220  00D852  B0D8               	btfsc	status,0,c
  6221  00D854  D015               	goto	l961
  6222  00D856  C04B  F037         	movff	floor@i,___ftadd@f1
  6223  00D85A  C04C  F038         	movff	floor@i+1,___ftadd@f1+1
  6224  00D85E  C04D  F039         	movff	floor@i+2,___ftadd@f1+2
  6225  00D862  0E00               	movlw	0
  6226  00D864  6E3A               	movwf	___ftadd@f2,c
  6227  00D866  0E80               	movlw	128
  6228  00D868  6E3B               	movwf	___ftadd@f2+1,c
  6229  00D86A  0EBF               	movlw	191
  6230  00D86C  6E3C               	movwf	___ftadd@f2+2,c
  6231  00D86E  ECF1  F070         	call	___ftadd	;wreg free
  6232  00D872  C037  F048         	movff	?___ftadd,?_floor
  6233  00D876  C038  F049         	movff	?___ftadd+1,?_floor+1
  6234  00D87A  C039  F04A         	movff	?___ftadd+2,?_floor+2
  6235  00D87E  0012               	return	
  6236  00D880                     l961:
  6237  00D880  C04B  F048         	movff	floor@i,?_floor
  6238  00D884  C04C  F049         	movff	floor@i+1,?_floor+1
  6239  00D888  C04D  F04A         	movff	floor@i+2,?_floor+2
  6240  00D88C  0012               	return		;funcret
  6241  00D88E                     __end_of_floor:
  6242                           	opt stack 0
  6243                           tblptru	equ	0xFF8
  6244                           tblptrh	equ	0xFF7
  6245                           tblptrl	equ	0xFF6
  6246                           tablat	equ	0xFF5
  6247                           prodh	equ	0xFF4
  6248                           prodl	equ	0xFF3
  6249                           wreg	equ	0xFE8
  6250                           postinc2	equ	0xFDE
  6251                           postdec2	equ	0xFDD
  6252                           fsr2h	equ	0xFDA
  6253                           fsr2l	equ	0xFD9
  6254                           status	equ	0xFD8
  6255                           
  6256 ;; *************** function _frexp *****************
  6257 ;; Defined at:
  6258 ;;		line 254 in file "/opt/microchip/xc8/v1.44/sources/common/frexp.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;  value           3    0[COMRAM] int 
  6261 ;;  eptr            2    3[COMRAM] PTR int 
  6262 ;;		 -> log@exponent(2), floor@expon(2), 
  6263 ;; Auto vars:     Size  Location     Type
  6264 ;;		None
  6265 ;; Return value:  Size  Location     Type
  6266 ;;                  3    0[COMRAM] PTR int 
  6267 ;; Registers used:
  6268 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6269 ;; Tracked objects:
  6270 ;;		On entry : 0/0
  6271 ;;		On exit  : 0/0
  6272 ;;		Unchanged: 0/0
  6273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6274 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6276 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6277 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6278 ;;Total ram usage:        7 bytes
  6279 ;; Hardware stack levels used:    1
  6280 ;; This function calls:
  6281 ;;		Nothing
  6282 ;; This function is called by:
  6283 ;;		_floor
  6284 ;;		_log
  6285 ;; This function uses a non-reentrant model
  6286 ;;
  6287                           
  6288                           	psect	text18
  6289  00D4DA                     __ptext18:
  6290                           	opt stack 0
  6291  00D4DA                     _frexp:
  6292                           	opt stack 28
  6293                           
  6294                           ;incstack = 0
  6295  00D4DA  5001               	movf	frexp@value,w,c
  6296  00D4DC  1002               	iorwf	frexp@value+1,w,c
  6297  00D4DE  1003               	iorwf	frexp@value+2,w,c
  6298  00D4E0  A4D8               	btfss	status,2,c
  6299  00D4E2  D00F               	goto	l966
  6300  00D4E4  C004  FFD9         	movff	frexp@eptr,fsr2l
  6301  00D4E8  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  6302  00D4EC  0E00               	movlw	0
  6303  00D4EE  6EDE               	movwf	postinc2,c
  6304  00D4F0  0E00               	movlw	0
  6305  00D4F2  6EDD               	movwf	postdec2,c
  6306  00D4F4  0E00               	movlw	0
  6307  00D4F6  6E01               	movwf	?_frexp,c
  6308  00D4F8  0E00               	movlw	0
  6309  00D4FA  6E02               	movwf	?_frexp+1,c
  6310  00D4FC  0E00               	movlw	0
  6311  00D4FE  6E03               	movwf	?_frexp+2,c
  6312  00D500  0012               	return	
  6313  00D502                     l966:
  6314  00D502  5003               	movf	frexp@value+2,w,c
  6315  00D504  0B7F               	andlw	127
  6316  00D506  6E06               	movwf	??_frexp& (0+255),c
  6317  00D508  6A07               	clrf	(??_frexp+1)& (0+255),c
  6318  00D50A  90D8               	bcf	status,0,c
  6319  00D50C  3606               	rlcf	??_frexp,f,c
  6320  00D50E  3607               	rlcf	??_frexp+1,f,c
  6321  00D510  C004  FFD9         	movff	frexp@eptr,fsr2l
  6322  00D514  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  6323  00D518  C006  FFDE         	movff	??_frexp,postinc2
  6324  00D51C  C007  FFDD         	movff	??_frexp+1,postdec2
  6325  00D520  AE02               	btfss	frexp@value+1,7,c
  6326  00D522  D003               	goto	u2300
  6327  00D524  6A06               	clrf	??_frexp& (0+255),c
  6328  00D526  2A06               	incf	??_frexp& (0+255),f,c
  6329  00D528  D001               	goto	u2308
  6330  00D52A                     u2300:
  6331  00D52A  6A06               	clrf	??_frexp& (0+255),c
  6332  00D52C                     u2308:
  6333  00D52C  5006               	movf	??_frexp,w,c
  6334  00D52E  C004  FFD9         	movff	frexp@eptr,fsr2l
  6335  00D532  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  6336  00D536  12DE               	iorwf	postinc2,f,c
  6337  00D538  0E00               	movlw	0
  6338  00D53A  12DD               	iorwf	postdec2,f,c
  6339  00D53C  C004  FFD9         	movff	frexp@eptr,fsr2l
  6340  00D540  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  6341  00D544  0E82               	movlw	130
  6342  00D546  26DE               	addwf	postinc2,f,c
  6343  00D548  0EFF               	movlw	255
  6344  00D54A  22DD               	addwfc	postdec2,f,c
  6345  00D54C  8003               	bsf	frexp@value+2,0,c
  6346  00D54E  8203               	bsf	frexp@value+2,1,c
  6347  00D550  8403               	bsf	frexp@value+2,2,c
  6348  00D552  8603               	bsf	frexp@value+2,3,c
  6349  00D554  8803               	bsf	frexp@value+2,4,c
  6350  00D556  8A03               	bsf	frexp@value+2,5,c
  6351  00D558  9C03               	bcf	frexp@value+2,6,c
  6352  00D55A  9E02               	bcf	frexp@value+1,7,c
  6353  00D55C  C001  F001         	movff	frexp@value,?_frexp
  6354  00D560  C002  F002         	movff	frexp@value+1,?_frexp+1
  6355  00D564  C003  F003         	movff	frexp@value+2,?_frexp+2
  6356  00D568  0012               	return	
  6357  00D56A                     __end_of_frexp:
  6358                           	opt stack 0
  6359                           tblptru	equ	0xFF8
  6360                           tblptrh	equ	0xFF7
  6361                           tblptrl	equ	0xFF6
  6362                           tablat	equ	0xFF5
  6363                           prodh	equ	0xFF4
  6364                           prodl	equ	0xFF3
  6365                           wreg	equ	0xFE8
  6366                           postinc2	equ	0xFDE
  6367                           postdec2	equ	0xFDD
  6368                           fsr2h	equ	0xFDA
  6369                           fsr2l	equ	0xFD9
  6370                           status	equ	0xFD8
  6371                           
  6372 ;; *************** function ___fttol *****************
  6373 ;; Defined at:
  6374 ;;		line 44 in file "/opt/microchip/xc8/v1.44/sources/common/fttol.c"
  6375 ;; Parameters:    Size  Location     Type
  6376 ;;  f1              3   46[COMRAM] float 
  6377 ;; Auto vars:     Size  Location     Type
  6378 ;;  lval            4   56[COMRAM] unsigned long 
  6379 ;;  exp1            1   60[COMRAM] unsigned char 
  6380 ;;  sign1           1   55[COMRAM] unsigned char 
  6381 ;; Return value:  Size  Location     Type
  6382 ;;                  4   46[COMRAM] long 
  6383 ;; Registers used:
  6384 ;;		wreg, status,2, status,0
  6385 ;; Tracked objects:
  6386 ;;		On entry : 0/0
  6387 ;;		On exit  : 0/0
  6388 ;;		Unchanged: 0/0
  6389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6390 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6391 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6392 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6393 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;Total ram usage:       15 bytes
  6395 ;; Hardware stack levels used:    1
  6396 ;; This function calls:
  6397 ;;		Nothing
  6398 ;; This function is called by:
  6399 ;;		_printf
  6400 ;;		_pow
  6401 ;;		_exp
  6402 ;;		_floor
  6403 ;; This function uses a non-reentrant model
  6404 ;;
  6405                           
  6406                           	psect	text19
  6407  00DA68                     __ptext19:
  6408                           	opt stack 0
  6409  00DA68                     ___fttol:
  6410                           	opt stack 29
  6411                           
  6412                           ;incstack = 0
  6413  00DA68  C031  F033         	movff	___fttol@f1+2,??___fttol
  6414  00DA6C  6A34               	clrf	(??___fttol+1)& (0+255),c
  6415  00DA6E  6A35               	clrf	(??___fttol+2)& (0+255),c
  6416  00DA70  3430               	rlcf	___fttol@f1+1,w,c
  6417  00DA72  3633               	rlcf	??___fttol& (0+255),f,c
  6418  00DA74  E301               	bnc	u2211
  6419  00DA76  8034               	bsf	(??___fttol+1)& (0+255),0,c
  6420  00DA78                     u2211:
  6421  00DA78  5033               	movf	??___fttol,w,c
  6422  00DA7A  6E3D               	movwf	___fttol@exp1,c
  6423  00DA7C  503D               	movf	___fttol@exp1,w,c
  6424  00DA7E  A4D8               	btfss	status,2,c
  6425  00DA80  D009               	goto	l656
  6426  00DA82  0E00               	movlw	0
  6427  00DA84  6E2F               	movwf	?___fttol,c
  6428  00DA86  0E00               	movlw	0
  6429  00DA88  6E30               	movwf	?___fttol+1,c
  6430  00DA8A  0E00               	movlw	0
  6431  00DA8C  6E31               	movwf	?___fttol+2,c
  6432  00DA8E  0E00               	movlw	0
  6433  00DA90  6E32               	movwf	?___fttol+3,c
  6434  00DA92  0012               	return	
  6435  00DA94                     l656:
  6436  00DA94  0E17               	movlw	23
  6437  00DA96  6E33               	movwf	??___fttol& (0+255),c
  6438  00DA98  C02F  F034         	movff	___fttol@f1,??___fttol+1
  6439  00DA9C  C030  F035         	movff	___fttol@f1+1,??___fttol+2
  6440  00DAA0  C031  F036         	movff	___fttol@f1+2,??___fttol+3
  6441  00DAA4  2833               	incf	??___fttol,w,c
  6442  00DAA6  6E37               	movwf	(??___fttol+4)& (0+255),c
  6443  00DAA8  D004               	goto	u2230
  6444  00DAAA                     u2235:
  6445  00DAAA  90D8               	bcf	status,0,c
  6446  00DAAC  3236               	rrcf	??___fttol+3,f,c
  6447  00DAAE  3235               	rrcf	??___fttol+2,f,c
  6448  00DAB0  3234               	rrcf	??___fttol+1,f,c
  6449  00DAB2                     u2230:
  6450  00DAB2  2E37               	decfsz	(??___fttol+4)& (0+255),f,c
  6451  00DAB4  D7FA               	goto	u2235
  6452  00DAB6  5034               	movf	??___fttol+1,w,c
  6453  00DAB8  6E38               	movwf	___fttol@sign1,c
  6454  00DABA  8E30               	bsf	___fttol@f1+1,7,c
  6455  00DABC  0EFF               	movlw	255
  6456  00DABE  162F               	andwf	___fttol@f1,f,c
  6457  00DAC0  0EFF               	movlw	255
  6458  00DAC2  1630               	andwf	___fttol@f1+1,f,c
  6459  00DAC4  0E00               	movlw	0
  6460  00DAC6  1631               	andwf	___fttol@f1+2,f,c
  6461  00DAC8  502F               	movf	___fttol@f1,w,c
  6462  00DACA  6E39               	movwf	___fttol@lval,c
  6463  00DACC  5030               	movf	___fttol@f1+1,w,c
  6464  00DACE  6E3A               	movwf	___fttol@lval+1,c
  6465  00DAD0  5031               	movf	___fttol@f1+2,w,c
  6466  00DAD2  6E3B               	movwf	___fttol@lval+2,c
  6467  00DAD4  6A3C               	clrf	___fttol@lval+3,c
  6468  00DAD6  0E8E               	movlw	142
  6469  00DAD8  5E3D               	subwf	___fttol@exp1,f,c
  6470  00DADA  AE3D               	btfss	___fttol@exp1,7,c
  6471  00DADC  D016               	goto	l658
  6472  00DADE  503D               	movf	___fttol@exp1,w,c
  6473  00DAE0  0A80               	xorlw	128
  6474  00DAE2  0F8F               	addlw	143
  6475  00DAE4  B0D8               	btfsc	status,0,c
  6476  00DAE6  D009               	goto	l659
  6477  00DAE8  0E00               	movlw	0
  6478  00DAEA  6E2F               	movwf	?___fttol,c
  6479  00DAEC  0E00               	movlw	0
  6480  00DAEE  6E30               	movwf	?___fttol+1,c
  6481  00DAF0  0E00               	movlw	0
  6482  00DAF2  6E31               	movwf	?___fttol+2,c
  6483  00DAF4  0E00               	movlw	0
  6484  00DAF6  6E32               	movwf	?___fttol+3,c
  6485  00DAF8  0012               	return	
  6486  00DAFA                     l659:
  6487  00DAFA  90D8               	bcf	status,0,c
  6488  00DAFC  323C               	rrcf	___fttol@lval+3,f,c
  6489  00DAFE  323B               	rrcf	___fttol@lval+2,f,c
  6490  00DB00  323A               	rrcf	___fttol@lval+1,f,c
  6491  00DB02  3239               	rrcf	___fttol@lval,f,c
  6492  00DB04  3E3D               	incfsz	___fttol@exp1,f,c
  6493  00DB06  D7F9               	goto	l659
  6494  00DB08  D015               	goto	u2270
  6495  00DB0A                     l658:
  6496  00DB0A  0E17               	movlw	23
  6497  00DB0C  643D               	cpfsgt	___fttol@exp1,c
  6498  00DB0E  D00F               	goto	l664
  6499  00DB10  0E00               	movlw	0
  6500  00DB12  6E2F               	movwf	?___fttol,c
  6501  00DB14  0E00               	movlw	0
  6502  00DB16  6E30               	movwf	?___fttol+1,c
  6503  00DB18  0E00               	movlw	0
  6504  00DB1A  6E31               	movwf	?___fttol+2,c
  6505  00DB1C  0E00               	movlw	0
  6506  00DB1E  6E32               	movwf	?___fttol+3,c
  6507  00DB20  0012               	return	
  6508  00DB22  90D8               	bcf	status,0,c
  6509  00DB24  3639               	rlcf	___fttol@lval,f,c
  6510  00DB26  363A               	rlcf	___fttol@lval+1,f,c
  6511  00DB28  363B               	rlcf	___fttol@lval+2,f,c
  6512  00DB2A  363C               	rlcf	___fttol@lval+3,f,c
  6513  00DB2C  063D               	decf	___fttol@exp1,f,c
  6514  00DB2E                     l664:
  6515  00DB2E  503D               	movf	___fttol@exp1,w,c
  6516  00DB30  A4D8               	btfss	status,2,c
  6517  00DB32  D7F7               	goto	l665
  6518  00DB34                     u2270:
  6519  00DB34  5038               	movf	___fttol@sign1,w,c
  6520  00DB36  B4D8               	btfsc	status,2,c
  6521  00DB38  D008               	goto	l667
  6522  00DB3A  1E3C               	comf	___fttol@lval+3,f,c
  6523  00DB3C  1E3B               	comf	___fttol@lval+2,f,c
  6524  00DB3E  1E3A               	comf	___fttol@lval+1,f,c
  6525  00DB40  6C39               	negf	___fttol@lval,c
  6526  00DB42  0E00               	movlw	0
  6527  00DB44  223A               	addwfc	___fttol@lval+1,f,c
  6528  00DB46  223B               	addwfc	___fttol@lval+2,f,c
  6529  00DB48  223C               	addwfc	___fttol@lval+3,f,c
  6530  00DB4A                     l667:
  6531  00DB4A  C039  F02F         	movff	___fttol@lval,?___fttol
  6532  00DB4E  C03A  F030         	movff	___fttol@lval+1,?___fttol+1
  6533  00DB52  C03B  F031         	movff	___fttol@lval+2,?___fttol+2
  6534  00DB56  C03C  F032         	movff	___fttol@lval+3,?___fttol+3
  6535  00DB5A  0012               	return	
  6536  00DB5C                     __end_of___fttol:
  6537                           	opt stack 0
  6538                           tblptru	equ	0xFF8
  6539                           tblptrh	equ	0xFF7
  6540                           tblptrl	equ	0xFF6
  6541                           tablat	equ	0xFF5
  6542                           prodh	equ	0xFF4
  6543                           prodl	equ	0xFF3
  6544                           wreg	equ	0xFE8
  6545                           postinc2	equ	0xFDE
  6546                           postdec2	equ	0xFDD
  6547                           fsr2h	equ	0xFDA
  6548                           fsr2l	equ	0xFD9
  6549                           status	equ	0xFD8
  6550                           
  6551 ;; *************** function ___altoft *****************
  6552 ;; Defined at:
  6553 ;;		line 42 in file "/opt/microchip/xc8/v1.44/sources/common/altoft.c"
  6554 ;; Parameters:    Size  Location     Type
  6555 ;;  c               4   61[COMRAM] long 
  6556 ;; Auto vars:     Size  Location     Type
  6557 ;;  sign            1   70[COMRAM] unsigned char 
  6558 ;;  exp             1   69[COMRAM] unsigned char 
  6559 ;; Return value:  Size  Location     Type
  6560 ;;                  3   61[COMRAM] float 
  6561 ;; Registers used:
  6562 ;;		wreg, status,2, status,0, cstack
  6563 ;; Tracked objects:
  6564 ;;		On entry : 0/0
  6565 ;;		On exit  : 0/0
  6566 ;;		Unchanged: 0/0
  6567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6568 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6569 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6570 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6571 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6572 ;;Total ram usage:       10 bytes
  6573 ;; Hardware stack levels used:    1
  6574 ;; Hardware stack levels required when called:    1
  6575 ;; This function calls:
  6576 ;;		___ftpack
  6577 ;; This function is called by:
  6578 ;;		_floor
  6579 ;; This function uses a non-reentrant model
  6580 ;;
  6581                           
  6582                           	psect	text20
  6583  00D2CC                     __ptext20:
  6584                           	opt stack 0
  6585  00D2CC                     ___altoft:
  6586                           	opt stack 26
  6587                           
  6588                           ;incstack = 0
  6589  00D2CC  0E00               	movlw	0
  6590  00D2CE  6E47               	movwf	___altoft@sign,c
  6591  00D2D0  0E8E               	movlw	142
  6592  00D2D2  6E46               	movwf	___altoft@exp,c
  6593  00D2D4  AE41               	btfss	___altoft@c+3,7,c
  6594  00D2D6  D011               	goto	l340
  6595  00D2D8  1E41               	comf	___altoft@c+3,f,c
  6596  00D2DA  1E40               	comf	___altoft@c+2,f,c
  6597  00D2DC  1E3F               	comf	___altoft@c+1,f,c
  6598  00D2DE  6C3E               	negf	___altoft@c,c
  6599  00D2E0  0E00               	movlw	0
  6600  00D2E2  223F               	addwfc	___altoft@c+1,f,c
  6601  00D2E4  2240               	addwfc	___altoft@c+2,f,c
  6602  00D2E6  2241               	addwfc	___altoft@c+3,f,c
  6603  00D2E8  0E01               	movlw	1
  6604  00D2EA  6E47               	movwf	___altoft@sign,c
  6605  00D2EC  D006               	goto	l340
  6606  00D2EE  90D8               	bcf	status,0,c
  6607  00D2F0  3241               	rrcf	___altoft@c+3,f,c
  6608  00D2F2  3240               	rrcf	___altoft@c+2,f,c
  6609  00D2F4  323F               	rrcf	___altoft@c+1,f,c
  6610  00D2F6  323E               	rrcf	___altoft@c,f,c
  6611  00D2F8  2A46               	incf	___altoft@exp,f,c
  6612  00D2FA                     l340:
  6613  00D2FA  0E00               	movlw	0
  6614  00D2FC  143E               	andwf	___altoft@c,w,c
  6615  00D2FE  6E42               	movwf	??___altoft& (0+255),c
  6616  00D300  0E00               	movlw	0
  6617  00D302  143F               	andwf	___altoft@c+1,w,c
  6618  00D304  6E43               	movwf	(??___altoft+1)& (0+255),c
  6619  00D306  0E00               	movlw	0
  6620  00D308  1440               	andwf	___altoft@c+2,w,c
  6621  00D30A  6E44               	movwf	(??___altoft+2)& (0+255),c
  6622  00D30C  0EFF               	movlw	255
  6623  00D30E  1441               	andwf	___altoft@c+3,w,c
  6624  00D310  6E45               	movwf	(??___altoft+3)& (0+255),c
  6625  00D312  5042               	movf	??___altoft,w,c
  6626  00D314  1043               	iorwf	??___altoft+1,w,c
  6627  00D316  1044               	iorwf	??___altoft+2,w,c
  6628  00D318  1045               	iorwf	??___altoft+3,w,c
  6629  00D31A  A4D8               	btfss	status,2,c
  6630  00D31C  D7E8               	goto	l341
  6631  00D31E  C03E  F001         	movff	___altoft@c,___ftpack@arg
  6632  00D322  C03F  F002         	movff	___altoft@c+1,___ftpack@arg+1
  6633  00D326  C040  F003         	movff	___altoft@c+2,___ftpack@arg+2
  6634  00D32A  C046  F004         	movff	___altoft@exp,___ftpack@exp
  6635  00D32E  C047  F005         	movff	___altoft@sign,___ftpack@sign
  6636  00D332  ECB5  F06A         	call	___ftpack	;wreg free
  6637  00D336  C001  F03E         	movff	?___ftpack,?___altoft
  6638  00D33A  C002  F03F         	movff	?___ftpack+1,?___altoft+1
  6639  00D33E  C003  F040         	movff	?___ftpack+2,?___altoft+2
  6640  00D342  0012               	return	
  6641  00D344                     __end_of___altoft:
  6642                           	opt stack 0
  6643                           tblptru	equ	0xFF8
  6644                           tblptrh	equ	0xFF7
  6645                           tblptrl	equ	0xFF6
  6646                           tablat	equ	0xFF5
  6647                           prodh	equ	0xFF4
  6648                           prodl	equ	0xFF3
  6649                           wreg	equ	0xFE8
  6650                           postinc2	equ	0xFDE
  6651                           postdec2	equ	0xFDD
  6652                           fsr2h	equ	0xFDA
  6653                           fsr2l	equ	0xFD9
  6654                           status	equ	0xFD8
  6655                           
  6656 ;; *************** function ___awtoft *****************
  6657 ;; Defined at:
  6658 ;;		line 32 in file "/opt/microchip/xc8/v1.44/sources/common/awtoft.c"
  6659 ;; Parameters:    Size  Location     Type
  6660 ;;  c               2   20[COMRAM] int 
  6661 ;; Auto vars:     Size  Location     Type
  6662 ;;  sign            1   23[COMRAM] unsigned char 
  6663 ;; Return value:  Size  Location     Type
  6664 ;;                  3   20[COMRAM] float 
  6665 ;; Registers used:
  6666 ;;		wreg, status,2, status,0, cstack
  6667 ;; Tracked objects:
  6668 ;;		On entry : 0/0
  6669 ;;		On exit  : 0/0
  6670 ;;		Unchanged: 0/0
  6671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6672 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6673 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6675 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6676 ;;Total ram usage:        4 bytes
  6677 ;; Hardware stack levels used:    1
  6678 ;; Hardware stack levels required when called:    1
  6679 ;; This function calls:
  6680 ;;		___ftpack
  6681 ;; This function is called by:
  6682 ;;		_main
  6683 ;;		_exp
  6684 ;;		_log
  6685 ;; This function uses a non-reentrant model
  6686 ;;
  6687                           
  6688                           	psect	text21
  6689  00D0E4                     __ptext21:
  6690                           	opt stack 0
  6691  00D0E4                     ___awtoft:
  6692                           	opt stack 27
  6693                           
  6694                           ;incstack = 0
  6695  00D0E4  0E00               	movlw	0
  6696  00D0E6  6E18               	movwf	___awtoft@sign,c
  6697  00D0E8  AE16               	btfss	___awtoft@c+1,7,c
  6698  00D0EA  D006               	goto	l491
  6699  00D0EC  6C15               	negf	___awtoft@c,c
  6700  00D0EE  1E16               	comf	___awtoft@c+1,f,c
  6701  00D0F0  B0D8               	btfsc	status,0,c
  6702  00D0F2  2A16               	incf	___awtoft@c+1,f,c
  6703  00D0F4  0E01               	movlw	1
  6704  00D0F6  6E18               	movwf	___awtoft@sign,c
  6705  00D0F8                     l491:
  6706  00D0F8  C015  F001         	movff	___awtoft@c,___ftpack@arg
  6707  00D0FC  C016  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6708  00D100  6A03               	clrf	___ftpack@arg+2,c
  6709  00D102  0E8E               	movlw	142
  6710  00D104  6E04               	movwf	___ftpack@exp,c
  6711  00D106  C018  F005         	movff	___awtoft@sign,___ftpack@sign
  6712  00D10A  ECB5  F06A         	call	___ftpack	;wreg free
  6713  00D10E  C001  F015         	movff	?___ftpack,?___awtoft
  6714  00D112  C002  F016         	movff	?___ftpack+1,?___awtoft+1
  6715  00D116  C003  F017         	movff	?___ftpack+2,?___awtoft+2
  6716  00D11A  0012               	return	
  6717  00D11C                     __end_of___awtoft:
  6718                           	opt stack 0
  6719                           tblptru	equ	0xFF8
  6720                           tblptrh	equ	0xFF7
  6721                           tblptrl	equ	0xFF6
  6722                           tablat	equ	0xFF5
  6723                           prodh	equ	0xFF4
  6724                           prodl	equ	0xFF3
  6725                           wreg	equ	0xFE8
  6726                           postinc2	equ	0xFDE
  6727                           postdec2	equ	0xFDD
  6728                           fsr2h	equ	0xFDA
  6729                           fsr2l	equ	0xFD9
  6730                           status	equ	0xFD8
  6731                           
  6732 ;; *************** function ___lltoft *****************
  6733 ;; Defined at:
  6734 ;;		line 35 in file "/opt/microchip/xc8/v1.44/sources/common/lltoft.c"
  6735 ;; Parameters:    Size  Location     Type
  6736 ;;  c               4    8[COMRAM] unsigned long 
  6737 ;; Auto vars:     Size  Location     Type
  6738 ;;  exp             1   16[COMRAM] unsigned char 
  6739 ;; Return value:  Size  Location     Type
  6740 ;;                  3    8[COMRAM] float 
  6741 ;; Registers used:
  6742 ;;		wreg, status,2, status,0, cstack
  6743 ;; Tracked objects:
  6744 ;;		On entry : 0/0
  6745 ;;		On exit  : 0/0
  6746 ;;		Unchanged: 0/0
  6747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6748 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6749 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6750 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6751 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6752 ;;Total ram usage:        9 bytes
  6753 ;; Hardware stack levels used:    1
  6754 ;; Hardware stack levels required when called:    1
  6755 ;; This function calls:
  6756 ;;		___ftpack
  6757 ;; This function is called by:
  6758 ;;		_printf
  6759 ;;		_pow
  6760 ;; This function uses a non-reentrant model
  6761 ;;
  6762                           
  6763                           	psect	text22
  6764  00D19A                     __ptext22:
  6765                           	opt stack 0
  6766  00D19A                     ___lltoft:
  6767                           	opt stack 28
  6768                           
  6769                           ;incstack = 0
  6770  00D19A  0E8E               	movlw	142
  6771  00D19C  6E11               	movwf	___lltoft@exp,c
  6772  00D19E  D006               	goto	l713
  6773  00D1A0  90D8               	bcf	status,0,c
  6774  00D1A2  320C               	rrcf	___lltoft@c+3,f,c
  6775  00D1A4  320B               	rrcf	___lltoft@c+2,f,c
  6776  00D1A6  320A               	rrcf	___lltoft@c+1,f,c
  6777  00D1A8  3209               	rrcf	___lltoft@c,f,c
  6778  00D1AA  2A11               	incf	___lltoft@exp,f,c
  6779  00D1AC                     l713:
  6780  00D1AC  0E00               	movlw	0
  6781  00D1AE  1409               	andwf	___lltoft@c,w,c
  6782  00D1B0  6E0D               	movwf	??___lltoft& (0+255),c
  6783  00D1B2  0E00               	movlw	0
  6784  00D1B4  140A               	andwf	___lltoft@c+1,w,c
  6785  00D1B6  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  6786  00D1B8  0E00               	movlw	0
  6787  00D1BA  140B               	andwf	___lltoft@c+2,w,c
  6788  00D1BC  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  6789  00D1BE  0EFF               	movlw	255
  6790  00D1C0  140C               	andwf	___lltoft@c+3,w,c
  6791  00D1C2  6E10               	movwf	(??___lltoft+3)& (0+255),c
  6792  00D1C4  500D               	movf	??___lltoft,w,c
  6793  00D1C6  100E               	iorwf	??___lltoft+1,w,c
  6794  00D1C8  100F               	iorwf	??___lltoft+2,w,c
  6795  00D1CA  1010               	iorwf	??___lltoft+3,w,c
  6796  00D1CC  A4D8               	btfss	status,2,c
  6797  00D1CE  D7E8               	goto	l714
  6798  00D1D0  C009  F001         	movff	___lltoft@c,___ftpack@arg
  6799  00D1D4  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  6800  00D1D8  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  6801  00D1DC  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  6802  00D1E0  0E00               	movlw	0
  6803  00D1E2  6E05               	movwf	___ftpack@sign,c
  6804  00D1E4  ECB5  F06A         	call	___ftpack	;wreg free
  6805  00D1E8  C001  F009         	movff	?___ftpack,?___lltoft
  6806  00D1EC  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  6807  00D1F0  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  6808  00D1F4  0012               	return	
  6809  00D1F6                     __end_of___lltoft:
  6810                           	opt stack 0
  6811                           tblptru	equ	0xFF8
  6812                           tblptrh	equ	0xFF7
  6813                           tblptrl	equ	0xFF6
  6814                           tablat	equ	0xFF5
  6815                           prodh	equ	0xFF4
  6816                           prodl	equ	0xFF3
  6817                           wreg	equ	0xFE8
  6818                           postinc2	equ	0xFDE
  6819                           postdec2	equ	0xFDD
  6820                           fsr2h	equ	0xFDA
  6821                           fsr2l	equ	0xFD9
  6822                           status	equ	0xFD8
  6823                           
  6824 ;; *************** function _atan2 *****************
  6825 ;; Defined at:
  6826 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/atan2.c"
  6827 ;; Parameters:    Size  Location     Type
  6828 ;;  y               3   52[BANK0 ] float 
  6829 ;;  x               3   55[BANK0 ] float 
  6830 ;; Auto vars:     Size  Location     Type
  6831 ;;  v               3   64[BANK0 ] float 
  6832 ;; Return value:  Size  Location     Type
  6833 ;;                  3   52[BANK0 ] float 
  6834 ;; Registers used:
  6835 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6836 ;; Tracked objects:
  6837 ;;		On entry : 0/0
  6838 ;;		On exit  : 0/0
  6839 ;;		Unchanged: 0/0
  6840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6841 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6842 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6844 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6845 ;;Total ram usage:       15 bytes
  6846 ;; Hardware stack levels used:    1
  6847 ;; Hardware stack levels required when called:    4
  6848 ;; This function calls:
  6849 ;;		___ftadd
  6850 ;;		___ftdiv
  6851 ;;		___ftge
  6852 ;;		___ftneg
  6853 ;;		___ftsub
  6854 ;;		_atan
  6855 ;;		_fabs
  6856 ;; This function is called by:
  6857 ;;		_main
  6858 ;; This function uses a non-reentrant model
  6859 ;;
  6860                           
  6861                           	psect	text23
  6862  00E98C                     __ptext23:
  6863                           	opt stack 0
  6864  00E98C                     _atan2:
  6865                           	opt stack 26
  6866                           
  6867                           ;incstack = 0
  6868  00E98C  0100               	movlb	0	; () banked
  6869  00E98E  5197               	movf	atan2@x& (0+255),w,b
  6870  00E990  1198               	iorwf	(atan2@x+1)& (0+255),w,b
  6871  00E992  1199               	iorwf	(atan2@x+2)& (0+255),w,b
  6872  00E994  A4D8               	btfss	status,2,c
  6873  00E996  D030               	goto	l419
  6874                           
  6875                           ; BSR set to: 0
  6876  00E998  5194               	movf	atan2@y& (0+255),w,b
  6877  00E99A  1195               	iorwf	(atan2@y+1)& (0+255),w,b
  6878  00E99C  1196               	iorwf	(atan2@y+2)& (0+255),w,b
  6879  00E99E  A4D8               	btfss	status,2,c
  6880  00E9A0  D00B               	goto	l416
  6881                           
  6882                           ; BSR set to: 0
  6883  00E9A2  0E00               	movlw	0
  6884  00E9A4  6FE2               	movwf	(_errno+1)& (0+255),b
  6885  00E9A6  0E21               	movlw	33
  6886  00E9A8  6FE1               	movwf	_errno& (0+255),b
  6887  00E9AA  0E00               	movlw	0
  6888  00E9AC  6F94               	movwf	?_atan2& (0+255),b
  6889  00E9AE  0E00               	movlw	0
  6890  00E9B0  6F95               	movwf	(?_atan2+1)& (0+255),b
  6891  00E9B2  0E00               	movlw	0
  6892  00E9B4  6F96               	movwf	(?_atan2+2)& (0+255),b
  6893                           
  6894                           ; BSR set to: 0
  6895  00E9B6  0012               	return	
  6896  00E9B8                     l416:
  6897                           
  6898                           ; BSR set to: 0
  6899                           
  6900                           ; BSR set to: 0
  6901  00E9B8  0E00               	movlw	0
  6902  00E9BA  6E07               	movwf	___ftge@ff1,c
  6903  00E9BC  0E00               	movlw	0
  6904  00E9BE  6E08               	movwf	___ftge@ff1+1,c
  6905  00E9C0  0E00               	movlw	0
  6906  00E9C2  6E09               	movwf	___ftge@ff1+2,c
  6907  00E9C4  C094  F00A         	movff	atan2@y,___ftge@ff2
  6908  00E9C8  C095  F00B         	movff	atan2@y+1,___ftge@ff2+1
  6909  00E9CC  C096  F00C         	movff	atan2@y+2,___ftge@ff2+2
  6910  00E9D0  EC25  F06A         	call	___ftge	;wreg free
  6911  00E9D4  B0D8               	btfsc	status,0,c
  6912  00E9D6  D008               	goto	l418
  6913  00E9D8  0E10               	movlw	16
  6914  00E9DA  0100               	movlb	0	; () banked
  6915  00E9DC  6F94               	movwf	?_atan2& (0+255),b
  6916  00E9DE  0EC9               	movlw	201
  6917  00E9E0  6F95               	movwf	(?_atan2+1)& (0+255),b
  6918  00E9E2  0E3F               	movlw	63
  6919  00E9E4  6F96               	movwf	(?_atan2+2)& (0+255),b
  6920                           
  6921                           ; BSR set to: 0
  6922  00E9E6  0012               	return	
  6923  00E9E8                     l418:
  6924                           
  6925                           ; BSR set to: 0
  6926  00E9E8  0E10               	movlw	16
  6927  00E9EA  0100               	movlb	0	; () banked
  6928  00E9EC  6F94               	movwf	?_atan2& (0+255),b
  6929  00E9EE  0EC9               	movlw	201
  6930  00E9F0  6F95               	movwf	(?_atan2+1)& (0+255),b
  6931  00E9F2  0EBF               	movlw	191
  6932  00E9F4  6F96               	movwf	(?_atan2+2)& (0+255),b
  6933                           
  6934                           ; BSR set to: 0
  6935  00E9F6  0012               	return	
  6936  00E9F8                     l419:
  6937                           
  6938                           ; BSR set to: 0
  6939                           
  6940                           ; BSR set to: 0
  6941                           
  6942                           ; BSR set to: 0
  6943  00E9F8  5194               	movf	atan2@y& (0+255),w,b
  6944  00E9FA  1195               	iorwf	(atan2@y+1)& (0+255),w,b
  6945  00E9FC  1196               	iorwf	(atan2@y+2)& (0+255),w,b
  6946  00E9FE  A4D8               	btfss	status,2,c
  6947  00EA00  D020               	goto	l422
  6948                           
  6949                           ; BSR set to: 0
  6950  00EA02  0E00               	movlw	0
  6951  00EA04  6E07               	movwf	___ftge@ff1,c
  6952  00EA06  0E00               	movlw	0
  6953  00EA08  6E08               	movwf	___ftge@ff1+1,c
  6954  00EA0A  0E00               	movlw	0
  6955  00EA0C  6E09               	movwf	___ftge@ff1+2,c
  6956  00EA0E  C097  F00A         	movff	atan2@x,___ftge@ff2
  6957  00EA12  C098  F00B         	movff	atan2@x+1,___ftge@ff2+1
  6958  00EA16  C099  F00C         	movff	atan2@x+2,___ftge@ff2+2
  6959  00EA1A  EC25  F06A         	call	___ftge	;wreg free
  6960  00EA1E  B0D8               	btfsc	status,0,c
  6961  00EA20  D008               	goto	l421
  6962  00EA22  0E00               	movlw	0
  6963  00EA24  0100               	movlb	0	; () banked
  6964  00EA26  6F94               	movwf	?_atan2& (0+255),b
  6965  00EA28  0E00               	movlw	0
  6966  00EA2A  6F95               	movwf	(?_atan2+1)& (0+255),b
  6967  00EA2C  0E00               	movlw	0
  6968  00EA2E  6F96               	movwf	(?_atan2+2)& (0+255),b
  6969                           
  6970                           ; BSR set to: 0
  6971  00EA30  0012               	return	
  6972  00EA32                     l421:
  6973                           
  6974                           ; BSR set to: 0
  6975  00EA32  0E10               	movlw	16
  6976  00EA34  0100               	movlb	0	; () banked
  6977  00EA36  6F94               	movwf	?_atan2& (0+255),b
  6978  00EA38  0E49               	movlw	73
  6979  00EA3A  6F95               	movwf	(?_atan2+1)& (0+255),b
  6980  00EA3C  0E40               	movlw	64
  6981  00EA3E  6F96               	movwf	(?_atan2+2)& (0+255),b
  6982                           
  6983                           ; BSR set to: 0
  6984  00EA40  0012               	return	
  6985  00EA42                     l422:
  6986                           
  6987                           ; BSR set to: 0
  6988                           
  6989                           ; BSR set to: 0
  6990                           
  6991                           ; BSR set to: 0
  6992  00EA42  C097  F004         	movff	atan2@x,fabs@d
  6993  00EA46  C098  F005         	movff	atan2@x+1,fabs@d+1
  6994  00EA4A  C099  F006         	movff	atan2@x+2,fabs@d+2
  6995  00EA4E  EC5A  F068         	call	_fabs	;wreg free
  6996  00EA52  C004  F007         	movff	?_fabs,___ftge@ff1
  6997  00EA56  C005  F008         	movff	?_fabs+1,___ftge@ff1+1
  6998  00EA5A  C006  F009         	movff	?_fabs+2,___ftge@ff1+2
  6999  00EA5E  C094  F004         	movff	atan2@y,fabs@d
  7000  00EA62  C095  F005         	movff	atan2@y+1,fabs@d+1
  7001  00EA66  C096  F006         	movff	atan2@y+2,fabs@d+2
  7002  00EA6A  EC5A  F068         	call	_fabs	;wreg free
  7003  00EA6E  C004  F00A         	movff	?_fabs,___ftge@ff2
  7004  00EA72  C005  F00B         	movff	?_fabs+1,___ftge@ff2+1
  7005  00EA76  C006  F00C         	movff	?_fabs+2,___ftge@ff2+2
  7006  00EA7A  EC25  F06A         	call	___ftge	;wreg free
  7007  00EA7E  A0D8               	btfss	status,0,c
  7008  00EA80  D057               	goto	l423
  7009  00EA82  C094  F028         	movff	atan2@y,___ftdiv@f1
  7010  00EA86  C095  F029         	movff	atan2@y+1,___ftdiv@f1+1
  7011  00EA8A  C096  F02A         	movff	atan2@y+2,___ftdiv@f1+2
  7012  00EA8E  C097  F02B         	movff	atan2@x,___ftdiv@f2
  7013  00EA92  C098  F02C         	movff	atan2@x+1,___ftdiv@f2+1
  7014  00EA96  C099  F02D         	movff	atan2@x+2,___ftdiv@f2+2
  7015  00EA9A  EC47  F06C         	call	___ftdiv	;wreg free
  7016  00EA9E  C028  F09D         	movff	?___ftdiv,_atan2$1342
  7017  00EAA2  C029  F09E         	movff	?___ftdiv+1,_atan2$1342+1
  7018  00EAA6  C02A  F09F         	movff	?___ftdiv+2,_atan2$1342+2
  7019  00EAAA  C09D  F084         	movff	_atan2$1342,atan@f
  7020  00EAAE  C09E  F085         	movff	_atan2$1342+1,atan@f+1
  7021  00EAB2  C09F  F086         	movff	_atan2$1342+2,atan@f+2
  7022  00EAB6  ECC7  F071         	call	_atan	;wreg free
  7023  00EABA  C084  F0A0         	movff	?_atan,atan2@v
  7024  00EABE  C085  F0A1         	movff	?_atan+1,atan2@v+1
  7025  00EAC2  C086  F0A2         	movff	?_atan+2,atan2@v+2
  7026  00EAC6  0100               	movlb	0	; () banked
  7027  00EAC8  AF99               	btfss	(atan2@x+2)& (0+255),7,b
  7028  00EACA  D02B               	goto	l426
  7029                           
  7030                           ; BSR set to: 0
  7031  00EACC  BF96               	btfsc	(atan2@y+2)& (0+255),7,b
  7032  00EACE  D015               	goto	l425
  7033                           
  7034                           ; BSR set to: 0
  7035  00EAD0  C0A0  F037         	movff	atan2@v,___ftadd@f1
  7036  00EAD4  C0A1  F038         	movff	atan2@v+1,___ftadd@f1+1
  7037  00EAD8  C0A2  F039         	movff	atan2@v+2,___ftadd@f1+2
  7038  00EADC  0E10               	movlw	16
  7039  00EADE  6E3A               	movwf	___ftadd@f2,c
  7040  00EAE0  0E49               	movlw	73
  7041  00EAE2  6E3B               	movwf	___ftadd@f2+1,c
  7042  00EAE4  0E40               	movlw	64
  7043  00EAE6  6E3C               	movwf	___ftadd@f2+2,c
  7044  00EAE8  ECF1  F070         	call	___ftadd	;wreg free
  7045  00EAEC  C037  F0A0         	movff	?___ftadd,atan2@v
  7046  00EAF0  C038  F0A1         	movff	?___ftadd+1,atan2@v+1
  7047  00EAF4  C039  F0A2         	movff	?___ftadd+2,atan2@v+2
  7048  00EAF8  D014               	goto	l426
  7049  00EAFA                     l425:
  7050  00EAFA  C0A0  F043         	movff	atan2@v,___ftsub@f1
  7051  00EAFE  C0A1  F044         	movff	atan2@v+1,___ftsub@f1+1
  7052  00EB02  C0A2  F045         	movff	atan2@v+2,___ftsub@f1+2
  7053  00EB06  0E10               	movlw	16
  7054  00EB08  6E46               	movwf	___ftsub@f2,c
  7055  00EB0A  0E49               	movlw	73
  7056  00EB0C  6E47               	movwf	___ftsub@f2+1,c
  7057  00EB0E  0E40               	movlw	64
  7058  00EB10  6E48               	movwf	___ftsub@f2+2,c
  7059  00EB12  ECAD  F068         	call	___ftsub	;wreg free
  7060  00EB16  C043  F0A0         	movff	?___ftsub,atan2@v
  7061  00EB1A  C044  F0A1         	movff	?___ftsub+1,atan2@v+1
  7062  00EB1E  C045  F0A2         	movff	?___ftsub+2,atan2@v+2
  7063  00EB22                     l426:
  7064  00EB22  C0A0  F094         	movff	atan2@v,?_atan2
  7065  00EB26  C0A1  F095         	movff	atan2@v+1,?_atan2+1
  7066  00EB2A  C0A2  F096         	movff	atan2@v+2,?_atan2+2
  7067  00EB2E  0012               	return	
  7068  00EB30                     l423:
  7069  00EB30  C094  F02B         	movff	atan2@y,___ftdiv@f2
  7070  00EB34  C095  F02C         	movff	atan2@y+1,___ftdiv@f2+1
  7071  00EB38  C096  F02D         	movff	atan2@y+2,___ftdiv@f2+2
  7072  00EB3C  C097  F028         	movff	atan2@x,___ftdiv@f1
  7073  00EB40  C098  F029         	movff	atan2@x+1,___ftdiv@f1+1
  7074  00EB44  C099  F02A         	movff	atan2@x+2,___ftdiv@f1+2
  7075  00EB48  EC47  F06C         	call	___ftdiv	;wreg free
  7076  00EB4C  C028  F09D         	movff	?___ftdiv,_atan2$1342
  7077  00EB50  C029  F09E         	movff	?___ftdiv+1,_atan2$1342+1
  7078  00EB54  C02A  F09F         	movff	?___ftdiv+2,_atan2$1342+2
  7079  00EB58  C09D  F084         	movff	_atan2$1342,atan@f
  7080  00EB5C  C09E  F085         	movff	_atan2$1342+1,atan@f+1
  7081  00EB60  C09F  F086         	movff	_atan2$1342+2,atan@f+2
  7082  00EB64  ECC7  F071         	call	_atan	;wreg free
  7083  00EB68  C084  F09A         	movff	?_atan,_atan2$1343
  7084  00EB6C  C085  F09B         	movff	?_atan+1,_atan2$1343+1
  7085  00EB70  C086  F09C         	movff	?_atan+2,_atan2$1343+2
  7086  00EB74  C09A  F001         	movff	_atan2$1343,___ftneg@f1
  7087  00EB78  C09B  F002         	movff	_atan2$1343+1,___ftneg@f1+1
  7088  00EB7C  C09C  F003         	movff	_atan2$1343+2,___ftneg@f1+2
  7089  00EB80  EC1D  F068         	call	___ftneg	;wreg free
  7090  00EB84  C001  F0A0         	movff	?___ftneg,atan2@v
  7091  00EB88  C002  F0A1         	movff	?___ftneg+1,atan2@v+1
  7092  00EB8C  C003  F0A2         	movff	?___ftneg+2,atan2@v+2
  7093  00EB90  0100               	movlb	0	; () banked
  7094  00EB92  AF96               	btfss	(atan2@y+2)& (0+255),7,b
  7095  00EB94  D015               	goto	l427
  7096                           
  7097                           ; BSR set to: 0
  7098  00EB96  C0A0  F043         	movff	atan2@v,___ftsub@f1
  7099  00EB9A  C0A1  F044         	movff	atan2@v+1,___ftsub@f1+1
  7100  00EB9E  C0A2  F045         	movff	atan2@v+2,___ftsub@f1+2
  7101  00EBA2  0E10               	movlw	16
  7102  00EBA4  6E46               	movwf	___ftsub@f2,c
  7103  00EBA6  0EC9               	movlw	201
  7104  00EBA8  6E47               	movwf	___ftsub@f2+1,c
  7105  00EBAA  0E3F               	movlw	63
  7106  00EBAC  6E48               	movwf	___ftsub@f2+2,c
  7107  00EBAE  ECAD  F068         	call	___ftsub	;wreg free
  7108  00EBB2  C043  F0A0         	movff	?___ftsub,atan2@v
  7109  00EBB6  C044  F0A1         	movff	?___ftsub+1,atan2@v+1
  7110  00EBBA  C045  F0A2         	movff	?___ftsub+2,atan2@v+2
  7111  00EBBE  D014               	goto	l428
  7112  00EBC0                     l427:
  7113  00EBC0  C0A0  F037         	movff	atan2@v,___ftadd@f1
  7114  00EBC4  C0A1  F038         	movff	atan2@v+1,___ftadd@f1+1
  7115  00EBC8  C0A2  F039         	movff	atan2@v+2,___ftadd@f1+2
  7116  00EBCC  0E10               	movlw	16
  7117  00EBCE  6E3A               	movwf	___ftadd@f2,c
  7118  00EBD0  0EC9               	movlw	201
  7119  00EBD2  6E3B               	movwf	___ftadd@f2+1,c
  7120  00EBD4  0E3F               	movlw	63
  7121  00EBD6  6E3C               	movwf	___ftadd@f2+2,c
  7122  00EBD8  ECF1  F070         	call	___ftadd	;wreg free
  7123  00EBDC  C037  F0A0         	movff	?___ftadd,atan2@v
  7124  00EBE0  C038  F0A1         	movff	?___ftadd+1,atan2@v+1
  7125  00EBE4  C039  F0A2         	movff	?___ftadd+2,atan2@v+2
  7126  00EBE8                     l428:
  7127  00EBE8  C0A0  F094         	movff	atan2@v,?_atan2
  7128  00EBEC  C0A1  F095         	movff	atan2@v+1,?_atan2+1
  7129  00EBF0  C0A2  F096         	movff	atan2@v+2,?_atan2+2
  7130  00EBF4  0012               	return	
  7131  00EBF6                     __end_of_atan2:
  7132                           	opt stack 0
  7133                           tblptru	equ	0xFF8
  7134                           tblptrh	equ	0xFF7
  7135                           tblptrl	equ	0xFF6
  7136                           tablat	equ	0xFF5
  7137                           prodh	equ	0xFF4
  7138                           prodl	equ	0xFF3
  7139                           wreg	equ	0xFE8
  7140                           postinc2	equ	0xFDE
  7141                           postdec2	equ	0xFDD
  7142                           fsr2h	equ	0xFDA
  7143                           fsr2l	equ	0xFD9
  7144                           status	equ	0xFD8
  7145                           
  7146 ;; *************** function _atan *****************
  7147 ;; Defined at:
  7148 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/atan.c"
  7149 ;; Parameters:    Size  Location     Type
  7150 ;;  f               3   36[BANK0 ] float 
  7151 ;; Auto vars:     Size  Location     Type
  7152 ;;  val             3   49[BANK0 ] float 
  7153 ;;  val_squared     3   46[BANK0 ] float 
  7154 ;;  x               3   42[BANK0 ] float 
  7155 ;;  y               3   39[BANK0 ] float 
  7156 ;;  recip           1   45[BANK0 ] unsigned char 
  7157 ;; Return value:  Size  Location     Type
  7158 ;;                  3   36[BANK0 ] unsigned char 
  7159 ;; Registers used:
  7160 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7161 ;; Tracked objects:
  7162 ;;		On entry : 0/0
  7163 ;;		On exit  : 0/0
  7164 ;;		Unchanged: 0/0
  7165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7166 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7167 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7169 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7170 ;;Total ram usage:       16 bytes
  7171 ;; Hardware stack levels used:    1
  7172 ;; Hardware stack levels required when called:    3
  7173 ;; This function calls:
  7174 ;;		___ftadd
  7175 ;;		___ftdiv
  7176 ;;		___ftge
  7177 ;;		___ftmul
  7178 ;;		___ftneg
  7179 ;;		_eval_poly
  7180 ;;		_fabs
  7181 ;; This function is called by:
  7182 ;;		_main
  7183 ;;		_atan2
  7184 ;; This function uses a non-reentrant model
  7185 ;;
  7186                           
  7187                           	psect	text24
  7188  00E38E                     __ptext24:
  7189                           	opt stack 0
  7190  00E38E                     _atan:
  7191                           	opt stack 26
  7192                           
  7193                           ;incstack = 0
  7194  00E38E  C084  F004         	movff	atan@f,fabs@d
  7195  00E392  C085  F005         	movff	atan@f+1,fabs@d+1
  7196  00E396  C086  F006         	movff	atan@f+2,fabs@d+2
  7197  00E39A  EC5A  F068         	call	_fabs	;wreg free
  7198  00E39E  C004  F091         	movff	?_fabs,atan@val
  7199  00E3A2  C005  F092         	movff	?_fabs+1,atan@val+1
  7200  00E3A6  C006  F093         	movff	?_fabs+2,atan@val+2
  7201  00E3AA  0100               	movlb	0	; () banked
  7202  00E3AC  5191               	movf	atan@val& (0+255),w,b
  7203  00E3AE  1192               	iorwf	(atan@val+1)& (0+255),w,b
  7204  00E3B0  1193               	iorwf	(atan@val+2)& (0+255),w,b
  7205  00E3B2  A4D8               	btfss	status,2,c
  7206  00E3B4  D007               	goto	l399
  7207                           
  7208                           ; BSR set to: 0
  7209  00E3B6  0E00               	movlw	0
  7210  00E3B8  6F84               	movwf	?_atan& (0+255),b
  7211  00E3BA  0E00               	movlw	0
  7212  00E3BC  6F85               	movwf	(?_atan+1)& (0+255),b
  7213  00E3BE  0E00               	movlw	0
  7214  00E3C0  6F86               	movwf	(?_atan+2)& (0+255),b
  7215                           
  7216                           ; BSR set to: 0
  7217  00E3C2  0012               	return	
  7218  00E3C4                     l399:
  7219                           
  7220                           ; BSR set to: 0
  7221                           
  7222                           ; BSR set to: 0
  7223  00E3C4  0E00               	movlw	0
  7224  00E3C6  6E07               	movwf	___ftge@ff1,c
  7225  00E3C8  0E80               	movlw	128
  7226  00E3CA  6E08               	movwf	___ftge@ff1+1,c
  7227  00E3CC  0E3F               	movlw	63
  7228  00E3CE  6E09               	movwf	___ftge@ff1+2,c
  7229  00E3D0  C091  F00A         	movff	atan@val,___ftge@ff2
  7230  00E3D4  C092  F00B         	movff	atan@val+1,___ftge@ff2+1
  7231  00E3D8  C093  F00C         	movff	atan@val+2,___ftge@ff2+2
  7232  00E3DC  EC25  F06A         	call	___ftge	;wreg free
  7233  00E3E0  B0D8               	btfsc	status,0,c
  7234  00E3E2  D002               	goto	u2630
  7235  00E3E4  0E01               	movlw	1
  7236  00E3E6  D001               	goto	u2640
  7237  00E3E8                     u2630:
  7238  00E3E8  0E00               	movlw	0
  7239  00E3EA                     u2640:
  7240  00E3EA  0100               	movlb	0	; () banked
  7241  00E3EC  6F8D               	movwf	atan@recip& (0+255),b
  7242  00E3EE  518D               	movf	atan@recip& (0+255),w,b
  7243  00E3F0  B4D8               	btfsc	status,2,c
  7244  00E3F2  D014               	goto	l401
  7245                           
  7246                           ; BSR set to: 0
  7247  00E3F4  0E00               	movlw	0
  7248  00E3F6  6E28               	movwf	___ftdiv@f1,c
  7249  00E3F8  0E80               	movlw	128
  7250  00E3FA  6E29               	movwf	___ftdiv@f1+1,c
  7251  00E3FC  0E3F               	movlw	63
  7252  00E3FE  6E2A               	movwf	___ftdiv@f1+2,c
  7253  00E400  C091  F02B         	movff	atan@val,___ftdiv@f2
  7254  00E404  C092  F02C         	movff	atan@val+1,___ftdiv@f2+1
  7255  00E408  C093  F02D         	movff	atan@val+2,___ftdiv@f2+2
  7256  00E40C  EC47  F06C         	call	___ftdiv	;wreg free
  7257  00E410  C028  F091         	movff	?___ftdiv,atan@val
  7258  00E414  C029  F092         	movff	?___ftdiv+1,atan@val+1
  7259  00E418  C02A  F093         	movff	?___ftdiv+2,atan@val+2
  7260  00E41C                     l401:
  7261  00E41C  C091  F019         	movff	atan@val,___ftmul@f1
  7262  00E420  C092  F01A         	movff	atan@val+1,___ftmul@f1+1
  7263  00E424  C093  F01B         	movff	atan@val+2,___ftmul@f1+2
  7264  00E428  C091  F01C         	movff	atan@val,___ftmul@f2
  7265  00E42C  C092  F01D         	movff	atan@val+1,___ftmul@f2+1
  7266  00E430  C093  F01E         	movff	atan@val+2,___ftmul@f2+2
  7267  00E434  ECBA  F06C         	call	___ftmul	;wreg free
  7268  00E438  C019  F08E         	movff	?___ftmul,atan@val_squared
  7269  00E43C  C01A  F08F         	movff	?___ftmul+1,atan@val_squared+1
  7270  00E440  C01B  F090         	movff	?___ftmul+2,atan@val_squared+2
  7271  00E444  C08E  F043         	movff	atan@val_squared,eval_poly@x
  7272  00E448  C08F  F044         	movff	atan@val_squared+1,eval_poly@x+1
  7273  00E44C  C090  F045         	movff	atan@val_squared+2,eval_poly@x+2
  7274  00E450  0E5C               	movlw	low atan@coeff_b
  7275  00E452  6E46               	movwf	eval_poly@d,c
  7276  00E454  0EFF               	movlw	high atan@coeff_b
  7277  00E456  6E47               	movwf	eval_poly@d+1,c
  7278  00E458  0E00               	movlw	0
  7279  00E45A  6E49               	movwf	eval_poly@n+1,c
  7280  00E45C  0E04               	movlw	4
  7281  00E45E  6E48               	movwf	eval_poly@n,c
  7282  00E460  EC6F  F06B         	call	_eval_poly	;wreg free
  7283  00E464  C043  F087         	movff	?_eval_poly,atan@y
  7284  00E468  C044  F088         	movff	?_eval_poly+1,atan@y+1
  7285  00E46C  C045  F089         	movff	?_eval_poly+2,atan@y+2
  7286  00E470  C08E  F043         	movff	atan@val_squared,eval_poly@x
  7287  00E474  C08F  F044         	movff	atan@val_squared+1,eval_poly@x+1
  7288  00E478  C090  F045         	movff	atan@val_squared+2,eval_poly@x+2
  7289  00E47C  0E4A               	movlw	low atan@coeff_a
  7290  00E47E  6E46               	movwf	eval_poly@d,c
  7291  00E480  0EFF               	movlw	high atan@coeff_a
  7292  00E482  6E47               	movwf	eval_poly@d+1,c
  7293  00E484  0E00               	movlw	0
  7294  00E486  6E49               	movwf	eval_poly@n+1,c
  7295  00E488  0E05               	movlw	5
  7296  00E48A  6E48               	movwf	eval_poly@n,c
  7297  00E48C  EC6F  F06B         	call	_eval_poly	;wreg free
  7298  00E490  C043  F08A         	movff	?_eval_poly,atan@x
  7299  00E494  C044  F08B         	movff	?_eval_poly+1,atan@x+1
  7300  00E498  C045  F08C         	movff	?_eval_poly+2,atan@x+2
  7301  00E49C  C091  F019         	movff	atan@val,___ftmul@f1
  7302  00E4A0  C092  F01A         	movff	atan@val+1,___ftmul@f1+1
  7303  00E4A4  C093  F01B         	movff	atan@val+2,___ftmul@f1+2
  7304  00E4A8  C087  F02B         	movff	atan@y,___ftdiv@f2
  7305  00E4AC  C088  F02C         	movff	atan@y+1,___ftdiv@f2+1
  7306  00E4B0  C089  F02D         	movff	atan@y+2,___ftdiv@f2+2
  7307  00E4B4  C08A  F028         	movff	atan@x,___ftdiv@f1
  7308  00E4B8  C08B  F029         	movff	atan@x+1,___ftdiv@f1+1
  7309  00E4BC  C08C  F02A         	movff	atan@x+2,___ftdiv@f1+2
  7310  00E4C0  EC47  F06C         	call	___ftdiv	;wreg free
  7311  00E4C4  C028  F01C         	movff	?___ftdiv,___ftmul@f2
  7312  00E4C8  C029  F01D         	movff	?___ftdiv+1,___ftmul@f2+1
  7313  00E4CC  C02A  F01E         	movff	?___ftdiv+2,___ftmul@f2+2
  7314  00E4D0  ECBA  F06C         	call	___ftmul	;wreg free
  7315  00E4D4  C019  F091         	movff	?___ftmul,atan@val
  7316  00E4D8  C01A  F092         	movff	?___ftmul+1,atan@val+1
  7317  00E4DC  C01B  F093         	movff	?___ftmul+2,atan@val+2
  7318  00E4E0  0100               	movlb	0	; () banked
  7319  00E4E2  518D               	movf	atan@recip& (0+255),w,b
  7320  00E4E4  B4D8               	btfsc	status,2,c
  7321  00E4E6  D01C               	goto	l402
  7322                           
  7323                           ; BSR set to: 0
  7324  00E4E8  C091  F001         	movff	atan@val,___ftneg@f1
  7325  00E4EC  C092  F002         	movff	atan@val+1,___ftneg@f1+1
  7326  00E4F0  C093  F003         	movff	atan@val+2,___ftneg@f1+2
  7327  00E4F4  EC1D  F068         	call	___ftneg	;wreg free
  7328  00E4F8  C001  F037         	movff	?___ftneg,___ftadd@f1
  7329  00E4FC  C002  F038         	movff	?___ftneg+1,___ftadd@f1+1
  7330  00E500  C003  F039         	movff	?___ftneg+2,___ftadd@f1+2
  7331  00E504  0E10               	movlw	16
  7332  00E506  6E3A               	movwf	___ftadd@f2,c
  7333  00E508  0EC9               	movlw	201
  7334  00E50A  6E3B               	movwf	___ftadd@f2+1,c
  7335  00E50C  0E3F               	movlw	63
  7336  00E50E  6E3C               	movwf	___ftadd@f2+2,c
  7337  00E510  ECF1  F070         	call	___ftadd	;wreg free
  7338  00E514  C037  F091         	movff	?___ftadd,atan@val
  7339  00E518  C038  F092         	movff	?___ftadd+1,atan@val+1
  7340  00E51C  C039  F093         	movff	?___ftadd+2,atan@val+2
  7341  00E520                     l402:
  7342  00E520  0100               	movlb	0	; () banked
  7343  00E522  BF86               	btfsc	(atan@f+2)& (0+255),7,b
  7344  00E524  D007               	goto	l404
  7345                           
  7346                           ; BSR set to: 0
  7347  00E526  C091  F084         	movff	atan@val,?_atan
  7348  00E52A  C092  F085         	movff	atan@val+1,?_atan+1
  7349  00E52E  C093  F086         	movff	atan@val+2,?_atan+2
  7350  00E532  0012               	return	
  7351  00E534                     l404:
  7352                           
  7353                           ; BSR set to: 0
  7354                           
  7355                           ; BSR set to: 0
  7356  00E534  C091  F001         	movff	atan@val,___ftneg@f1
  7357  00E538  C092  F002         	movff	atan@val+1,___ftneg@f1+1
  7358  00E53C  C093  F003         	movff	atan@val+2,___ftneg@f1+2
  7359  00E540  EC1D  F068         	call	___ftneg	;wreg free
  7360  00E544  C001  F084         	movff	?___ftneg,?_atan
  7361  00E548  C002  F085         	movff	?___ftneg+1,?_atan+1
  7362  00E54C  C003  F086         	movff	?___ftneg+2,?_atan+2
  7363  00E550  0012               	return	
  7364  00E552                     __end_of_atan:
  7365                           	opt stack 0
  7366                           tblptru	equ	0xFF8
  7367                           tblptrh	equ	0xFF7
  7368                           tblptrl	equ	0xFF6
  7369                           tablat	equ	0xFF5
  7370                           prodh	equ	0xFF4
  7371                           prodl	equ	0xFF3
  7372                           wreg	equ	0xFE8
  7373                           postinc2	equ	0xFDE
  7374                           postdec2	equ	0xFDD
  7375                           fsr2h	equ	0xFDA
  7376                           fsr2l	equ	0xFD9
  7377                           status	equ	0xFD8
  7378                           
  7379 ;; *************** function _fabs *****************
  7380 ;; Defined at:
  7381 ;;		line 4 in file "/opt/microchip/xc8/v1.44/sources/common/fabs.c"
  7382 ;; Parameters:    Size  Location     Type
  7383 ;;  d               3    3[COMRAM] unsigned char 
  7384 ;; Auto vars:     Size  Location     Type
  7385 ;;		None
  7386 ;; Return value:  Size  Location     Type
  7387 ;;                  3    3[COMRAM] unsigned char 
  7388 ;; Registers used:
  7389 ;;		wreg, status,2, status,0, cstack
  7390 ;; Tracked objects:
  7391 ;;		On entry : 0/0
  7392 ;;		On exit  : 0/0
  7393 ;;		Unchanged: 0/0
  7394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7395 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7398 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7399 ;;Total ram usage:        3 bytes
  7400 ;; Hardware stack levels used:    1
  7401 ;; Hardware stack levels required when called:    1
  7402 ;; This function calls:
  7403 ;;		___ftneg
  7404 ;; This function is called by:
  7405 ;;		_atan
  7406 ;;		_atan2
  7407 ;; This function uses a non-reentrant model
  7408 ;;
  7409                           
  7410                           	psect	text25
  7411  00D0B4                     __ptext25:
  7412                           	opt stack 0
  7413  00D0B4                     _fabs:
  7414                           	opt stack 28
  7415                           
  7416                           ;incstack = 0
  7417  00D0B4  AE06               	btfss	fabs@d+2,7,c
  7418  00D0B6  D00F               	goto	l503
  7419  00D0B8  C004  F001         	movff	fabs@d,___ftneg@f1
  7420  00D0BC  C005  F002         	movff	fabs@d+1,___ftneg@f1+1
  7421  00D0C0  C006  F003         	movff	fabs@d+2,___ftneg@f1+2
  7422  00D0C4  EC1D  F068         	call	___ftneg	;wreg free
  7423  00D0C8  C001  F004         	movff	?___ftneg,?_fabs
  7424  00D0CC  C002  F005         	movff	?___ftneg+1,?_fabs+1
  7425  00D0D0  C003  F006         	movff	?___ftneg+2,?_fabs+2
  7426  00D0D4  0012               	return	
  7427  00D0D6                     l503:
  7428  00D0D6  C004  F004         	movff	fabs@d,?_fabs
  7429  00D0DA  C005  F005         	movff	fabs@d+1,?_fabs+1
  7430  00D0DE  C006  F006         	movff	fabs@d+2,?_fabs+2
  7431  00D0E2  0012               	return		;funcret
  7432  00D0E4                     __end_of_fabs:
  7433                           	opt stack 0
  7434                           tblptru	equ	0xFF8
  7435                           tblptrh	equ	0xFF7
  7436                           tblptrl	equ	0xFF6
  7437                           tablat	equ	0xFF5
  7438                           prodh	equ	0xFF4
  7439                           prodl	equ	0xFF3
  7440                           wreg	equ	0xFE8
  7441                           postinc2	equ	0xFDE
  7442                           postdec2	equ	0xFDD
  7443                           fsr2h	equ	0xFDA
  7444                           fsr2l	equ	0xFD9
  7445                           status	equ	0xFD8
  7446                           
  7447 ;; *************** function ___ftneg *****************
  7448 ;; Defined at:
  7449 ;;		line 15 in file "/opt/microchip/xc8/v1.44/sources/common/ftneg.c"
  7450 ;; Parameters:    Size  Location     Type
  7451 ;;  f1              3    0[COMRAM] float 
  7452 ;; Auto vars:     Size  Location     Type
  7453 ;;		None
  7454 ;; Return value:  Size  Location     Type
  7455 ;;                  3    0[COMRAM] float 
  7456 ;; Registers used:
  7457 ;;		wreg, status,2, status,0
  7458 ;; Tracked objects:
  7459 ;;		On entry : 0/0
  7460 ;;		On exit  : 0/0
  7461 ;;		Unchanged: 0/0
  7462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7463 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7466 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7467 ;;Total ram usage:        3 bytes
  7468 ;; Hardware stack levels used:    1
  7469 ;; This function calls:
  7470 ;;		Nothing
  7471 ;; This function is called by:
  7472 ;;		_printf
  7473 ;;		_atan
  7474 ;;		_atan2
  7475 ;;		_fabs
  7476 ;;		_pow
  7477 ;;		_exp
  7478 ;; This function uses a non-reentrant model
  7479 ;;
  7480                           
  7481                           	psect	text26
  7482  00D03A                     __ptext26:
  7483                           	opt stack 0
  7484  00D03A                     ___ftneg:
  7485                           	opt stack 29
  7486                           
  7487                           ;incstack = 0
  7488  00D03A  5001               	movf	___ftneg@f1,w,c
  7489  00D03C  1002               	iorwf	___ftneg@f1+1,w,c
  7490  00D03E  1003               	iorwf	___ftneg@f1+2,w,c
  7491  00D040  B4D8               	btfsc	status,2,c
  7492  00D042  D006               	goto	l646
  7493  00D044  0E00               	movlw	0
  7494  00D046  1A01               	xorwf	___ftneg@f1,f,c
  7495  00D048  0E00               	movlw	0
  7496  00D04A  1A02               	xorwf	___ftneg@f1+1,f,c
  7497  00D04C  0E80               	movlw	128
  7498  00D04E  1A03               	xorwf	___ftneg@f1+2,f,c
  7499  00D050                     l646:
  7500  00D050  C001  F001         	movff	___ftneg@f1,?___ftneg
  7501  00D054  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  7502  00D058  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  7503  00D05C  0012               	return		;funcret
  7504  00D05E                     __end_of___ftneg:
  7505                           	opt stack 0
  7506                           tblptru	equ	0xFF8
  7507                           tblptrh	equ	0xFF7
  7508                           tblptrl	equ	0xFF6
  7509                           tablat	equ	0xFF5
  7510                           prodh	equ	0xFF4
  7511                           prodl	equ	0xFF3
  7512                           wreg	equ	0xFE8
  7513                           postinc2	equ	0xFDE
  7514                           postdec2	equ	0xFDD
  7515                           fsr2h	equ	0xFDA
  7516                           fsr2l	equ	0xFD9
  7517                           status	equ	0xFD8
  7518                           
  7519 ;; *************** function _eval_poly *****************
  7520 ;; Defined at:
  7521 ;;		line 4 in file "/opt/microchip/xc8/v1.44/sources/common/evalpoly.c"
  7522 ;; Parameters:    Size  Location     Type
  7523 ;;  x               3   66[COMRAM] float 
  7524 ;;  d               2   69[COMRAM] PTR const 
  7525 ;;		 -> log@coeff(27), exp@coeff(30), atan@coeff_a(18), atan@coeff_b(15), 
  7526 ;;  n               2   71[COMRAM] int 
  7527 ;; Auto vars:     Size  Location     Type
  7528 ;;  res             3   75[COMRAM] int 
  7529 ;; Return value:  Size  Location     Type
  7530 ;;                  3   66[COMRAM] int 
  7531 ;; Registers used:
  7532 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7533 ;; Tracked objects:
  7534 ;;		On entry : 0/0
  7535 ;;		On exit  : 0/0
  7536 ;;		Unchanged: 0/0
  7537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7538 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7539 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7540 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7541 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7542 ;;Total ram usage:       12 bytes
  7543 ;; Hardware stack levels used:    1
  7544 ;; Hardware stack levels required when called:    2
  7545 ;; This function calls:
  7546 ;;		___ftadd
  7547 ;;		___ftmul
  7548 ;;		___wmul
  7549 ;; This function is called by:
  7550 ;;		_atan
  7551 ;;		_exp
  7552 ;;		_log
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           	psect	text27
  7557  00D6DE                     __ptext27:
  7558                           	opt stack 0
  7559  00D6DE                     _eval_poly:
  7560                           	opt stack 26
  7561                           
  7562                           ;incstack = 0
  7563  00D6DE  C048  F00F         	movff	eval_poly@n,___wmul@multiplier
  7564  00D6E2  C049  F010         	movff	eval_poly@n+1,___wmul@multiplier+1
  7565  00D6E6  0E00               	movlw	0
  7566  00D6E8  6E12               	movwf	___wmul@multiplicand+1,c
  7567  00D6EA  0E03               	movlw	3
  7568  00D6EC  6E11               	movwf	___wmul@multiplicand,c
  7569  00D6EE  EC2F  F068         	call	___wmul	;wreg free
  7570  00D6F2  C046  F04A         	movff	eval_poly@d,??_eval_poly
  7571  00D6F6  C047  F04B         	movff	eval_poly@d+1,??_eval_poly+1
  7572  00D6FA  500F               	movf	?___wmul,w,c
  7573  00D6FC  264A               	addwf	??_eval_poly,f,c
  7574  00D6FE  5010               	movf	?___wmul+1,w,c
  7575  00D700  224B               	addwfc	??_eval_poly+1,f,c
  7576  00D702  C04A  FFF6         	movff	??_eval_poly,tblptrl
  7577  00D706  C04B  FFF7         	movff	??_eval_poly+1,tblptrh
  7578  00D70A                     	if	0	;tblptru may be non-zero
  7579  00D70A                     	endif
  7580  00D70A                     	if	0	;tblptru may be non-zero
  7581  00D70A                     	endif
  7582  00D70A  0009               	tblrd		*+
  7583  00D70C  CFF5 F04C          	movff	tablat,eval_poly@res
  7584  00D710  0009               	tblrd		*+
  7585  00D712  CFF5 F04D          	movff	tablat,eval_poly@res+1
  7586  00D716  000A               	tblrd		*-
  7587  00D718  CFF5 F04E          	movff	tablat,eval_poly@res+2
  7588  00D71C  D03E               	goto	l497
  7589  00D71E  C04C  F01C         	movff	eval_poly@res,___ftmul@f2
  7590  00D722  C04D  F01D         	movff	eval_poly@res+1,___ftmul@f2+1
  7591  00D726  C04E  F01E         	movff	eval_poly@res+2,___ftmul@f2+2
  7592  00D72A  C043  F019         	movff	eval_poly@x,___ftmul@f1
  7593  00D72E  C044  F01A         	movff	eval_poly@x+1,___ftmul@f1+1
  7594  00D732  C045  F01B         	movff	eval_poly@x+2,___ftmul@f1+2
  7595  00D736  ECBA  F06C         	call	___ftmul	;wreg free
  7596  00D73A  C019  F037         	movff	?___ftmul,___ftadd@f1
  7597  00D73E  C01A  F038         	movff	?___ftmul+1,___ftadd@f1+1
  7598  00D742  C01B  F039         	movff	?___ftmul+2,___ftadd@f1+2
  7599  00D746  0E00               	movlw	0
  7600  00D748  6E12               	movwf	___wmul@multiplicand+1,c
  7601  00D74A  0E03               	movlw	3
  7602  00D74C  6E11               	movwf	___wmul@multiplicand,c
  7603  00D74E  0648               	decf	eval_poly@n,f,c
  7604  00D750  A0D8               	btfss	status,0,c
  7605  00D752  0649               	decf	eval_poly@n+1,f,c
  7606  00D754  C048  F00F         	movff	eval_poly@n,___wmul@multiplier
  7607  00D758  C049  F010         	movff	eval_poly@n+1,___wmul@multiplier+1
  7608  00D75C  EC2F  F068         	call	___wmul	;wreg free
  7609  00D760  C046  F04A         	movff	eval_poly@d,??_eval_poly
  7610  00D764  C047  F04B         	movff	eval_poly@d+1,??_eval_poly+1
  7611  00D768  500F               	movf	?___wmul,w,c
  7612  00D76A  264A               	addwf	??_eval_poly,f,c
  7613  00D76C  5010               	movf	?___wmul+1,w,c
  7614  00D76E  224B               	addwfc	??_eval_poly+1,f,c
  7615  00D770  C04A  FFF6         	movff	??_eval_poly,tblptrl
  7616  00D774  C04B  FFF7         	movff	??_eval_poly+1,tblptrh
  7617  00D778                     	if	0	;tblptru may be non-zero
  7618  00D778                     	endif
  7619  00D778                     	if	0	;tblptru may be non-zero
  7620  00D778                     	endif
  7621  00D778  0009               	tblrd		*+
  7622  00D77A  CFF5 F03A          	movff	tablat,___ftadd@f2
  7623  00D77E  0009               	tblrd		*+
  7624  00D780  CFF5 F03B          	movff	tablat,___ftadd@f2+1
  7625  00D784  000A               	tblrd		*-
  7626  00D786  CFF5 F03C          	movff	tablat,___ftadd@f2+2
  7627  00D78A  ECF1  F070         	call	___ftadd	;wreg free
  7628  00D78E  C037  F04C         	movff	?___ftadd,eval_poly@res
  7629  00D792  C038  F04D         	movff	?___ftadd+1,eval_poly@res+1
  7630  00D796  C039  F04E         	movff	?___ftadd+2,eval_poly@res+2
  7631  00D79A                     l497:
  7632  00D79A  5048               	movf	eval_poly@n,w,c
  7633  00D79C  1049               	iorwf	eval_poly@n+1,w,c
  7634  00D79E  A4D8               	btfss	status,2,c
  7635  00D7A0  D7BE               	goto	l498
  7636  00D7A2  C04C  F043         	movff	eval_poly@res,?_eval_poly
  7637  00D7A6  C04D  F044         	movff	eval_poly@res+1,?_eval_poly+1
  7638  00D7AA  C04E  F045         	movff	eval_poly@res+2,?_eval_poly+2
  7639  00D7AE  0012               	return		;funcret
  7640  00D7B0                     __end_of_eval_poly:
  7641                           	opt stack 0
  7642                           tblptru	equ	0xFF8
  7643                           tblptrh	equ	0xFF7
  7644                           tblptrl	equ	0xFF6
  7645                           tablat	equ	0xFF5
  7646                           prodh	equ	0xFF4
  7647                           prodl	equ	0xFF3
  7648                           wreg	equ	0xFE8
  7649                           postinc2	equ	0xFDE
  7650                           postdec2	equ	0xFDD
  7651                           fsr2h	equ	0xFDA
  7652                           fsr2l	equ	0xFD9
  7653                           status	equ	0xFD8
  7654                           
  7655 ;; *************** function ___wmul *****************
  7656 ;; Defined at:
  7657 ;;		line 15 in file "/opt/microchip/xc8/v1.44/sources/common/Umul16.c"
  7658 ;; Parameters:    Size  Location     Type
  7659 ;;  multiplier      2   14[COMRAM] unsigned int 
  7660 ;;  multiplicand    2   16[COMRAM] unsigned int 
  7661 ;; Auto vars:     Size  Location     Type
  7662 ;;  product         2   18[COMRAM] unsigned int 
  7663 ;; Return value:  Size  Location     Type
  7664 ;;                  2   14[COMRAM] unsigned int 
  7665 ;; Registers used:
  7666 ;;		wreg, status,2, status,0, prodl, prodh
  7667 ;; Tracked objects:
  7668 ;;		On entry : 0/0
  7669 ;;		On exit  : 0/0
  7670 ;;		Unchanged: 0/0
  7671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7672 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7673 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7675 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7676 ;;Total ram usage:        6 bytes
  7677 ;; Hardware stack levels used:    1
  7678 ;; This function calls:
  7679 ;;		Nothing
  7680 ;; This function is called by:
  7681 ;;		_main
  7682 ;;		_fround
  7683 ;;		_scale
  7684 ;;		_printf
  7685 ;;		_eval_poly
  7686 ;; This function uses a non-reentrant model
  7687 ;;
  7688                           
  7689                           	psect	text28
  7690  00D05E                     __ptext28:
  7691                           	opt stack 0
  7692  00D05E                     ___wmul:
  7693                           	opt stack 28
  7694                           
  7695                           ;incstack = 0
  7696  00D05E  500F               	movf	___wmul@multiplier,w,c
  7697  00D060  0211               	mulwf	___wmul@multiplicand,c
  7698  00D062  CFF3 F013          	movff	prodl,___wmul@product
  7699  00D066  CFF4 F014          	movff	prodh,___wmul@product+1
  7700  00D06A  500F               	movf	___wmul@multiplier,w,c
  7701  00D06C  0212               	mulwf	___wmul@multiplicand+1,c
  7702  00D06E  50F3               	movf	prodl,w,c
  7703  00D070  2614               	addwf	___wmul@product+1,f,c
  7704  00D072  5010               	movf	___wmul@multiplier+1,w,c
  7705  00D074  0211               	mulwf	___wmul@multiplicand,c
  7706  00D076  50F3               	movf	prodl,w,c
  7707  00D078  2614               	addwf	___wmul@product+1,f,c
  7708  00D07A  C013  F00F         	movff	___wmul@product,?___wmul
  7709  00D07E  C014  F010         	movff	___wmul@product+1,?___wmul+1
  7710  00D082  0012               	return	
  7711  00D084                     __end_of___wmul:
  7712                           	opt stack 0
  7713                           tblptru	equ	0xFF8
  7714                           tblptrh	equ	0xFF7
  7715                           tblptrl	equ	0xFF6
  7716                           tablat	equ	0xFF5
  7717                           prodh	equ	0xFF4
  7718                           prodl	equ	0xFF3
  7719                           wreg	equ	0xFE8
  7720                           postinc2	equ	0xFDE
  7721                           postdec2	equ	0xFDD
  7722                           fsr2h	equ	0xFDA
  7723                           fsr2l	equ	0xFD9
  7724                           status	equ	0xFD8
  7725                           
  7726 ;; *************** function ___ftmul *****************
  7727 ;; Defined at:
  7728 ;;		line 62 in file "/opt/microchip/xc8/v1.44/sources/common/ftmul.c"
  7729 ;; Parameters:    Size  Location     Type
  7730 ;;  f1              3   24[COMRAM] float 
  7731 ;;  f2              3   27[COMRAM] float 
  7732 ;; Auto vars:     Size  Location     Type
  7733 ;;  f3_as_produc    3   34[COMRAM] unsigned um
  7734 ;;  sign            1   38[COMRAM] unsigned char 
  7735 ;;  cntr            1   37[COMRAM] unsigned char 
  7736 ;;  exp             1   33[COMRAM] unsigned char 
  7737 ;; Return value:  Size  Location     Type
  7738 ;;                  3   24[COMRAM] float 
  7739 ;; Registers used:
  7740 ;;		wreg, status,2, status,0, cstack
  7741 ;; Tracked objects:
  7742 ;;		On entry : 0/0
  7743 ;;		On exit  : 0/0
  7744 ;;		Unchanged: 0/0
  7745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7746 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7747 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7748 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7749 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7750 ;;Total ram usage:       15 bytes
  7751 ;; Hardware stack levels used:    1
  7752 ;; Hardware stack levels required when called:    1
  7753 ;; This function calls:
  7754 ;;		___ftpack
  7755 ;; This function is called by:
  7756 ;;		_main
  7757 ;;		_fround
  7758 ;;		_scale
  7759 ;;		_printf
  7760 ;;		_atan
  7761 ;;		_eval_poly
  7762 ;;		_pow
  7763 ;;		_sqrt
  7764 ;;		_exp
  7765 ;;		_log
  7766 ;; This function uses a non-reentrant model
  7767 ;;
  7768                           
  7769                           	psect	text29
  7770  00D974                     __ptext29:
  7771                           	opt stack 0
  7772  00D974                     ___ftmul:
  7773                           	opt stack 28
  7774                           
  7775                           ;incstack = 0
  7776  00D974  C01B  F01F         	movff	___ftmul@f1+2,??___ftmul
  7777  00D978  6A20               	clrf	(??___ftmul+1)& (0+255),c
  7778  00D97A  6A21               	clrf	(??___ftmul+2)& (0+255),c
  7779  00D97C  341A               	rlcf	___ftmul@f1+1,w,c
  7780  00D97E  361F               	rlcf	??___ftmul& (0+255),f,c
  7781  00D980  E301               	bnc	u2111
  7782  00D982  8020               	bsf	(??___ftmul+1)& (0+255),0,c
  7783  00D984                     u2111:
  7784  00D984  501F               	movf	??___ftmul,w,c
  7785  00D986  6E22               	movwf	___ftmul@exp,c
  7786  00D988  5022               	movf	___ftmul@exp,w,c
  7787  00D98A  A4D8               	btfss	status,2,c
  7788  00D98C  D007               	goto	l635
  7789  00D98E  0E00               	movlw	0
  7790  00D990  6E19               	movwf	?___ftmul,c
  7791  00D992  0E00               	movlw	0
  7792  00D994  6E1A               	movwf	?___ftmul+1,c
  7793  00D996  0E00               	movlw	0
  7794  00D998  6E1B               	movwf	?___ftmul+2,c
  7795  00D99A  0012               	return	
  7796  00D99C                     l635:
  7797  00D99C  C01E  F01F         	movff	___ftmul@f2+2,??___ftmul
  7798  00D9A0  6A20               	clrf	(??___ftmul+1)& (0+255),c
  7799  00D9A2  6A21               	clrf	(??___ftmul+2)& (0+255),c
  7800  00D9A4  341D               	rlcf	___ftmul@f2+1,w,c
  7801  00D9A6  361F               	rlcf	??___ftmul& (0+255),f,c
  7802  00D9A8  E301               	bnc	u2131
  7803  00D9AA  8020               	bsf	(??___ftmul+1)& (0+255),0,c
  7804  00D9AC                     u2131:
  7805  00D9AC  501F               	movf	??___ftmul,w,c
  7806  00D9AE  6E27               	movwf	___ftmul@sign,c
  7807  00D9B0  5027               	movf	___ftmul@sign,w,c
  7808  00D9B2  A4D8               	btfss	status,2,c
  7809  00D9B4  D007               	goto	l637
  7810  00D9B6  0E00               	movlw	0
  7811  00D9B8  6E19               	movwf	?___ftmul,c
  7812  00D9BA  0E00               	movlw	0
  7813  00D9BC  6E1A               	movwf	?___ftmul+1,c
  7814  00D9BE  0E00               	movlw	0
  7815  00D9C0  6E1B               	movwf	?___ftmul+2,c
  7816  00D9C2  0012               	return	
  7817  00D9C4                     l637:
  7818  00D9C4  5027               	movf	___ftmul@sign,w,c
  7819  00D9C6  0F7B               	addlw	123
  7820  00D9C8  2622               	addwf	___ftmul@exp,f,c
  7821  00D9CA  C01B  F027         	movff	___ftmul@f1+2,___ftmul@sign
  7822  00D9CE  501E               	movf	___ftmul@f2+2,w,c
  7823  00D9D0  1A27               	xorwf	___ftmul@sign,f,c
  7824  00D9D2  0E80               	movlw	128
  7825  00D9D4  1627               	andwf	___ftmul@sign,f,c
  7826  00D9D6  8E1A               	bsf	___ftmul@f1+1,7,c
  7827  00D9D8  8E1D               	bsf	___ftmul@f2+1,7,c
  7828  00D9DA  0EFF               	movlw	255
  7829  00D9DC  161C               	andwf	___ftmul@f2,f,c
  7830  00D9DE  0EFF               	movlw	255
  7831  00D9E0  161D               	andwf	___ftmul@f2+1,f,c
  7832  00D9E2  0E00               	movlw	0
  7833  00D9E4  161E               	andwf	___ftmul@f2+2,f,c
  7834  00D9E6  0E00               	movlw	0
  7835  00D9E8  6E23               	movwf	___ftmul@f3_as_product,c
  7836  00D9EA  0E00               	movlw	0
  7837  00D9EC  6E24               	movwf	___ftmul@f3_as_product+1,c
  7838  00D9EE  0E00               	movlw	0
  7839  00D9F0  6E25               	movwf	___ftmul@f3_as_product+2,c
  7840  00D9F2  0E07               	movlw	7
  7841  00D9F4  6E26               	movwf	___ftmul@cntr,c
  7842  00D9F6  A019               	btfss	___ftmul@f1,0,c
  7843  00D9F8  D006               	goto	l639
  7844  00D9FA  501C               	movf	___ftmul@f2,w,c
  7845  00D9FC  2623               	addwf	___ftmul@f3_as_product,f,c
  7846  00D9FE  501D               	movf	___ftmul@f2+1,w,c
  7847  00DA00  2224               	addwfc	___ftmul@f3_as_product+1,f,c
  7848  00DA02  501E               	movf	___ftmul@f2+2,w,c
  7849  00DA04  2225               	addwfc	___ftmul@f3_as_product+2,f,c
  7850  00DA06                     l639:
  7851  00DA06  90D8               	bcf	status,0,c
  7852  00DA08  321B               	rrcf	___ftmul@f1+2,f,c
  7853  00DA0A  321A               	rrcf	___ftmul@f1+1,f,c
  7854  00DA0C  3219               	rrcf	___ftmul@f1,f,c
  7855  00DA0E  90D8               	bcf	status,0,c
  7856  00DA10  361C               	rlcf	___ftmul@f2,f,c
  7857  00DA12  361D               	rlcf	___ftmul@f2+1,f,c
  7858  00DA14  361E               	rlcf	___ftmul@f2+2,f,c
  7859  00DA16  2E26               	decfsz	___ftmul@cntr,f,c
  7860  00DA18  D7EE               	goto	l638
  7861  00DA1A  0E09               	movlw	9
  7862  00DA1C  6E26               	movwf	___ftmul@cntr,c
  7863  00DA1E  A019               	btfss	___ftmul@f1,0,c
  7864  00DA20  D006               	goto	l642
  7865  00DA22  501C               	movf	___ftmul@f2,w,c
  7866  00DA24  2623               	addwf	___ftmul@f3_as_product,f,c
  7867  00DA26  501D               	movf	___ftmul@f2+1,w,c
  7868  00DA28  2224               	addwfc	___ftmul@f3_as_product+1,f,c
  7869  00DA2A  501E               	movf	___ftmul@f2+2,w,c
  7870  00DA2C  2225               	addwfc	___ftmul@f3_as_product+2,f,c
  7871  00DA2E                     l642:
  7872  00DA2E  90D8               	bcf	status,0,c
  7873  00DA30  321B               	rrcf	___ftmul@f1+2,f,c
  7874  00DA32  321A               	rrcf	___ftmul@f1+1,f,c
  7875  00DA34  3219               	rrcf	___ftmul@f1,f,c
  7876  00DA36  90D8               	bcf	status,0,c
  7877  00DA38  3225               	rrcf	___ftmul@f3_as_product+2,f,c
  7878  00DA3A  3224               	rrcf	___ftmul@f3_as_product+1,f,c
  7879  00DA3C  3223               	rrcf	___ftmul@f3_as_product,f,c
  7880  00DA3E  2E26               	decfsz	___ftmul@cntr,f,c
  7881  00DA40  D7EE               	goto	l641
  7882  00DA42  C023  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7883  00DA46  C024  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7884  00DA4A  C025  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7885  00DA4E  C022  F004         	movff	___ftmul@exp,___ftpack@exp
  7886  00DA52  C027  F005         	movff	___ftmul@sign,___ftpack@sign
  7887  00DA56  ECB5  F06A         	call	___ftpack	;wreg free
  7888  00DA5A  C001  F019         	movff	?___ftpack,?___ftmul
  7889  00DA5E  C002  F01A         	movff	?___ftpack+1,?___ftmul+1
  7890  00DA62  C003  F01B         	movff	?___ftpack+2,?___ftmul+2
  7891  00DA66  0012               	return	
  7892  00DA68                     __end_of___ftmul:
  7893                           	opt stack 0
  7894                           tblptru	equ	0xFF8
  7895                           tblptrh	equ	0xFF7
  7896                           tblptrl	equ	0xFF6
  7897                           tablat	equ	0xFF5
  7898                           prodh	equ	0xFF4
  7899                           prodl	equ	0xFF3
  7900                           wreg	equ	0xFE8
  7901                           postinc2	equ	0xFDE
  7902                           postdec2	equ	0xFDD
  7903                           fsr2h	equ	0xFDA
  7904                           fsr2l	equ	0xFD9
  7905                           status	equ	0xFD8
  7906                           
  7907 ;; *************** function ___ftge *****************
  7908 ;; Defined at:
  7909 ;;		line 4 in file "/opt/microchip/xc8/v1.44/sources/common/ftge.c"
  7910 ;; Parameters:    Size  Location     Type
  7911 ;;  ff1             3    6[COMRAM] float 
  7912 ;;  ff2             3    9[COMRAM] float 
  7913 ;; Auto vars:     Size  Location     Type
  7914 ;;		None
  7915 ;; Return value:  Size  Location     Type
  7916 ;;		None               void
  7917 ;; Registers used:
  7918 ;;		wreg, status,2, status,0
  7919 ;; Tracked objects:
  7920 ;;		On entry : 0/0
  7921 ;;		On exit  : 0/0
  7922 ;;		Unchanged: 0/0
  7923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7924 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7926 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7927 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7928 ;;Total ram usage:        9 bytes
  7929 ;; Hardware stack levels used:    1
  7930 ;; This function calls:
  7931 ;;		Nothing
  7932 ;; This function is called by:
  7933 ;;		_printf
  7934 ;;		_atan
  7935 ;;		_atan2
  7936 ;;		_pow
  7937 ;;		_sqrt
  7938 ;;		_exp
  7939 ;;		_floor
  7940 ;; This function uses a non-reentrant model
  7941 ;;
  7942                           
  7943                           	psect	text30
  7944  00D44A                     __ptext30:
  7945                           	opt stack 0
  7946  00D44A                     ___ftge:
  7947                           	opt stack 29
  7948                           
  7949                           ;incstack = 0
  7950  00D44A  AE09               	btfss	___ftge@ff1+2,7,c
  7951  00D44C  D016               	goto	l628
  7952  00D44E  C007  F00D         	movff	___ftge@ff1,??___ftge
  7953  00D452  C008  F00E         	movff	___ftge@ff1+1,??___ftge+1
  7954  00D456  C009  F00F         	movff	___ftge@ff1+2,??___ftge+2
  7955  00D45A  1E0D               	comf	??___ftge,f,c
  7956  00D45C  1E0E               	comf	??___ftge+1,f,c
  7957  00D45E  1E0F               	comf	??___ftge+2,f,c
  7958  00D460  2A0D               	incf	??___ftge,f,c
  7959  00D462  0E00               	movlw	0
  7960  00D464  220E               	addwfc	??___ftge+1,f,c
  7961  00D466  220F               	addwfc	??___ftge+2,f,c
  7962  00D468  0E00               	movlw	0
  7963  00D46A  240D               	addwf	??___ftge,w,c
  7964  00D46C  6E07               	movwf	___ftge@ff1,c
  7965  00D46E  0E00               	movlw	0
  7966  00D470  200E               	addwfc	??___ftge+1,w,c
  7967  00D472  6E08               	movwf	___ftge@ff1+1,c
  7968  00D474  0E80               	movlw	128
  7969  00D476  200F               	addwfc	??___ftge+2,w,c
  7970  00D478  6E09               	movwf	___ftge@ff1+2,c
  7971  00D47A                     l628:
  7972  00D47A  AE0C               	btfss	___ftge@ff2+2,7,c
  7973  00D47C  D016               	goto	l629
  7974  00D47E  C00A  F00D         	movff	___ftge@ff2,??___ftge
  7975  00D482  C00B  F00E         	movff	___ftge@ff2+1,??___ftge+1
  7976  00D486  C00C  F00F         	movff	___ftge@ff2+2,??___ftge+2
  7977  00D48A  1E0D               	comf	??___ftge,f,c
  7978  00D48C  1E0E               	comf	??___ftge+1,f,c
  7979  00D48E  1E0F               	comf	??___ftge+2,f,c
  7980  00D490  2A0D               	incf	??___ftge,f,c
  7981  00D492  0E00               	movlw	0
  7982  00D494  220E               	addwfc	??___ftge+1,f,c
  7983  00D496  220F               	addwfc	??___ftge+2,f,c
  7984  00D498  0E00               	movlw	0
  7985  00D49A  240D               	addwf	??___ftge,w,c
  7986  00D49C  6E0A               	movwf	___ftge@ff2,c
  7987  00D49E  0E00               	movlw	0
  7988  00D4A0  200E               	addwfc	??___ftge+1,w,c
  7989  00D4A2  6E0B               	movwf	___ftge@ff2+1,c
  7990  00D4A4  0E80               	movlw	128
  7991  00D4A6  200F               	addwfc	??___ftge+2,w,c
  7992  00D4A8  6E0C               	movwf	___ftge@ff2+2,c
  7993  00D4AA                     l629:
  7994  00D4AA  0E00               	movlw	0
  7995  00D4AC  1A07               	xorwf	___ftge@ff1,f,c
  7996  00D4AE  0E00               	movlw	0
  7997  00D4B0  1A08               	xorwf	___ftge@ff1+1,f,c
  7998  00D4B2  0E80               	movlw	128
  7999  00D4B4  1A09               	xorwf	___ftge@ff1+2,f,c
  8000  00D4B6  0E00               	movlw	0
  8001  00D4B8  1A0A               	xorwf	___ftge@ff2,f,c
  8002  00D4BA  0E00               	movlw	0
  8003  00D4BC  1A0B               	xorwf	___ftge@ff2+1,f,c
  8004  00D4BE  0E80               	movlw	128
  8005  00D4C0  1A0C               	xorwf	___ftge@ff2+2,f,c
  8006  00D4C2  500A               	movf	___ftge@ff2,w,c
  8007  00D4C4  5C07               	subwf	___ftge@ff1,w,c
  8008  00D4C6  500B               	movf	___ftge@ff2+1,w,c
  8009  00D4C8  5808               	subwfb	___ftge@ff1+1,w,c
  8010  00D4CA  500C               	movf	___ftge@ff2+2,w,c
  8011  00D4CC  5809               	subwfb	___ftge@ff1+2,w,c
  8012  00D4CE  B0D8               	btfsc	status,0,c
  8013  00D4D0  D002               	goto	l2391
  8014  00D4D2  90D8               	bcf	status,0,c
  8015  00D4D4  0012               	return	
  8016  00D4D6                     l2391:
  8017  00D4D6  80D8               	bsf	status,0,c
  8018  00D4D8  0012               	return	
  8019  00D4DA                     __end_of___ftge:
  8020                           	opt stack 0
  8021                           tblptru	equ	0xFF8
  8022                           tblptrh	equ	0xFF7
  8023                           tblptrl	equ	0xFF6
  8024                           tablat	equ	0xFF5
  8025                           prodh	equ	0xFF4
  8026                           prodl	equ	0xFF3
  8027                           wreg	equ	0xFE8
  8028                           postinc2	equ	0xFDE
  8029                           postdec2	equ	0xFDD
  8030                           fsr2h	equ	0xFDA
  8031                           fsr2l	equ	0xFD9
  8032                           status	equ	0xFD8
  8033                           
  8034 ;; *************** function ___ftdiv *****************
  8035 ;; Defined at:
  8036 ;;		line 54 in file "/opt/microchip/xc8/v1.44/sources/common/ftdiv.c"
  8037 ;; Parameters:    Size  Location     Type
  8038 ;;  f1              3   39[COMRAM] float 
  8039 ;;  f2              3   42[COMRAM] float 
  8040 ;; Auto vars:     Size  Location     Type
  8041 ;;  f3              3   49[COMRAM] float 
  8042 ;;  sign            1   53[COMRAM] unsigned char 
  8043 ;;  exp             1   52[COMRAM] unsigned char 
  8044 ;;  cntr            1   48[COMRAM] unsigned char 
  8045 ;; Return value:  Size  Location     Type
  8046 ;;                  3   39[COMRAM] float 
  8047 ;; Registers used:
  8048 ;;		wreg, status,2, status,0, cstack
  8049 ;; Tracked objects:
  8050 ;;		On entry : 0/0
  8051 ;;		On exit  : 0/0
  8052 ;;		Unchanged: 0/0
  8053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8054 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8055 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8056 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8057 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8058 ;;Total ram usage:       15 bytes
  8059 ;; Hardware stack levels used:    1
  8060 ;; Hardware stack levels required when called:    1
  8061 ;; This function calls:
  8062 ;;		___ftpack
  8063 ;; This function is called by:
  8064 ;;		_main
  8065 ;;		_atan
  8066 ;;		_atan2
  8067 ;;		_exp
  8068 ;; This function uses a non-reentrant model
  8069 ;;
  8070                           
  8071                           	psect	text31
  8072  00D88E                     __ptext31:
  8073                           	opt stack 0
  8074  00D88E                     ___ftdiv:
  8075                           	opt stack 27
  8076                           
  8077                           ;incstack = 0
  8078  00D88E  C02A  F02E         	movff	___ftdiv@f1+2,??___ftdiv
  8079  00D892  6A2F               	clrf	(??___ftdiv+1)& (0+255),c
  8080  00D894  6A30               	clrf	(??___ftdiv+2)& (0+255),c
  8081  00D896  3429               	rlcf	___ftdiv@f1+1,w,c
  8082  00D898  362E               	rlcf	??___ftdiv& (0+255),f,c
  8083  00D89A  E301               	bnc	u2321
  8084  00D89C  802F               	bsf	(??___ftdiv+1)& (0+255),0,c
  8085  00D89E                     u2321:
  8086  00D89E  502E               	movf	??___ftdiv,w,c
  8087  00D8A0  6E35               	movwf	___ftdiv@exp,c
  8088  00D8A2  5035               	movf	___ftdiv@exp,w,c
  8089  00D8A4  A4D8               	btfss	status,2,c
  8090  00D8A6  D007               	goto	l603
  8091  00D8A8  0E00               	movlw	0
  8092  00D8AA  6E28               	movwf	?___ftdiv,c
  8093  00D8AC  0E00               	movlw	0
  8094  00D8AE  6E29               	movwf	?___ftdiv+1,c
  8095  00D8B0  0E00               	movlw	0
  8096  00D8B2  6E2A               	movwf	?___ftdiv+2,c
  8097  00D8B4  0012               	return	
  8098  00D8B6                     l603:
  8099  00D8B6  C02D  F02E         	movff	___ftdiv@f2+2,??___ftdiv
  8100  00D8BA  6A2F               	clrf	(??___ftdiv+1)& (0+255),c
  8101  00D8BC  6A30               	clrf	(??___ftdiv+2)& (0+255),c
  8102  00D8BE  342C               	rlcf	___ftdiv@f2+1,w,c
  8103  00D8C0  362E               	rlcf	??___ftdiv& (0+255),f,c
  8104  00D8C2  E301               	bnc	u2341
  8105  00D8C4  802F               	bsf	(??___ftdiv+1)& (0+255),0,c
  8106  00D8C6                     u2341:
  8107  00D8C6  502E               	movf	??___ftdiv,w,c
  8108  00D8C8  6E36               	movwf	___ftdiv@sign,c
  8109  00D8CA  5036               	movf	___ftdiv@sign,w,c
  8110  00D8CC  A4D8               	btfss	status,2,c
  8111  00D8CE  D007               	goto	l605
  8112  00D8D0  0E00               	movlw	0
  8113  00D8D2  6E28               	movwf	?___ftdiv,c
  8114  00D8D4  0E00               	movlw	0
  8115  00D8D6  6E29               	movwf	?___ftdiv+1,c
  8116  00D8D8  0E00               	movlw	0
  8117  00D8DA  6E2A               	movwf	?___ftdiv+2,c
  8118  00D8DC  0012               	return	
  8119  00D8DE                     l605:
  8120  00D8DE  0E00               	movlw	0
  8121  00D8E0  6E32               	movwf	___ftdiv@f3,c
  8122  00D8E2  0E00               	movlw	0
  8123  00D8E4  6E33               	movwf	___ftdiv@f3+1,c
  8124  00D8E6  0E00               	movlw	0
  8125  00D8E8  6E34               	movwf	___ftdiv@f3+2,c
  8126  00D8EA  5036               	movf	___ftdiv@sign,w,c
  8127  00D8EC  0F89               	addlw	137
  8128  00D8EE  5E35               	subwf	___ftdiv@exp,f,c
  8129  00D8F0  C02A  F036         	movff	___ftdiv@f1+2,___ftdiv@sign
  8130  00D8F4  502D               	movf	___ftdiv@f2+2,w,c
  8131  00D8F6  1A36               	xorwf	___ftdiv@sign,f,c
  8132  00D8F8  0E80               	movlw	128
  8133  00D8FA  1636               	andwf	___ftdiv@sign,f,c
  8134  00D8FC  8E29               	bsf	___ftdiv@f1+1,7,c
  8135  00D8FE  0EFF               	movlw	255
  8136  00D900  1628               	andwf	___ftdiv@f1,f,c
  8137  00D902  0EFF               	movlw	255
  8138  00D904  1629               	andwf	___ftdiv@f1+1,f,c
  8139  00D906  0E00               	movlw	0
  8140  00D908  162A               	andwf	___ftdiv@f1+2,f,c
  8141  00D90A  8E2C               	bsf	___ftdiv@f2+1,7,c
  8142  00D90C  0EFF               	movlw	255
  8143  00D90E  162B               	andwf	___ftdiv@f2,f,c
  8144  00D910  0EFF               	movlw	255
  8145  00D912  162C               	andwf	___ftdiv@f2+1,f,c
  8146  00D914  0E00               	movlw	0
  8147  00D916  162D               	andwf	___ftdiv@f2+2,f,c
  8148  00D918  0E18               	movlw	24
  8149  00D91A  6E31               	movwf	___ftdiv@cntr,c
  8150  00D91C  90D8               	bcf	status,0,c
  8151  00D91E  3632               	rlcf	___ftdiv@f3,f,c
  8152  00D920  3633               	rlcf	___ftdiv@f3+1,f,c
  8153  00D922  3634               	rlcf	___ftdiv@f3+2,f,c
  8154  00D924  502B               	movf	___ftdiv@f2,w,c
  8155  00D926  5C28               	subwf	___ftdiv@f1,w,c
  8156  00D928  502C               	movf	___ftdiv@f2+1,w,c
  8157  00D92A  5829               	subwfb	___ftdiv@f1+1,w,c
  8158  00D92C  502D               	movf	___ftdiv@f2+2,w,c
  8159  00D92E  582A               	subwfb	___ftdiv@f1+2,w,c
  8160  00D930  A0D8               	btfss	status,0,c
  8161  00D932  D007               	goto	l607
  8162  00D934  502B               	movf	___ftdiv@f2,w,c
  8163  00D936  5E28               	subwf	___ftdiv@f1,f,c
  8164  00D938  502C               	movf	___ftdiv@f2+1,w,c
  8165  00D93A  5A29               	subwfb	___ftdiv@f1+1,f,c
  8166  00D93C  502D               	movf	___ftdiv@f2+2,w,c
  8167  00D93E  5A2A               	subwfb	___ftdiv@f1+2,f,c
  8168  00D940  8032               	bsf	___ftdiv@f3,0,c
  8169  00D942                     l607:
  8170  00D942  90D8               	bcf	status,0,c
  8171  00D944  3628               	rlcf	___ftdiv@f1,f,c
  8172  00D946  3629               	rlcf	___ftdiv@f1+1,f,c
  8173  00D948  362A               	rlcf	___ftdiv@f1+2,f,c
  8174  00D94A  2E31               	decfsz	___ftdiv@cntr,f,c
  8175  00D94C  D7E7               	goto	l606
  8176  00D94E  C032  F001         	movff	___ftdiv@f3,___ftpack@arg
  8177  00D952  C033  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  8178  00D956  C034  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  8179  00D95A  C035  F004         	movff	___ftdiv@exp,___ftpack@exp
  8180  00D95E  C036  F005         	movff	___ftdiv@sign,___ftpack@sign
  8181  00D962  ECB5  F06A         	call	___ftpack	;wreg free
  8182  00D966  C001  F028         	movff	?___ftpack,?___ftdiv
  8183  00D96A  C002  F029         	movff	?___ftpack+1,?___ftdiv+1
  8184  00D96E  C003  F02A         	movff	?___ftpack+2,?___ftdiv+2
  8185  00D972  0012               	return	
  8186  00D974                     __end_of___ftdiv:
  8187                           	opt stack 0
  8188                           tblptru	equ	0xFF8
  8189                           tblptrh	equ	0xFF7
  8190                           tblptrl	equ	0xFF6
  8191                           tablat	equ	0xFF5
  8192                           prodh	equ	0xFF4
  8193                           prodl	equ	0xFF3
  8194                           wreg	equ	0xFE8
  8195                           postinc2	equ	0xFDE
  8196                           postdec2	equ	0xFDD
  8197                           fsr2h	equ	0xFDA
  8198                           fsr2l	equ	0xFD9
  8199                           status	equ	0xFD8
  8200                           
  8201 ;; *************** function ___ftsub *****************
  8202 ;; Defined at:
  8203 ;;		line 20 in file "/opt/microchip/xc8/v1.44/sources/common/ftsub.c"
  8204 ;; Parameters:    Size  Location     Type
  8205 ;;  f1              3   66[COMRAM] float 
  8206 ;;  f2              3   69[COMRAM] float 
  8207 ;; Auto vars:     Size  Location     Type
  8208 ;;		None
  8209 ;; Return value:  Size  Location     Type
  8210 ;;                  3   66[COMRAM] float 
  8211 ;; Registers used:
  8212 ;;		wreg, status,2, status,0, cstack
  8213 ;; Tracked objects:
  8214 ;;		On entry : 0/0
  8215 ;;		On exit  : 0/0
  8216 ;;		Unchanged: 0/0
  8217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8218 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8221 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8222 ;;Total ram usage:        6 bytes
  8223 ;; Hardware stack levels used:    1
  8224 ;; Hardware stack levels required when called:    2
  8225 ;; This function calls:
  8226 ;;		___ftadd
  8227 ;; This function is called by:
  8228 ;;		_printf
  8229 ;;		_atan2
  8230 ;;		_sqrt
  8231 ;;		_exp
  8232 ;; This function uses a non-reentrant model
  8233 ;;
  8234                           
  8235                           	psect	text32
  8236  00D15A                     __ptext32:
  8237                           	opt stack 0
  8238  00D15A                     ___ftsub:
  8239                           	opt stack 27
  8240                           
  8241                           ;incstack = 0
  8242  00D15A  5046               	movf	___ftsub@f2,w,c
  8243  00D15C  1047               	iorwf	___ftsub@f2+1,w,c
  8244  00D15E  1048               	iorwf	___ftsub@f2+2,w,c
  8245  00D160  B4D8               	btfsc	status,2,c
  8246  00D162  D006               	goto	l652
  8247  00D164  0E00               	movlw	0
  8248  00D166  1A46               	xorwf	___ftsub@f2,f,c
  8249  00D168  0E00               	movlw	0
  8250  00D16A  1A47               	xorwf	___ftsub@f2+1,f,c
  8251  00D16C  0E80               	movlw	128
  8252  00D16E  1A48               	xorwf	___ftsub@f2+2,f,c
  8253  00D170                     l652:
  8254  00D170  C043  F037         	movff	___ftsub@f1,___ftadd@f1
  8255  00D174  C044  F038         	movff	___ftsub@f1+1,___ftadd@f1+1
  8256  00D178  C045  F039         	movff	___ftsub@f1+2,___ftadd@f1+2
  8257  00D17C  C046  F03A         	movff	___ftsub@f2,___ftadd@f2
  8258  00D180  C047  F03B         	movff	___ftsub@f2+1,___ftadd@f2+1
  8259  00D184  C048  F03C         	movff	___ftsub@f2+2,___ftadd@f2+2
  8260  00D188  ECF1  F070         	call	___ftadd	;wreg free
  8261  00D18C  C037  F043         	movff	?___ftadd,?___ftsub
  8262  00D190  C038  F044         	movff	?___ftadd+1,?___ftsub+1
  8263  00D194  C039  F045         	movff	?___ftadd+2,?___ftsub+2
  8264  00D198  0012               	return	
  8265  00D19A                     __end_of___ftsub:
  8266                           	opt stack 0
  8267                           tblptru	equ	0xFF8
  8268                           tblptrh	equ	0xFF7
  8269                           tblptrl	equ	0xFF6
  8270                           tablat	equ	0xFF5
  8271                           prodh	equ	0xFF4
  8272                           prodl	equ	0xFF3
  8273                           wreg	equ	0xFE8
  8274                           postinc2	equ	0xFDE
  8275                           postdec2	equ	0xFDD
  8276                           fsr2h	equ	0xFDA
  8277                           fsr2l	equ	0xFD9
  8278                           status	equ	0xFD8
  8279                           
  8280 ;; *************** function ___ftadd *****************
  8281 ;; Defined at:
  8282 ;;		line 86 in file "/opt/microchip/xc8/v1.44/sources/common/ftadd.c"
  8283 ;; Parameters:    Size  Location     Type
  8284 ;;  f1              3   54[COMRAM] float 
  8285 ;;  f2              3   57[COMRAM] float 
  8286 ;; Auto vars:     Size  Location     Type
  8287 ;;  exp1            1   65[COMRAM] unsigned char 
  8288 ;;  exp2            1   64[COMRAM] unsigned char 
  8289 ;;  sign            1   63[COMRAM] unsigned char 
  8290 ;; Return value:  Size  Location     Type
  8291 ;;                  3   54[COMRAM] float 
  8292 ;; Registers used:
  8293 ;;		wreg, status,2, status,0, cstack
  8294 ;; Tracked objects:
  8295 ;;		On entry : 0/0
  8296 ;;		On exit  : 0/0
  8297 ;;		Unchanged: 0/0
  8298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8299 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8300 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8301 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8302 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8303 ;;Total ram usage:       12 bytes
  8304 ;; Hardware stack levels used:    1
  8305 ;; Hardware stack levels required when called:    1
  8306 ;; This function calls:
  8307 ;;		___ftpack
  8308 ;; This function is called by:
  8309 ;;		_main
  8310 ;;		_printf
  8311 ;;		_atan
  8312 ;;		_atan2
  8313 ;;		_eval_poly
  8314 ;;		___ftsub
  8315 ;;		_floor
  8316 ;;		_log
  8317 ;; This function uses a non-reentrant model
  8318 ;;
  8319                           
  8320                           	psect	text33
  8321  00E1E2                     __ptext33:
  8322                           	opt stack 0
  8323  00E1E2                     ___ftadd:
  8324                           	opt stack 27
  8325                           
  8326                           ;incstack = 0
  8327  00E1E2  C039  F03D         	movff	___ftadd@f1+2,??___ftadd
  8328  00E1E6  6A3E               	clrf	(??___ftadd+1)& (0+255),c
  8329  00E1E8  6A3F               	clrf	(??___ftadd+2)& (0+255),c
  8330  00E1EA  3438               	rlcf	___ftadd@f1+1,w,c
  8331  00E1EC  363D               	rlcf	??___ftadd& (0+255),f,c
  8332  00E1EE  E301               	bnc	u1901
  8333  00E1F0  803E               	bsf	(??___ftadd+1)& (0+255),0,c
  8334  00E1F2                     u1901:
  8335  00E1F2  503D               	movf	??___ftadd,w,c
  8336  00E1F4  6E42               	movwf	___ftadd@exp1,c
  8337  00E1F6  C03C  F03D         	movff	___ftadd@f2+2,??___ftadd
  8338  00E1FA  6A3E               	clrf	(??___ftadd+1)& (0+255),c
  8339  00E1FC  6A3F               	clrf	(??___ftadd+2)& (0+255),c
  8340  00E1FE  343B               	rlcf	___ftadd@f2+1,w,c
  8341  00E200  363D               	rlcf	??___ftadd& (0+255),f,c
  8342  00E202  E301               	bnc	u1911
  8343  00E204  803E               	bsf	(??___ftadd+1)& (0+255),0,c
  8344  00E206                     u1911:
  8345  00E206  503D               	movf	??___ftadd,w,c
  8346  00E208  6E41               	movwf	___ftadd@exp2,c
  8347  00E20A  5042               	movf	___ftadd@exp1,w,c
  8348  00E20C  B4D8               	btfsc	status,2,c
  8349  00E20E  D00B               	goto	u1940
  8350  00E210  5041               	movf	___ftadd@exp2,w,c
  8351  00E212  5C42               	subwf	___ftadd@exp1,w,c
  8352  00E214  B0D8               	btfsc	status,0,c
  8353  00E216  D00E               	goto	l570
  8354  00E218  5042               	movf	___ftadd@exp1,w,c
  8355  00E21A  0800               	sublw	0
  8356  00E21C  2441               	addwf	___ftadd@exp2,w,c
  8357  00E21E  6E3D               	movwf	??___ftadd& (0+255),c
  8358  00E220  0E18               	movlw	24
  8359  00E222  643D               	cpfsgt	??___ftadd,c
  8360  00E224  D007               	goto	l570
  8361  00E226                     u1940:
  8362  00E226  C03A  F037         	movff	___ftadd@f2,?___ftadd
  8363  00E22A  C03B  F038         	movff	___ftadd@f2+1,?___ftadd+1
  8364  00E22E  C03C  F039         	movff	___ftadd@f2+2,?___ftadd+2
  8365  00E232  0012               	return	
  8366  00E234                     l570:
  8367  00E234  5041               	movf	___ftadd@exp2,w,c
  8368  00E236  B4D8               	btfsc	status,2,c
  8369  00E238  D00B               	goto	u1970
  8370  00E23A  5042               	movf	___ftadd@exp1,w,c
  8371  00E23C  5C41               	subwf	___ftadd@exp2,w,c
  8372  00E23E  B0D8               	btfsc	status,0,c
  8373  00E240  D00E               	goto	l574
  8374  00E242  5041               	movf	___ftadd@exp2,w,c
  8375  00E244  0800               	sublw	0
  8376  00E246  2442               	addwf	___ftadd@exp1,w,c
  8377  00E248  6E3D               	movwf	??___ftadd& (0+255),c
  8378  00E24A  0E18               	movlw	24
  8379  00E24C  643D               	cpfsgt	??___ftadd,c
  8380  00E24E  D007               	goto	l574
  8381  00E250                     u1970:
  8382  00E250  C037  F037         	movff	___ftadd@f1,?___ftadd
  8383  00E254  C038  F038         	movff	___ftadd@f1+1,?___ftadd+1
  8384  00E258  C039  F039         	movff	___ftadd@f1+2,?___ftadd+2
  8385  00E25C  0012               	return	
  8386  00E25E                     l574:
  8387  00E25E  0E06               	movlw	6
  8388  00E260  6E40               	movwf	___ftadd@sign,c
  8389  00E262  BE39               	btfsc	___ftadd@f1+2,7,c
  8390  00E264  8E40               	bsf	___ftadd@sign,7,c
  8391  00E266  BE3C               	btfsc	___ftadd@f2+2,7,c
  8392  00E268  8C40               	bsf	___ftadd@sign,6,c
  8393  00E26A  8E38               	bsf	___ftadd@f1+1,7,c
  8394  00E26C  0EFF               	movlw	255
  8395  00E26E  1637               	andwf	___ftadd@f1,f,c
  8396  00E270  0EFF               	movlw	255
  8397  00E272  1638               	andwf	___ftadd@f1+1,f,c
  8398  00E274  0E00               	movlw	0
  8399  00E276  1639               	andwf	___ftadd@f1+2,f,c
  8400  00E278  8E3B               	bsf	___ftadd@f2+1,7,c
  8401  00E27A  0EFF               	movlw	255
  8402  00E27C  163A               	andwf	___ftadd@f2,f,c
  8403  00E27E  0EFF               	movlw	255
  8404  00E280  163B               	andwf	___ftadd@f2+1,f,c
  8405  00E282  0E00               	movlw	0
  8406  00E284  163C               	andwf	___ftadd@f2+2,f,c
  8407  00E286  5041               	movf	___ftadd@exp2,w,c
  8408  00E288  5C42               	subwf	___ftadd@exp1,w,c
  8409  00E28A  B0D8               	btfsc	status,0,c
  8410  00E28C  D01B               	goto	l579
  8411  00E28E                     u2000:
  8412  00E28E  90D8               	bcf	status,0,c
  8413  00E290  363A               	rlcf	___ftadd@f2,f,c
  8414  00E292  363B               	rlcf	___ftadd@f2+1,f,c
  8415  00E294  363C               	rlcf	___ftadd@f2+2,f,c
  8416  00E296  0641               	decf	___ftadd@exp2,f,c
  8417  00E298  5042               	movf	___ftadd@exp1,w,c
  8418  00E29A  1841               	xorwf	___ftadd@exp2,w,c
  8419  00E29C  B4D8               	btfsc	status,2,c
  8420  00E29E  D00D               	goto	l584
  8421  00E2A0  0640               	decf	___ftadd@sign,f,c
  8422  00E2A2  C040  F03D         	movff	___ftadd@sign,??___ftadd
  8423  00E2A6  0E07               	movlw	7
  8424  00E2A8  163D               	andwf	??___ftadd,f,c
  8425  00E2AA  B4D8               	btfsc	status,2,c
  8426  00E2AC  D006               	goto	l584
  8427  00E2AE  D7EF               	goto	u2000
  8428  00E2B0  90D8               	bcf	status,0,c
  8429  00E2B2  3239               	rrcf	___ftadd@f1+2,f,c
  8430  00E2B4  3238               	rrcf	___ftadd@f1+1,f,c
  8431  00E2B6  3237               	rrcf	___ftadd@f1,f,c
  8432  00E2B8  2A42               	incf	___ftadd@exp1,f,c
  8433  00E2BA                     l584:
  8434  00E2BA  5041               	movf	___ftadd@exp2,w,c
  8435  00E2BC  1842               	xorwf	___ftadd@exp1,w,c
  8436  00E2BE  B4D8               	btfsc	status,2,c
  8437  00E2C0  D01F               	goto	u2070
  8438  00E2C2  D7F6               	goto	l585
  8439  00E2C4                     l579:
  8440  00E2C4  5042               	movf	___ftadd@exp1,w,c
  8441  00E2C6  5C41               	subwf	___ftadd@exp2,w,c
  8442  00E2C8  B0D8               	btfsc	status,0,c
  8443  00E2CA  D01A               	goto	u2070
  8444  00E2CC                     u2040:
  8445  00E2CC  90D8               	bcf	status,0,c
  8446  00E2CE  3637               	rlcf	___ftadd@f1,f,c
  8447  00E2D0  3638               	rlcf	___ftadd@f1+1,f,c
  8448  00E2D2  3639               	rlcf	___ftadd@f1+2,f,c
  8449  00E2D4  0642               	decf	___ftadd@exp1,f,c
  8450  00E2D6  5042               	movf	___ftadd@exp1,w,c
  8451  00E2D8  1841               	xorwf	___ftadd@exp2,w,c
  8452  00E2DA  B4D8               	btfsc	status,2,c
  8453  00E2DC  D00D               	goto	l593
  8454  00E2DE  0640               	decf	___ftadd@sign,f,c
  8455  00E2E0  C040  F03D         	movff	___ftadd@sign,??___ftadd
  8456  00E2E4  0E07               	movlw	7
  8457  00E2E6  163D               	andwf	??___ftadd,f,c
  8458  00E2E8  B4D8               	btfsc	status,2,c
  8459  00E2EA  D006               	goto	l593
  8460  00E2EC  D7EF               	goto	u2040
  8461  00E2EE  90D8               	bcf	status,0,c
  8462  00E2F0  323C               	rrcf	___ftadd@f2+2,f,c
  8463  00E2F2  323B               	rrcf	___ftadd@f2+1,f,c
  8464  00E2F4  323A               	rrcf	___ftadd@f2,f,c
  8465  00E2F6  2A41               	incf	___ftadd@exp2,f,c
  8466  00E2F8                     l593:
  8467  00E2F8  5041               	movf	___ftadd@exp2,w,c
  8468  00E2FA  1842               	xorwf	___ftadd@exp1,w,c
  8469  00E2FC  A4D8               	btfss	status,2,c
  8470  00E2FE  D7F7               	goto	l594
  8471  00E300                     u2070:
  8472  00E300  AE40               	btfss	___ftadd@sign,7,c
  8473  00E302  D00C               	goto	l596
  8474  00E304  0EFF               	movlw	255
  8475  00E306  1A37               	xorwf	___ftadd@f1,f,c
  8476  00E308  0EFF               	movlw	255
  8477  00E30A  1A38               	xorwf	___ftadd@f1+1,f,c
  8478  00E30C  0EFF               	movlw	255
  8479  00E30E  1A39               	xorwf	___ftadd@f1+2,f,c
  8480  00E310  0E01               	movlw	1
  8481  00E312  2637               	addwf	___ftadd@f1,f,c
  8482  00E314  0E00               	movlw	0
  8483  00E316  2238               	addwfc	___ftadd@f1+1,f,c
  8484  00E318  0E00               	movlw	0
  8485  00E31A  2239               	addwfc	___ftadd@f1+2,f,c
  8486  00E31C                     l596:
  8487  00E31C  AC40               	btfss	___ftadd@sign,6,c
  8488  00E31E  D00C               	goto	l597
  8489  00E320  0EFF               	movlw	255
  8490  00E322  1A3A               	xorwf	___ftadd@f2,f,c
  8491  00E324  0EFF               	movlw	255
  8492  00E326  1A3B               	xorwf	___ftadd@f2+1,f,c
  8493  00E328  0EFF               	movlw	255
  8494  00E32A  1A3C               	xorwf	___ftadd@f2+2,f,c
  8495  00E32C  0E01               	movlw	1
  8496  00E32E  263A               	addwf	___ftadd@f2,f,c
  8497  00E330  0E00               	movlw	0
  8498  00E332  223B               	addwfc	___ftadd@f2+1,f,c
  8499  00E334  0E00               	movlw	0
  8500  00E336  223C               	addwfc	___ftadd@f2+2,f,c
  8501  00E338                     l597:
  8502  00E338  0E00               	movlw	0
  8503  00E33A  6E40               	movwf	___ftadd@sign,c
  8504  00E33C  5037               	movf	___ftadd@f1,w,c
  8505  00E33E  263A               	addwf	___ftadd@f2,f,c
  8506  00E340  5038               	movf	___ftadd@f1+1,w,c
  8507  00E342  223B               	addwfc	___ftadd@f2+1,f,c
  8508  00E344  5039               	movf	___ftadd@f1+2,w,c
  8509  00E346  223C               	addwfc	___ftadd@f2+2,f,c
  8510  00E348  AE3C               	btfss	___ftadd@f2+2,7,c
  8511  00E34A  D00E               	goto	l598
  8512  00E34C  0EFF               	movlw	255
  8513  00E34E  1A3A               	xorwf	___ftadd@f2,f,c
  8514  00E350  0EFF               	movlw	255
  8515  00E352  1A3B               	xorwf	___ftadd@f2+1,f,c
  8516  00E354  0EFF               	movlw	255
  8517  00E356  1A3C               	xorwf	___ftadd@f2+2,f,c
  8518  00E358  0E01               	movlw	1
  8519  00E35A  263A               	addwf	___ftadd@f2,f,c
  8520  00E35C  0E00               	movlw	0
  8521  00E35E  223B               	addwfc	___ftadd@f2+1,f,c
  8522  00E360  0E00               	movlw	0
  8523  00E362  223C               	addwfc	___ftadd@f2+2,f,c
  8524  00E364  0E01               	movlw	1
  8525  00E366  6E40               	movwf	___ftadd@sign,c
  8526  00E368                     l598:
  8527  00E368  C03A  F001         	movff	___ftadd@f2,___ftpack@arg
  8528  00E36C  C03B  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  8529  00E370  C03C  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  8530  00E374  C042  F004         	movff	___ftadd@exp1,___ftpack@exp
  8531  00E378  C040  F005         	movff	___ftadd@sign,___ftpack@sign
  8532  00E37C  ECB5  F06A         	call	___ftpack	;wreg free
  8533  00E380  C001  F037         	movff	?___ftpack,?___ftadd
  8534  00E384  C002  F038         	movff	?___ftpack+1,?___ftadd+1
  8535  00E388  C003  F039         	movff	?___ftpack+2,?___ftadd+2
  8536  00E38C  0012               	return	
  8537  00E38E                     __end_of___ftadd:
  8538                           	opt stack 0
  8539                           tblptru	equ	0xFF8
  8540                           tblptrh	equ	0xFF7
  8541                           tblptrl	equ	0xFF6
  8542                           tablat	equ	0xFF5
  8543                           prodh	equ	0xFF4
  8544                           prodl	equ	0xFF3
  8545                           wreg	equ	0xFE8
  8546                           postinc2	equ	0xFDE
  8547                           postdec2	equ	0xFDD
  8548                           fsr2h	equ	0xFDA
  8549                           fsr2l	equ	0xFD9
  8550                           status	equ	0xFD8
  8551                           
  8552 ;; *************** function ___ftpack *****************
  8553 ;; Defined at:
  8554 ;;		line 62 in file "/opt/microchip/xc8/v1.44/sources/common/float.c"
  8555 ;; Parameters:    Size  Location     Type
  8556 ;;  arg             3    0[COMRAM] unsigned um
  8557 ;;  exp             1    3[COMRAM] unsigned char 
  8558 ;;  sign            1    4[COMRAM] unsigned char 
  8559 ;; Auto vars:     Size  Location     Type
  8560 ;;		None
  8561 ;; Return value:  Size  Location     Type
  8562 ;;                  3    0[COMRAM] float 
  8563 ;; Registers used:
  8564 ;;		wreg, status,2, status,0
  8565 ;; Tracked objects:
  8566 ;;		On entry : 0/0
  8567 ;;		On exit  : 0/0
  8568 ;;		Unchanged: 0/0
  8569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8570 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8572 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8573 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8574 ;;Total ram usage:        8 bytes
  8575 ;; Hardware stack levels used:    1
  8576 ;; This function calls:
  8577 ;;		Nothing
  8578 ;; This function is called by:
  8579 ;;		___altoft
  8580 ;;		___awtoft
  8581 ;;		___ftadd
  8582 ;;		___ftdiv
  8583 ;;		___ftmul
  8584 ;;		___lltoft
  8585 ;; This function uses a non-reentrant model
  8586 ;;
  8587                           
  8588                           	psect	text34
  8589  00D56A                     __ptext34:
  8590                           	opt stack 0
  8591  00D56A                     ___ftpack:
  8592                           	opt stack 27
  8593                           
  8594                           ;incstack = 0
  8595  00D56A  5004               	movf	___ftpack@exp,w,c
  8596  00D56C  B4D8               	btfsc	status,2,c
  8597  00D56E  D005               	goto	u1810
  8598  00D570  5001               	movf	___ftpack@arg,w,c
  8599  00D572  1002               	iorwf	___ftpack@arg+1,w,c
  8600  00D574  1003               	iorwf	___ftpack@arg+2,w,c
  8601  00D576  A4D8               	btfss	status,2,c
  8602  00D578  D00C               	goto	l539
  8603  00D57A                     u1810:
  8604  00D57A  0E00               	movlw	0
  8605  00D57C  6E01               	movwf	?___ftpack,c
  8606  00D57E  0E00               	movlw	0
  8607  00D580  6E02               	movwf	?___ftpack+1,c
  8608  00D582  0E00               	movlw	0
  8609  00D584  6E03               	movwf	?___ftpack+2,c
  8610  00D586  0012               	return	
  8611  00D588  2A04               	incf	___ftpack@exp,f,c
  8612  00D58A  90D8               	bcf	status,0,c
  8613  00D58C  3203               	rrcf	___ftpack@arg+2,f,c
  8614  00D58E  3202               	rrcf	___ftpack@arg+1,f,c
  8615  00D590  3201               	rrcf	___ftpack@arg,f,c
  8616  00D592                     l539:
  8617  00D592  0E00               	movlw	0
  8618  00D594  1401               	andwf	___ftpack@arg,w,c
  8619  00D596  6E06               	movwf	??___ftpack& (0+255),c
  8620  00D598  0E00               	movlw	0
  8621  00D59A  1402               	andwf	___ftpack@arg+1,w,c
  8622  00D59C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8623  00D59E  0EFE               	movlw	254
  8624  00D5A0  1403               	andwf	___ftpack@arg+2,w,c
  8625  00D5A2  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8626  00D5A4  5006               	movf	??___ftpack,w,c
  8627  00D5A6  1007               	iorwf	??___ftpack+1,w,c
  8628  00D5A8  1008               	iorwf	??___ftpack+2,w,c
  8629  00D5AA  B4D8               	btfsc	status,2,c
  8630  00D5AC  D00C               	goto	l542
  8631  00D5AE  D7EC               	goto	l540
  8632  00D5B0  2A04               	incf	___ftpack@exp,f,c
  8633  00D5B2  0E01               	movlw	1
  8634  00D5B4  2601               	addwf	___ftpack@arg,f,c
  8635  00D5B6  0E00               	movlw	0
  8636  00D5B8  2202               	addwfc	___ftpack@arg+1,f,c
  8637  00D5BA  0E00               	movlw	0
  8638  00D5BC  2203               	addwfc	___ftpack@arg+2,f,c
  8639  00D5BE  90D8               	bcf	status,0,c
  8640  00D5C0  3203               	rrcf	___ftpack@arg+2,f,c
  8641  00D5C2  3202               	rrcf	___ftpack@arg+1,f,c
  8642  00D5C4  3201               	rrcf	___ftpack@arg,f,c
  8643  00D5C6                     l542:
  8644  00D5C6  0E00               	movlw	0
  8645  00D5C8  1401               	andwf	___ftpack@arg,w,c
  8646  00D5CA  6E06               	movwf	??___ftpack& (0+255),c
  8647  00D5CC  0E00               	movlw	0
  8648  00D5CE  1402               	andwf	___ftpack@arg+1,w,c
  8649  00D5D0  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8650  00D5D2  0EFF               	movlw	255
  8651  00D5D4  1403               	andwf	___ftpack@arg+2,w,c
  8652  00D5D6  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8653  00D5D8  5006               	movf	??___ftpack,w,c
  8654  00D5DA  1007               	iorwf	??___ftpack+1,w,c
  8655  00D5DC  1008               	iorwf	??___ftpack+2,w,c
  8656  00D5DE  B4D8               	btfsc	status,2,c
  8657  00D5E0  D006               	goto	l545
  8658  00D5E2  D7E6               	goto	l543
  8659  00D5E4  0604               	decf	___ftpack@exp,f,c
  8660  00D5E6  90D8               	bcf	status,0,c
  8661  00D5E8  3601               	rlcf	___ftpack@arg,f,c
  8662  00D5EA  3602               	rlcf	___ftpack@arg+1,f,c
  8663  00D5EC  3603               	rlcf	___ftpack@arg+2,f,c
  8664  00D5EE                     l545:
  8665  00D5EE  BE02               	btfsc	___ftpack@arg+1,7,c
  8666  00D5F0  D003               	goto	u1850
  8667  00D5F2  0E02               	movlw	2
  8668  00D5F4  6004               	cpfslt	___ftpack@exp,c
  8669  00D5F6  D7F6               	goto	l546
  8670  00D5F8                     u1850:
  8671  00D5F8  A004               	btfss	___ftpack@exp,0,c
  8672  00D5FA  9E02               	bcf	___ftpack@arg+1,7,c
  8673  00D5FC  90D8               	bcf	status,0,c
  8674  00D5FE  3204               	rrcf	___ftpack@exp,f,c
  8675  00D600  5004               	movf	___ftpack@exp,w,c
  8676  00D602  1203               	iorwf	___ftpack@arg+2,f,c
  8677  00D604  5005               	movf	___ftpack@sign,w,c
  8678  00D606  A4D8               	btfss	status,2,c
  8679  00D608  8E03               	bsf	___ftpack@arg+2,7,c
  8680  00D60A  C001  F001         	movff	___ftpack@arg,?___ftpack
  8681  00D60E  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  8682  00D612  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  8683  00D616  0012               	return	
  8684  00D618                     __end_of___ftpack:
  8685                           	opt stack 0
  8686                           tblptru	equ	0xFF8
  8687                           tblptrh	equ	0xFF7
  8688                           tblptrl	equ	0xFF6
  8689                           tablat	equ	0xFF5
  8690                           prodh	equ	0xFF4
  8691                           prodl	equ	0xFF3
  8692                           wreg	equ	0xFE8
  8693                           postinc2	equ	0xFDE
  8694                           postdec2	equ	0xFDD
  8695                           fsr2h	equ	0xFDA
  8696                           fsr2l	equ	0xFD9
  8697                           status	equ	0xFD8
  8698                           
  8699 ;; *************** function _SYSTEM_Initialize *****************
  8700 ;; Defined at:
  8701 ;;		line 111 in file "mcc_generated_files/mcc.c"
  8702 ;; Parameters:    Size  Location     Type
  8703 ;;		None
  8704 ;; Auto vars:     Size  Location     Type
  8705 ;;		None
  8706 ;; Return value:  Size  Location     Type
  8707 ;;                  1    wreg      void 
  8708 ;; Registers used:
  8709 ;;		wreg, status,2, cstack
  8710 ;; Tracked objects:
  8711 ;;		On entry : 0/0
  8712 ;;		On exit  : 0/0
  8713 ;;		Unchanged: 0/0
  8714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8719 ;;Total ram usage:        0 bytes
  8720 ;; Hardware stack levels used:    1
  8721 ;; Hardware stack levels required when called:    1
  8722 ;; This function calls:
  8723 ;;		_ADC_Initialize
  8724 ;;		_EUSART1_Initialize
  8725 ;;		_OSCILLATOR_Initialize
  8726 ;;		_PIN_MANAGER_Initialize
  8727 ;; This function is called by:
  8728 ;;		_main
  8729 ;; This function uses a non-reentrant model
  8730 ;;
  8731                           
  8732                           	psect	text35
  8733  00CFFC                     __ptext35:
  8734                           	opt stack 0
  8735  00CFFC                     _SYSTEM_Initialize:
  8736                           	opt stack 29
  8737                           
  8738                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  8739                           
  8740                           ;incstack = 0
  8741  00CFFC  EC8E  F068         	call	_PIN_MANAGER_Initialize	;wreg free
  8742                           
  8743                           ;mcc.c: 115: OSCILLATOR_Initialize();
  8744  00D000  ECEF  F067         	call	_OSCILLATOR_Initialize	;wreg free
  8745                           
  8746                           ;mcc.c: 116: ADC_Initialize();
  8747  00D004  EC07  F068         	call	_ADC_Initialize	;wreg free
  8748                           
  8749                           ;mcc.c: 117: EUSART1_Initialize();
  8750  00D008  EC12  F068         	call	_EUSART1_Initialize	;wreg free
  8751  00D00C  0012               	return		;funcret
  8752  00D00E                     __end_of_SYSTEM_Initialize:
  8753                           	opt stack 0
  8754                           tblptru	equ	0xFF8
  8755                           tblptrh	equ	0xFF7
  8756                           tblptrl	equ	0xFF6
  8757                           tablat	equ	0xFF5
  8758                           prodh	equ	0xFF4
  8759                           prodl	equ	0xFF3
  8760                           wreg	equ	0xFE8
  8761                           postinc2	equ	0xFDE
  8762                           postdec2	equ	0xFDD
  8763                           fsr2h	equ	0xFDA
  8764                           fsr2l	equ	0xFD9
  8765                           status	equ	0xFD8
  8766                           
  8767 ;; *************** function _PIN_MANAGER_Initialize *****************
  8768 ;; Defined at:
  8769 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8770 ;; Parameters:    Size  Location     Type
  8771 ;;		None
  8772 ;; Auto vars:     Size  Location     Type
  8773 ;;		None
  8774 ;; Return value:  Size  Location     Type
  8775 ;;                  1    wreg      void 
  8776 ;; Registers used:
  8777 ;;		wreg, status,2
  8778 ;; Tracked objects:
  8779 ;;		On entry : 0/0
  8780 ;;		On exit  : 0/0
  8781 ;;		Unchanged: 0/0
  8782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8787 ;;Total ram usage:        0 bytes
  8788 ;; Hardware stack levels used:    1
  8789 ;; This function calls:
  8790 ;;		Nothing
  8791 ;; This function is called by:
  8792 ;;		_SYSTEM_Initialize
  8793 ;; This function uses a non-reentrant model
  8794 ;;
  8795                           
  8796                           	psect	text36
  8797  00D11C                     __ptext36:
  8798                           	opt stack 0
  8799  00D11C                     _PIN_MANAGER_Initialize:
  8800                           	opt stack 29
  8801                           
  8802                           ;pin_manager.c: 57: LATE = 0x00;
  8803                           
  8804                           ;incstack = 0
  8805  00D11C  0E00               	movlw	0
  8806  00D11E  6E8D               	movwf	3981,c	;volatile
  8807                           
  8808                           ;pin_manager.c: 58: LATD = 0x00;
  8809  00D120  0E00               	movlw	0
  8810  00D122  6E8C               	movwf	3980,c	;volatile
  8811                           
  8812                           ;pin_manager.c: 59: LATA = 0x00;
  8813  00D124  0E00               	movlw	0
  8814  00D126  6E89               	movwf	3977,c	;volatile
  8815                           
  8816                           ;pin_manager.c: 60: LATB = 0x00;
  8817  00D128  0E00               	movlw	0
  8818  00D12A  6E8A               	movwf	3978,c	;volatile
  8819                           
  8820                           ;pin_manager.c: 61: LATC = 0x00;
  8821  00D12C  0E00               	movlw	0
  8822  00D12E  6E8B               	movwf	3979,c	;volatile
  8823                           
  8824                           ;pin_manager.c: 66: TRISE = 0x07;
  8825  00D130  0E07               	movlw	7
  8826  00D132  6E96               	movwf	3990,c	;volatile
  8827                           
  8828                           ;pin_manager.c: 67: TRISA = 0xFF;
  8829  00D134  6892               	setf	3986,c	;volatile
  8830                           
  8831                           ;pin_manager.c: 68: TRISB = 0xFF;
  8832  00D136  6893               	setf	3987,c	;volatile
  8833                           
  8834                           ;pin_manager.c: 69: TRISC = 0xBF;
  8835  00D138  0EBF               	movlw	191
  8836  00D13A  6E94               	movwf	3988,c	;volatile
  8837                           
  8838                           ;pin_manager.c: 70: TRISD = 0xFD;
  8839  00D13C  0EFD               	movlw	253
  8840  00D13E  6E95               	movwf	3989,c	;volatile
  8841                           
  8842                           ;pin_manager.c: 75: ANSELC = 0xBC;
  8843  00D140  0EBC               	movlw	188
  8844  00D142  010F               	movlb	15	; () banked
  8845  00D144  6F3A               	movwf	58,b	;volatile
  8846                           
  8847                           ;pin_manager.c: 76: ANSELB = 0x3F;
  8848  00D146  0E3F               	movlw	63
  8849  00D148  6F39               	movwf	57,b	;volatile
  8850                           
  8851                           ; BSR set to: 15
  8852                           ;pin_manager.c: 77: ANSELD = 0xFF;
  8853  00D14A  693B               	setf	59,b	;volatile
  8854                           
  8855                           ;pin_manager.c: 78: ANSELE = 0x07;
  8856  00D14C  0E07               	movlw	7
  8857  00D14E  6F3C               	movwf	60,b	;volatile
  8858                           
  8859                           ;pin_manager.c: 79: ANSELA = 0x2F;
  8860  00D150  0E2F               	movlw	47
  8861  00D152  6F38               	movwf	56,b	;volatile
  8862                           
  8863                           ; BSR set to: 15
  8864                           ;pin_manager.c: 84: WPUB = 0xFF;
  8865  00D154  6861               	setf	3937,c	;volatile
  8866                           
  8867                           ; BSR set to: 15
  8868                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  8869  00D156  9EF1               	bcf	intcon2,7,c	;volatile
  8870                           
  8871                           ; BSR set to: 15
  8872  00D158  0012               	return		;funcret
  8873  00D15A                     __end_of_PIN_MANAGER_Initialize:
  8874                           	opt stack 0
  8875                           tblptru	equ	0xFF8
  8876                           tblptrh	equ	0xFF7
  8877                           tblptrl	equ	0xFF6
  8878                           tablat	equ	0xFF5
  8879                           prodh	equ	0xFF4
  8880                           prodl	equ	0xFF3
  8881                           intcon2	equ	0xFF1
  8882                           wreg	equ	0xFE8
  8883                           postinc2	equ	0xFDE
  8884                           postdec2	equ	0xFDD
  8885                           fsr2h	equ	0xFDA
  8886                           fsr2l	equ	0xFD9
  8887                           status	equ	0xFD8
  8888                           
  8889 ;; *************** function _OSCILLATOR_Initialize *****************
  8890 ;; Defined at:
  8891 ;;		line 120 in file "mcc_generated_files/mcc.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;		None
  8894 ;; Auto vars:     Size  Location     Type
  8895 ;;		None
  8896 ;; Return value:  Size  Location     Type
  8897 ;;                  1    wreg      void 
  8898 ;; Registers used:
  8899 ;;		wreg, status,2
  8900 ;; Tracked objects:
  8901 ;;		On entry : 0/0
  8902 ;;		On exit  : 0/0
  8903 ;;		Unchanged: 0/0
  8904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8909 ;;Total ram usage:        0 bytes
  8910 ;; Hardware stack levels used:    1
  8911 ;; This function calls:
  8912 ;;		Nothing
  8913 ;; This function is called by:
  8914 ;;		_SYSTEM_Initialize
  8915 ;; This function uses a non-reentrant model
  8916 ;;
  8917                           
  8918                           	psect	text37
  8919  00CFDE                     __ptext37:
  8920                           	opt stack 0
  8921  00CFDE                     _OSCILLATOR_Initialize:
  8922                           	opt stack 29
  8923                           
  8924                           ;mcc.c: 123: OSCCON = 0x30;
  8925                           
  8926                           ; BSR set to: 15
  8927                           ;incstack = 0
  8928  00CFDE  0E30               	movlw	48
  8929  00CFE0  6ED3               	movwf	4051,c	;volatile
  8930                           
  8931                           ;mcc.c: 125: OSCCON2 = 0x04;
  8932  00CFE2  0E04               	movlw	4
  8933  00CFE4  6ED2               	movwf	4050,c	;volatile
  8934                           
  8935                           ;mcc.c: 127: OSCTUNE = 0x00;
  8936  00CFE6  0E00               	movlw	0
  8937  00CFE8  6E9B               	movwf	3995,c	;volatile
  8938  00CFEA  0012               	return		;funcret
  8939  00CFEC                     __end_of_OSCILLATOR_Initialize:
  8940                           	opt stack 0
  8941                           tblptru	equ	0xFF8
  8942                           tblptrh	equ	0xFF7
  8943                           tblptrl	equ	0xFF6
  8944                           tablat	equ	0xFF5
  8945                           prodh	equ	0xFF4
  8946                           prodl	equ	0xFF3
  8947                           intcon2	equ	0xFF1
  8948                           wreg	equ	0xFE8
  8949                           postinc2	equ	0xFDE
  8950                           postdec2	equ	0xFDD
  8951                           fsr2h	equ	0xFDA
  8952                           fsr2l	equ	0xFD9
  8953                           status	equ	0xFD8
  8954                           
  8955 ;; *************** function _EUSART1_Initialize *****************
  8956 ;; Defined at:
  8957 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  8958 ;; Parameters:    Size  Location     Type
  8959 ;;		None
  8960 ;; Auto vars:     Size  Location     Type
  8961 ;;		None
  8962 ;; Return value:  Size  Location     Type
  8963 ;;                  1    wreg      void 
  8964 ;; Registers used:
  8965 ;;		wreg, status,2
  8966 ;; Tracked objects:
  8967 ;;		On entry : 0/0
  8968 ;;		On exit  : 0/0
  8969 ;;		Unchanged: 0/0
  8970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8975 ;;Total ram usage:        0 bytes
  8976 ;; Hardware stack levels used:    1
  8977 ;; This function calls:
  8978 ;;		Nothing
  8979 ;; This function is called by:
  8980 ;;		_SYSTEM_Initialize
  8981 ;; This function uses a non-reentrant model
  8982 ;;
  8983                           
  8984                           	psect	text38
  8985  00D024                     __ptext38:
  8986                           	opt stack 0
  8987  00D024                     _EUSART1_Initialize:
  8988                           	opt stack 29
  8989                           
  8990                           ;eusart1.c: 60: BAUDCON1 = 0x08;
  8991                           
  8992                           ;incstack = 0
  8993  00D024  0E08               	movlw	8
  8994  00D026  6EB8               	movwf	4024,c	;volatile
  8995                           
  8996                           ;eusart1.c: 63: RCSTA1 = 0x80;
  8997  00D028  0E80               	movlw	128
  8998  00D02A  6EAB               	movwf	4011,c	;volatile
  8999                           
  9000                           ;eusart1.c: 66: TXSTA1 = 0x24;
  9001  00D02C  0E24               	movlw	36
  9002  00D02E  6EAC               	movwf	4012,c	;volatile
  9003                           
  9004                           ;eusart1.c: 69: SPBRG1 = 0x19;
  9005  00D030  0E19               	movlw	25
  9006  00D032  6EAF               	movwf	4015,c	;volatile
  9007                           
  9008                           ;eusart1.c: 72: SPBRGH1 = 0x00;
  9009  00D034  0E00               	movlw	0
  9010  00D036  6EB0               	movwf	4016,c	;volatile
  9011  00D038  0012               	return		;funcret
  9012  00D03A                     __end_of_EUSART1_Initialize:
  9013                           	opt stack 0
  9014                           tblptru	equ	0xFF8
  9015                           tblptrh	equ	0xFF7
  9016                           tblptrl	equ	0xFF6
  9017                           tablat	equ	0xFF5
  9018                           prodh	equ	0xFF4
  9019                           prodl	equ	0xFF3
  9020                           intcon2	equ	0xFF1
  9021                           wreg	equ	0xFE8
  9022                           postinc2	equ	0xFDE
  9023                           postdec2	equ	0xFDD
  9024                           fsr2h	equ	0xFDA
  9025                           fsr2l	equ	0xFD9
  9026                           status	equ	0xFD8
  9027                           
  9028 ;; *************** function _ADC_Initialize *****************
  9029 ;; Defined at:
  9030 ;;		line 58 in file "mcc_generated_files/adc.c"
  9031 ;; Parameters:    Size  Location     Type
  9032 ;;		None
  9033 ;; Auto vars:     Size  Location     Type
  9034 ;;		None
  9035 ;; Return value:  Size  Location     Type
  9036 ;;                  1    wreg      void 
  9037 ;; Registers used:
  9038 ;;		wreg, status,2
  9039 ;; Tracked objects:
  9040 ;;		On entry : 0/0
  9041 ;;		On exit  : 0/0
  9042 ;;		Unchanged: 0/0
  9043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9048 ;;Total ram usage:        0 bytes
  9049 ;; Hardware stack levels used:    1
  9050 ;; This function calls:
  9051 ;;		Nothing
  9052 ;; This function is called by:
  9053 ;;		_SYSTEM_Initialize
  9054 ;; This function uses a non-reentrant model
  9055 ;;
  9056                           
  9057                           	psect	text39
  9058  00D00E                     __ptext39:
  9059                           	opt stack 0
  9060  00D00E                     _ADC_Initialize:
  9061                           	opt stack 29
  9062                           
  9063                           ;adc.c: 63: ADCON0 = 0x01;
  9064                           
  9065                           ;incstack = 0
  9066  00D00E  0E01               	movlw	1
  9067  00D010  6EC2               	movwf	4034,c	;volatile
  9068                           
  9069                           ;adc.c: 66: ADCON1 = 0x00;
  9070  00D012  0E00               	movlw	0
  9071  00D014  6EC1               	movwf	4033,c	;volatile
  9072                           
  9073                           ;adc.c: 69: ADCON2 = 0x92;
  9074  00D016  0E92               	movlw	146
  9075  00D018  6EC0               	movwf	4032,c	;volatile
  9076                           
  9077                           ;adc.c: 72: ADRESL = 0x00;
  9078  00D01A  0E00               	movlw	0
  9079  00D01C  6EC3               	movwf	4035,c	;volatile
  9080                           
  9081                           ;adc.c: 75: ADRESH = 0x00;
  9082  00D01E  0E00               	movlw	0
  9083  00D020  6EC4               	movwf	4036,c	;volatile
  9084  00D022  0012               	return		;funcret
  9085  00D024                     __end_of_ADC_Initialize:
  9086                           	opt stack 0
  9087                           tblptru	equ	0xFF8
  9088                           tblptrh	equ	0xFF7
  9089                           tblptrl	equ	0xFF6
  9090                           tablat	equ	0xFF5
  9091                           prodh	equ	0xFF4
  9092                           prodl	equ	0xFF3
  9093                           intcon2	equ	0xFF1
  9094                           wreg	equ	0xFE8
  9095                           postinc2	equ	0xFDE
  9096                           postdec2	equ	0xFDD
  9097                           fsr2h	equ	0xFDA
  9098                           fsr2l	equ	0xFD9
  9099                           status	equ	0xFD8
  9100                           
  9101 ;; *************** function _ADC_GetConversion *****************
  9102 ;; Defined at:
  9103 ;;		line 106 in file "mcc_generated_files/adc.c"
  9104 ;; Parameters:    Size  Location     Type
  9105 ;;  channel         1    wreg     enum E6990
  9106 ;; Auto vars:     Size  Location     Type
  9107 ;;  channel         1    4[COMRAM] enum E6990
  9108 ;; Return value:  Size  Location     Type
  9109 ;;                  2    0[COMRAM] unsigned int 
  9110 ;; Registers used:
  9111 ;;		wreg, status,2, status,0
  9112 ;; Tracked objects:
  9113 ;;		On entry : 0/0
  9114 ;;		On exit  : 0/0
  9115 ;;		Unchanged: 0/0
  9116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9117 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9118 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9119 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9120 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9121 ;;Total ram usage:        5 bytes
  9122 ;; Hardware stack levels used:    1
  9123 ;; This function calls:
  9124 ;;		Nothing
  9125 ;; This function is called by:
  9126 ;;		_main
  9127 ;; This function uses a non-reentrant model
  9128 ;;
  9129                           
  9130                           	psect	text40
  9131  00D084                     __ptext40:
  9132                           	opt stack 0
  9133  00D084                     _ADC_GetConversion:
  9134                           	opt stack 30
  9135                           
  9136                           ;incstack = 0
  9137                           ;ADC_GetConversion@channel stored from wreg
  9138  00D084  6E05               	movwf	ADC_GetConversion@channel,c
  9139                           
  9140                           ;adc.c: 109: ADCON0bits.CHS = channel;
  9141  00D086  C005  F003         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  9142  00D08A  4603               	rlncf	??_ADC_GetConversion,f,c
  9143  00D08C  4603               	rlncf	??_ADC_GetConversion,f,c
  9144  00D08E  50C2               	movf	4034,w,c	;volatile
  9145  00D090  1803               	xorwf	??_ADC_GetConversion,w,c
  9146  00D092  0B83               	andlw	-125
  9147  00D094  1803               	xorwf	??_ADC_GetConversion,w,c
  9148  00D096  6EC2               	movwf	4034,c	;volatile
  9149                           
  9150                           ;adc.c: 112: ADCON0bits.ADON = 1;
  9151  00D098  80C2               	bsf	4034,0,c	;volatile
  9152                           
  9153                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
  9154  00D09A  82C2               	bsf	4034,1,c	;volatile
  9155  00D09C                     
  9156                           ;adc.c: 119: {
  9157  00D09C  B2C2               	btfsc	4034,1,c	;volatile
  9158  00D09E  D7FE               	goto	l131
  9159                           
  9160                           ;adc.c: 120: }
  9161                           ;adc.c: 123: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  9162  00D0A0  50C4               	movf	4036,w,c	;volatile
  9163  00D0A2  6E04               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  9164  00D0A4  6A03               	clrf	??_ADC_GetConversion& (0+255),c
  9165  00D0A6  50C3               	movf	4035,w,c	;volatile
  9166  00D0A8  2403               	addwf	??_ADC_GetConversion,w,c
  9167  00D0AA  6E01               	movwf	?_ADC_GetConversion,c
  9168  00D0AC  0E00               	movlw	0
  9169  00D0AE  2004               	addwfc	??_ADC_GetConversion+1,w,c
  9170  00D0B0  6E02               	movwf	?_ADC_GetConversion+1,c
  9171  00D0B2  0012               	return	
  9172  00D0B4                     __end_of_ADC_GetConversion:
  9173                           	opt stack 0
  9174                           tblptru	equ	0xFF8
  9175                           tblptrh	equ	0xFF7
  9176                           tblptrl	equ	0xFF6
  9177                           tablat	equ	0xFF5
  9178                           prodh	equ	0xFF4
  9179                           prodl	equ	0xFF3
  9180                           intcon2	equ	0xFF1
  9181                           wreg	equ	0xFE8
  9182                           postinc2	equ	0xFDE
  9183                           postdec2	equ	0xFDD
  9184                           fsr2h	equ	0xFDA
  9185                           fsr2l	equ	0xFD9
  9186                           status	equ	0xFD8
  9187                           tblptru	equ	0xFF8
  9188                           tblptrh	equ	0xFF7
  9189                           tblptrl	equ	0xFF6
  9190                           tablat	equ	0xFF5
  9191                           prodh	equ	0xFF4
  9192                           prodl	equ	0xFF3
  9193                           intcon2	equ	0xFF1
  9194                           wreg	equ	0xFE8
  9195                           postinc2	equ	0xFDE
  9196                           postdec2	equ	0xFDD
  9197                           fsr2h	equ	0xFDA
  9198                           fsr2l	equ	0xFD9
  9199                           status	equ	0xFD8
  9200                           
  9201                           	psect	rparam
  9202  0000                     tblptru	equ	0xFF8
  9203                           tblptrh	equ	0xFF7
  9204                           tblptrl	equ	0xFF6
  9205                           tablat	equ	0xFF5
  9206                           prodh	equ	0xFF4
  9207                           prodl	equ	0xFF3
  9208                           intcon2	equ	0xFF1
  9209                           wreg	equ	0xFE8
  9210                           postinc2	equ	0xFDE
  9211                           postdec2	equ	0xFDD
  9212                           fsr2h	equ	0xFDA
  9213                           fsr2l	equ	0xFD9
  9214                           status	equ	0xFD8


Data Sizes:
    Strings     148
    Constant    208
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    129     131
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), atan@coeff_a(CODE[18]), atan@coeff_b(CODE[15]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_13(CODE[10]), STR_12(CODE[13]), STR_11(CODE[12]), STR_10(CODE[11]), 
		 -> STR_9(CODE[11]), STR_8(CODE[12]), STR_7(CODE[13]), STR_6(CODE[13]), 
		 -> STR_5(CODE[14]), STR_4(CODE[7]), STR_3(CODE[7]), STR_2(CODE[7]), 
		 -> STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _printf->___ftsub
    _scale->___ftmul
    _putch->_EUSART1_Write
    _fround->___ftmul
    ___awdiv->___awmod
    ___llmod->___lldiv
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->_scale
    ___altoft->___fttol
    ___awtoft->___wmul
    ___lltoft->___ftpack
    _fabs->___ftneg
    _eval_poly->___ftadd
    ___wmul->___awdiv
    ___ftmul->___awtoft
    ___ftge->_fabs
    ___ftdiv->___ftmul
    ___ftsub->___ftadd
    ___ftadd->___ftdiv

Critical Paths under _main in BANK0

    _main->_atan2
    _sqrt->_pow
    _atan2->_atan
    _atan->_sqrt

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                63    63      0  331115
                                             94 COMRAM     1     1      0
                                             67 BANK0     62    62      0
                  _ADC_GetConversion
                  _SYSTEM_Initialize
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                             ___wmul
                               _atan
                              _atan2
                                _pow
                             _printf
                               _sqrt
 ---------------------------------------------------------------------------------
 (1) _sqrt                                                19    16      3   17758
                                             17 BANK0     19    16      3
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___ftsub
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   68147
                                             72 COMRAM    11     6      5
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   15264
                                             39 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              1 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   15066
                                             39 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     767
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _pow                                                 17    11      6  110751
                                              0 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   36752
                                             78 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                  9     6      3   58656
                                             85 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                7     2      5     400
                                             78 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _floor                                                8     5      3   12527
                                             71 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     528
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     708
                                             46 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2758
                                             61 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3015
                                             20 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2765
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _atan2                                               15     9      6   65315
                                             52 BANK0     15     9      6
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftneg
                            ___ftsub
                               _atan
                               _fabs
 ---------------------------------------------------------------------------------
 (2) _atan                                                16    13      3   42261
                                             36 BANK0     16    13      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                          _eval_poly
                               _fabs
                                _pow (ARG)
                               _sqrt (ARG)
 ---------------------------------------------------------------------------------
 (2) _fabs                                                 3     0      3     947
                                              3 COMRAM     3     0      3
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     653
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   18673
                                             66 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3351
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    7986
                                             24 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1960
                                              6 COMRAM     9     3      6
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    5078
                                             39 COMRAM    15     9      6
                           ___awtoft (ARG)
                             ___ftge (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    7199
                                             66 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    6246
                                             54 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2544
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   ___awtoft
     ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftadd
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge (ARG)
         _fabs (ARG)
           ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _frexp (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftge (ARG)
       _fabs (ARG)
         ___ftneg
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _frexp (ARG)
   ___wmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
   _atan
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge (ARG)
           _fabs (ARG)
             ___ftneg
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge (ARG)
         _fabs (ARG)
           ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftge
       _fabs (ARG)
         ___ftneg
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg
     _eval_poly
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge (ARG)
             _fabs (ARG)
               ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _fabs
       ___ftneg
     _pow (ARG)
       ___ftge
         _fabs (ARG)
           ___ftneg
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge (ARG)
             _fabs (ARG)
               ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge
           _fabs (ARG)
             ___ftneg
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftge (ARG)
                 _fabs (ARG)
                   ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftge (ARG)
               _fabs (ARG)
                 ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftge (ARG)
                 _fabs (ARG)
                   ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftge (ARG)
                 _fabs (ARG)
                   ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             _fabs (ARG)
               ___ftneg
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftge (ARG)
                   _fabs (ARG)
                     ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftge (ARG)
                 _fabs (ARG)
                   ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftge (ARG)
                   _fabs (ARG)
                     ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftge (ARG)
               _fabs (ARG)
                 ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftge (ARG)
                 _fabs (ARG)
                   ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _frexp
     _sqrt (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge (ARG)
           _fabs (ARG)
             ___ftneg
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge (ARG)
         _fabs (ARG)
           ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftsub (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftge (ARG)
               _fabs (ARG)
                 ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge (ARG)
             _fabs (ARG)
               ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       _pow (ARG)
         ___ftge
           _fabs (ARG)
             ___ftneg
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftge (ARG)
               _fabs (ARG)
                 ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge
             _fabs (ARG)
               ___ftneg
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftge (ARG)
                   _fabs (ARG)
                     ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftge (ARG)
                 _fabs (ARG)
                   ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftge (ARG)
                   _fabs (ARG)
                     ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftge (ARG)
                   _fabs (ARG)
                     ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
               _fabs (ARG)
                 ___ftneg
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftge (ARG)
                     _fabs (ARG)
                       ___ftneg
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftge (ARG)
                   _fabs (ARG)
                     ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftge (ARG)
                     _fabs (ARG)
                       ___ftneg
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftge (ARG)
                 _fabs (ARG)
                   ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftge (ARG)
                   _fabs (ARG)
                     ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
   _atan2
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge (ARG)
           _fabs (ARG)
             ___ftneg
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge (ARG)
         _fabs (ARG)
           ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftge
       _fabs (ARG)
         ___ftneg
     ___ftneg
     ___ftsub
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge (ARG)
             _fabs (ARG)
               ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge (ARG)
           _fabs (ARG)
             ___ftneg
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     _atan
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge (ARG)
             _fabs (ARG)
               ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge (ARG)
           _fabs (ARG)
             ___ftneg
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge
         _fabs (ARG)
           ___ftneg
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftge (ARG)
               _fabs (ARG)
                 ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _fabs
         ___ftneg
       _pow (ARG)
         ___ftge
           _fabs (ARG)
             ___ftneg
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftge (ARG)
               _fabs (ARG)
                 ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge
             _fabs (ARG)
               ___ftneg
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftge (ARG)
                   _fabs (ARG)
                     ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftge (ARG)
                 _fabs (ARG)
                   ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftge (ARG)
                   _fabs (ARG)
                     ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftge (ARG)
                   _fabs (ARG)
                     ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
               _fabs (ARG)
                 ___ftneg
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftge (ARG)
                     _fabs (ARG)
                       ___ftneg
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftge (ARG)
                   _fabs (ARG)
                     ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftge (ARG)
                     _fabs (ARG)
                       ___ftneg
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftge (ARG)
                 _fabs (ARG)
                   ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftge (ARG)
                   _fabs (ARG)
                     ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
       _sqrt (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge (ARG)
             _fabs (ARG)
               ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge (ARG)
           _fabs (ARG)
             ___ftneg
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftsub (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftge (ARG)
                 _fabs (ARG)
                   ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftge (ARG)
               _fabs (ARG)
                 ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         _pow (ARG)
           ___ftge
             _fabs (ARG)
               ___ftneg
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftge (ARG)
                 _fabs (ARG)
                   ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftge
               _fabs (ARG)
                 ___ftneg
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftge (ARG)
                     _fabs (ARG)
                       ___ftneg
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftge (ARG)
                   _fabs (ARG)
                     ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftge (ARG)
                     _fabs (ARG)
                       ___ftneg
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftge (ARG)
                     _fabs (ARG)
                       ___ftneg
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
                 _fabs (ARG)
                   ___ftneg
               ___fttol
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftge (ARG)
                       _fabs (ARG)
                         ___ftneg
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftge (ARG)
                     _fabs (ARG)
                       ___ftneg
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftge (ARG)
                       _fabs (ARG)
                         ___ftneg
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftge (ARG)
                   _fabs (ARG)
                     ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftge (ARG)
                     _fabs (ARG)
                       ___ftneg
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
     _fabs
       ___ftneg
   _pow
     ___ftge
       _fabs (ARG)
         ___ftneg
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lltoft
       ___ftpack
     _exp
       ___awtoft
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge (ARG)
           _fabs (ARG)
             ___ftneg
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge
         _fabs (ARG)
           ___ftneg
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftge (ARG)
               _fabs (ARG)
                 ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge (ARG)
             _fabs (ARG)
               ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftge (ARG)
               _fabs (ARG)
                 ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _floor
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftge (ARG)
               _fabs (ARG)
                 ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           _fabs (ARG)
             ___ftneg
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _frexp
       _ldexp
         _eval_poly (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftge (ARG)
                 _fabs (ARG)
                   ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _log (ARG)
         ___awtoft
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftge (ARG)
               _fabs (ARG)
                 ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftge (ARG)
                 _fabs (ARG)
                   ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _frexp
     _log
       ___awtoft
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge (ARG)
             _fabs (ARG)
               ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftge (ARG)
               _fabs (ARG)
                 ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _frexp
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge (ARG)
           _fabs (ARG)
             ___ftneg
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       _fabs (ARG)
         ___ftneg
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg
     ___ftsub
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge (ARG)
             _fabs (ARG)
               ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge (ARG)
           _fabs (ARG)
             ___ftneg
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
       _EUSART1_Write
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _sqrt
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge (ARG)
         _fabs (ARG)
           ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftge (ARG)
       _fabs (ARG)
         ___ftneg
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge (ARG)
             _fabs (ARG)
               ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge (ARG)
           _fabs (ARG)
             ___ftneg
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     _pow (ARG)
       ___ftge
         _fabs (ARG)
           ___ftneg
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge (ARG)
             _fabs (ARG)
               ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge
           _fabs (ARG)
             ___ftneg
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftge (ARG)
                 _fabs (ARG)
                   ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftge (ARG)
               _fabs (ARG)
                 ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftge (ARG)
                 _fabs (ARG)
                   ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftge (ARG)
                 _fabs (ARG)
                   ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             _fabs (ARG)
               ___ftneg
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftge (ARG)
                   _fabs (ARG)
                     ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftge (ARG)
                 _fabs (ARG)
                   ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftge (ARG)
                   _fabs (ARG)
                     ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftge (ARG)
               _fabs (ARG)
                 ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftge (ARG)
                 _fabs (ARG)
                   ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     81      83       5       81.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E2      12        0.0%
DATA                 0      0      E2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Apr 24 08:10:24 2018

                   ___altoft@exp 0046                    ___altoft@sign 0047  
                   ___awdiv@sign 000C              ___wmul@multiplicand 0011  
                   __CFG_CP0$OFF 000000                     __CFG_CP1$OFF 000000  
                   __CFG_CP2$OFF 000000                     __CFG_CP3$OFF 000000  
                   ___ftadd@exp1 0042                     ___ftadd@exp2 0041  
                   ___ftadd@sign 0040                              l200 F01A  
                            l201 F02A                              l210 F0A8  
                            l131 D09C                              l220 F276  
                            l212 F13A                              l204 F026  
                            l213 F1A0                              l205 F056  
                            l231 F418                              l215 F1C6  
                            l240 F59E                              l232 F38C  
                            l216 F206                              l401 E41C  
                            l209 F5C2                              l241 F4C4  
                            l217 F2CE                              l161 F74C  
                            l402 E520                              l250 F652  
                            l234 F432                              l226 F334  
                            l251 F6DE                              l243 F5B8  
                            l235 F424                              l404 E534  
                            l340 D2FA                              l252 F660  
                            l244 F5AA                              l421 EA32  
                            l341 D2EE                              l237 F456  
                            l422 EA42                              l510 DCF8  
                            l182 E880                              l246 F5FC  
                            l238 F45A                              l503 D0D6  
                            l423 EB30                              l511 DD28  
                            l239 F472                              l416 E9B8  
                            l520 DD7E                              l192 EDDA  
                            l425 EAFA                              l513 DD66  
                            l185 E94C                              l193 EF2A  
                            l426 EB22                              l418 E9E8  
                            l514 DD56                              l603 D8B6  
                            l427 EBC0                              l419 E9F8  
                            l507 DC98                              l611 DDCE  
                            l195 EFDA                              l540 D588  
                            l428 EBE8                              l188 EDFE  
                            l605 D8DE                              l509 DCB6  
                            l613 DDFA                              l189 ED2A  
                            l542 D5C6                              l606 D91C  
                            l702 D214                              l614 DE34  
                            l470 D428                              l543 D5B0  
                            l607 D942                              l703 D208  
                            l519 DD8A                              l623 DEBC  
                            l615 DE5C                              l471 D432  
                            l463 D3DA                              l199 F00A  
                            l624 DEB0                              l472 D440  
                            l464 D3EA                              l480 D28A  
                            l545 D5EE                              l641 DA1E  
                            l713 D1AC                              l617 DE98  
                            l546 D5E4                              l570 E234  
                            l642 DA2E                              l714 D1A0  
                            l706 D23C                              l618 DE88  
                            l466 D408                              l539 D592  
                            l635 D99C                              l491 D0F8  
                            l707 D24A                              l467 D400  
                            l483 D2AA                              l652 D170  
                            l628 D47A                              l484 D2B4  
                            l476 D270                              l629 D4AA  
                            l637 D9C4                              l485 D2C2  
                            l477 D27C                              l574 E25E  
                            l638 D9F6                              l646 D050  
                            l910 E08C                              l639 DA06  
                            l399 E3C4                              l479 D292  
                            l911 E07E                              l584 E2BA  
                            l664 DB2E                              l656 DA94  
                            l593 E2F8                              l585 E2B0  
                            l497 D79A                              l665 DB22  
                            l913 E0DE                              l594 E2EE  
                            l498 D71E                              l658 DB0A  
                            l579 E2C4                              l667 DB4A  
                            l659 DAFA                              l596 E31C  
                            l780 DF9A                              l692 D372  
                            l597 E338                              l781 E042  
                            l693 D366                              l598 E368  
                            l950 E608                              l951 E72C  
                            l775 DF1E                              l960 D806  
                            l952 E702                              l776 DF0E  
                            l696 D3A6                              l961 D880  
                            l697 D3B4                              l970 D630  
                            l946 E56A                              l778 DF36  
                            l779 DFBC                              l972 D676  
                            l948 E5A2                              l957 D7EC  
                            l949 E5DA                              l966 D502  
                            l958 D7DE                              l974 D6A6  
                            l990 DB9A                              l975 D69A  
                            l988 DB78                     __CFG_CPB$OFF 000000  
                   __CFG_CPD$OFF 000000                              _exp E552  
                            _log DB5C                              _pow DED4  
                   ___awmod@sign 0006                              wreg 000FE8  
                   __CFG_LVP$OFF 000000                     ___ftdiv@cntr 0031  
                   ___ftdiv@sign 0036                             l3213 E702  
                           l2391 D4D6                             l3431 F206  
                           l3439 F250                             l3529 F600  
                           l2659 CFD4                             l3547 F660  
                           l3483 F424                             l3459 F338  
                           ?_exp 0056                             ?_log 004F  
                           ?_pow 0060                             STR_1 FF6B  
                           STR_2 FFEA                             STR_3 FFF1  
                           STR_4 FFF8                             STR_5 FF7D  
                           STR_6 FF98                             STR_7 FFA5  
                           STR_8 FFBE                             STR_9 FFD5  
                           u2000 E28E                             u2111 D984  
                           u2040 E2CC                             u2131 D9AC  
                           u2211 DA78                             u2300 D52A  
                           _LATA 000F89                             u2070 E300  
                           u2230 DAB2                             u3030 E5E2  
                           _LATB 000F8A                             _LATC 000F8B  
                           u3040 E5E4                             _LATD 000F8C  
                           u2321 D89E                             _LATE 000F8D  
                           u3130 DF84                             u2235 DAAA  
                           u2308 D52C                             u3300 F0E0  
                           u2341 D8C6                             u2270 DB34  
                           u2430 D40C                             u3305 F0D6  
                           u1810 D57A                             u3420 F370  
                           u3340 F1D8                             u1901 E1F2  
                           u2630 E3E8                             u2550 D7F8  
                           u3350 F218                             u1911 E206  
                           u2640 E3EA                             u1850 D5F8  
                           u2490 D296                             u3530 F638  
                           u3450 F440                     printf@tmpval 006F  
                           u1940 E226                             u2580 D650  
                           u2900 DD90                             u3460 F450  
                           u3380 F250                             u2830 DEC2  
                           u3550 F6F0                             u2751 DDB2  
                           u2920 D376                             u1970 E250  
                           u2771 DDDE                             u2588 D652  
                           u2950 D218                             u3577 FE7C  
                           u3587 FE8E                             _WPUB 000F61  
                  _EUSART1_Write CFD2                             _fabs D0B4  
                           _atan E38E                             _main F70C  
                   ___ftpack@arg 0001                     ___ftpack@exp 0004  
                           fsr2h 000FDA                             fsr2l 000FD9  
                           _sqrt E050                    __CFG_BORV$190 000000  
                           exp@x 0056                             log@x 004F  
                           pow@x 0060                             pow@y 0063  
                           prodh 000FF4                             prodl 000FF3  
                           start 0000                    __CFG_IESO$OFF 000000  
                   ___ftmul@cntr 0026                     ___param_bank 000000  
                   ___ftmul@sign 0027                     ___fttol@exp1 003D  
                          ??_exp 0059                            ??_log 0052  
                   ___fttol@lval 0039                            ??_pow 005F  
 __size_of_OSCILLATOR_Initialize 000E    __end_of_OSCILLATOR_Initialize CFEC  
                          ?_fabs 0004                            ?_atan 0084  
                          ?_main 0001                  __end_of___awdiv D44A  
                __end_of___ftadd E38E                            STR_10 FFCA  
                          STR_11 FFB2                            STR_12 FF8B  
                          STR_13 FFE0                  __end_of___awmod D2CC  
                __end_of___ftdiv D974                  __end_of___ftneg D05E  
                __end_of___lldiv D3C6                            ?_sqrt 0071  
                __end_of___ftmul DA68                  ___awdiv@divisor 0009  
                __end_of___llmod D25C                  __end_of___ftsub D19A  
                __end_of___fttol DB5C                   __CFG_DEBUG$OFF 000000  
                ___awdiv@counter 000B                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                            _TRISE 000F96  
                  __CFG_WRT0$OFF 000000                    __CFG_WRT1$OFF 000000  
                  __CFG_WRT2$OFF 000000                    __CFG_WRT3$OFF 000000  
                   ___lltoft@exp 0011                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                   __CFG_EBTR3$OFF 000000  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000                   __CFG_EBTRB$OFF 000000  
                          _atan2 E98C                    ___awtoft@sign 0018  
                __end_of_dpowers FEC3                            fabs@d 0004  
                          _floor D7B0                            _ldexp D618  
                          _frexp D4DA                            _errno 00E1  
                          _scale EBF6                            atan@f 0084  
                          atan@x 008A                            atan@y 0087  
             __CFG_MCLRE$EXTMCLR 000000                    ___ftpack@sign 0005  
                          _putch CFC8                            main@a 00BD  
                          main@b 00BF                            main@c 00C1  
                          main@f 00BB                   ?_EUSART1_Write 0001  
                          tablat 000FF5                            pow@yi 006D  
                          sqrt@a 0071                            sqrt@i 007D  
                          sqrt@q 007E                            sqrt@x 0081  
                          sqrt@z 007A                            status 000FD8  
                 __CFG_HFOFST$ON 000000                   __CFG_PBADEN$ON 000000  
                    exp@exponent 005C                      ldexp@newexp 0052  
                __initialization CFEC                      log@exponent 0052  
                   __end_of_fabs D0E4                     __end_of_atan E552  
     __end_of_EUSART1_Initialize D03A                     __end_of_main FE9A  
                   __end_of_sqrt E1E2                           ??_fabs 0007  
                         ??_atan 005F                           ??_main 005F  
                  ___fttol@sign1 0038                           ??_sqrt 0074  
                  __activetblptr 000002             __size_of__tdiv_to_l_ 0132  
                         ?_atan2 0094                           _ADCON0 000FC2  
                         _ADCON1 000FC1                           _ADCON2 000FC0  
                         ?_floor 0048                           ?_ldexp 004F  
                         ?_frexp 0001                 __end_of___altoft D344  
               ___llmod@dividend 000E                           ?_scale 0028  
                         _ADRESH 000FC4                           _ADRESL 000FC3  
               ___awdiv@dividend 0007                 __end_of___awtoft D11C  
                         _ANSELA 000F38                           ?_putch 0001  
                         _ANSELB 000F39                           _ANSELC 000F3A  
                         _ANSELD 000F3B                           _ANSELE 000F3C  
               __end_of___ftpack D618                 __end_of___lltoft D1F6  
                 __CFG_WDTEN$OFF 000000                           _RCREG1 000FAE  
                         _RCSTA1 000FAB                           _OSCCON 000FD3  
                         _SPBRG1 000FAF                           _TXREG1 000FAD  
                         _TXSTA1 000FAC                   __CFG_XINST$OFF 000000  
               __end_of__powers_ FEEA                           ___ftge D44A  
                         ___wmul D05E                        ??___awdiv 000B  
                      ??___ftadd 003D                   __CFG_STVREN$ON 000000  
                      ??___awmod 0005                        ??___ftdiv 002E  
                      ??___ftneg 0004                        ??___lldiv 0009  
                      ??___ftmul 001F                        ??___llmod 0016  
                      ??___ftsub 0049                        ??___fttol 0033  
                         atan2@v 00A0                           atan2@x 0097  
                         atan2@y 0094                           _fround E73A  
               ___awdiv@quotient 000D                  ___awmod@divisor 0003  
                ___awmod@counter 0005                           _printf EFFE  
                         main@a1 00A3                           main@b1 00A5  
                         main@c1 00A7                           floor@i 004B  
                         floor@x 0048            ___ftmul@f3_as_product 0023  
                   __mediumconst FE9A                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
       ADC_GetConversion@channel 0005                  ??_EUSART1_Write 0001  
                         sqrt@og 0077                 __end_ofexp@coeff FF2F  
              _SYSTEM_Initialize CFFC                 __end_oflog@coeff FF4A  
                     __accesstop 0060          __end_of__initialization CFF2  
                     ___altoft@c 003E                       ___ftadd@f1 0037  
                     ___ftadd@f2 003A                       ___ftge@ff1 0007  
                     ___ftge@ff2 000A               ?_SYSTEM_Initialize 0001  
                   eval_poly@res 004C                    ___rparam_used 000001  
                     ___ftdiv@f1 0028                       ___ftdiv@f2 002B  
                     ___ftdiv@f3 0032                       ___ftneg@f1 0001  
                     ___awtoft@c 0015                       ___ftmul@f1 0019  
                     ___ftmul@f2 001C                       ___ftsub@f1 0043  
                     ___ftsub@f2 0046                       ___fttol@f1 002F  
                 __pcstackCOMRAM 0001              ??_SYSTEM_Initialize 0001  
                  __end_of_atan2 EBF6                       ___lltoft@c 0009  
                  __end_of_floor D88E                    __end_of_ldexp D6DE  
                  __end_of_frexp D56A                    __end_of_scale EFFE  
                  __end_of_putch CFD2                       __div_to_l_ DC7A  
                     _atan2$1342 009D                       _atan2$1343 009A  
                        ??_atan2 005F                  __div_to_l_@exp1 000C  
                        ??_floor 004B                          ??_ldexp 0054  
                __div_to_l_@cntr 000B                          ??_frexp 0006  
                        ??_scale 002B        __end_of_SYSTEM_Initialize D00E  
                __div_to_l_@quot 0007                          ??_putch 0002  
                     __pbssBANK0 00E1               __size_of_eval_poly 00D2  
                __CFG_PLLCFG$OFF 000000                    __div_to_l_@f1 0001  
                  __div_to_l_@f2 0004               __CFG_CCP2MX$PORTC1 000000  
                        ?___ftge 0007                          ?___wmul 000F  
             __CFG_CCP3MX$PORTB5 000000                        ?___altoft 003E  
                        ?_fround 0028                        ?___awtoft 0015  
                      ?___ftpack 0001                          ?_printf 0049  
                      ?___lltoft 0009          __size_of_ADC_Initialize 0016  
                        _OSCCON2 000FD2                          _OSCTUNE 000F9B  
                        _SPBRGH1 000FB0                  __CFG_PWRTEN$OFF 000000  
              __end_of__npowers_ FF11                          __Hparam 0000  
                     _scale$1340 002B                          __Lparam 0000  
                __size_of___ftge 0090                          ___awdiv D3C6  
                        ___ftadd E1E2                          ___awmod D25C  
                        ___ftdiv D88E                          ___ftneg D03A  
                        ___lldiv D344                  __size_of___wmul 0026  
                        ___ftmul D974                          ___llmod D1F6  
                        ___ftsub D15A                          ___fttol DA68  
                     ??___altoft 0042                          __pcinit CFEC  
                     ??___awtoft 0018                       ??___ftpack 0006  
              __end_of_eval_poly D7B0                  __size_of_fround 0252  
                        __ramtop 1000                       ??___lltoft 000D  
                        __ptext0 F70C                          __ptext1 E050  
                        __ptext2 EFFE                          __ptext3 EBF6  
                        __ptext4 CFC8                          __ptext5 CFD2  
                        __ptext6 E73A                          __ptext7 D25C  
                        __ptext8 D3C6                          __ptext9 DDA2  
                __size_of_printf 070E                      ?__div_to_l_ 0001  
                        _dpowers FE9B            _OSCILLATOR_Initialize CFDE  
                   __size_of_exp 01E8                     __size_of_log 011E  
                atan@val_squared 008E                     __size_of_pow 017C  
               ___awmod@dividend 0001               _EUSART1_Initialize D024  
       ??_PIN_MANAGER_Initialize 0001                          atan@val 0091  
     __size_of_SYSTEM_Initialize 0012                          main@phi 00AF  
                        main@yaw 00B8                          main@psy 00AC  
           end_of_initialization CFF2                          exp@sign 005E  
            ?_EUSART1_Initialize 0001                    __Lmediumconst FE9A  
                ___lldiv@divisor 0005                          pow@sign 006C  
                ___lldiv@counter 000D                          printf@c 0076  
                        printf@f 0049                          postdec2 000FDD  
                        postinc2 000FDE                   __tdiv_to_l_@f1 0001  
                 __tdiv_to_l_@f2 0004             ??_EUSART1_Initialize 0001  
                  ??__tdiv_to_l_ 0007                        _PORTDbits 000F83  
                      _TRISDbits 000F95              EUSART1_Write@txData 0001  
                    ___ftdiv@exp 0035              __size_of__div_to_l_ 0128  
                    ___ftmul@exp 0022                   __end_of___ftge D4DA  
                 __end_of___wmul D084                   _ADC_Initialize D00E  
         ?_OSCILLATOR_Initialize 0001                   __end_of_fround E98C  
                     floor@expon 004E                   __end_of_printf F70C  
            start_initialization CFEC                       eval_poly@d 0046  
                     eval_poly@n 0048                       eval_poly@x 0043  
                     ldexp@value 004F  __size_of_PIN_MANAGER_Initialize 003E  
            __end_of__tdiv_to_l_ DED4                      __end_of_exp E73A  
                    __end_of_log DC7A                      __end_of_pow E050  
                    putch@txData 0002            __end_of_EUSART1_Write CFDE  
                     frexp@value 0001                  ___llmod@divisor 0012  
                ___llmod@counter 0016                         ??___ftge 000D  
                       ??___wmul 0013           __end_of_ADC_Initialize D024  
                       ??_fround 002B                         ??_printf 004E  
              __size_of___altoft 0078                       fround@prec 0031  
              __size_of___awtoft 0038                __size_of___ftpack 00AE  
              __size_of___lltoft 005C                    __pcstackBANK0 0060  
                      _main$1331 00C3                        _main$1332 00C6  
                      _main$1333 00C9                        _main$1334 00CC  
                      _main$1335 00CF                        _main$1336 00D2  
                      _main$1337 00D5           _PIN_MANAGER_Initialize D11C  
                  __pmediumconst FE9A                         ?___awdiv 0007  
                       ?___ftadd 0037                         ?___awmod 0001  
                       ?___ftdiv 0028                         ?___ftneg 0001  
                       ?___lldiv 0001                         ?___ftmul 0019  
                       ?___llmod 000E                         ?___ftsub 0043  
                      __npowers_ FEEA                         ?___fttol 002F  
                ?_ADC_Initialize 0001                 __CFG_PRICLKEN$ON 000000  
                    __tdiv_to_l_ DDA2                     ??__div_to_l_ 0007  
                       _BAUDCON1 000FB8                        _eval_poly D6DE  
                 __size_of_atan2 026A                   __size_of_floor 00DE  
                 __size_of_ldexp 00C6                   __size_of_frexp 0090  
                 __size_of_scale 0408                   __size_of_putch 000A  
                 ___wmul@product 0013                        atan@recip 008D  
                       _PIR1bits 000F9E               __end_of__div_to_l_ DDA2  
               __CFG_WDTPS$32768 000000                       _ADCON0bits 000FC2  
                      main@Axout 00D8                        main@Ayout 00DB  
                      main@Azout 00DE                ___wmul@multiplier 000F  
                     printf@flag 0065                       printf@fval 0073  
                     printf@prec 0067                       ?_eval_poly 0043  
                      main@pitch 00B5                        main@theta 00A9  
            __end_ofatan@coeff_a FF5C              __end_ofatan@coeff_b FF6B  
                    _INTCON2bits 000FF1                        frexp@eptr 0004  
                       __Hrparam 0000                         __Lrparam 0000  
              _ADC_GetConversion D084               __CFG_BOREN$SBORDIS 000000  
              __CFG_P2BMX$PORTD2 000000          ??_OSCILLATOR_Initialize 0001  
             ?_ADC_GetConversion 0001                 __size_of___awdiv 0084  
               __size_of___ftadd 01AC                 __size_of___awmod 0070  
               __size_of___ftdiv 00E6                 __size_of___ftneg 0024  
               __size_of___lldiv 0082                         ___altoft D2CC  
               __size_of___ftmul 00F4                 __size_of___llmod 0066  
               __size_of___ftsub 0040                 __size_of___fttol 00F4  
    __size_of_EUSART1_Initialize 0016                         ___awtoft D0E4  
                       ___ftpack D56A                      _fround$1338 002E  
                    _fround$1339 002B                         ___lltoft D19A  
            ??_ADC_GetConversion 0003                         _exp$1346 0059  
                       __ptext10 DC7A                         __ptext11 D1F6  
                       __ptext20 D2CC                         __ptext12 D344  
                       __ptext21 D0E4                         __ptext13 DED4  
                       __ptext30 D44A                         __ptext22 D19A  
                       __ptext14 DB5C                         __ptext31 D88E  
                       __ptext23 E98C                         __ptext15 E552  
                       __ptext40 D084                         __ptext32 D15A  
                       __ptext24 E38E                         __ptext16 D618  
                       __ptext33 E1E2                         __ptext25 D0B4  
                       __ptext17 D7B0                         __ptext34 D56A  
                       __ptext26 D03A                         __ptext18 D4DA  
                       __ptext35 CFFC                         __ptext27 D6DE  
                       __ptext19 DA68                         __ptext36 D11C  
                       __ptext28 D05E                         __ptext37 CFDE  
                       __ptext29 D974                         __ptext38 D024  
                       __ptext39 D00E                         __powers_ FEC3  
                       _pow$1344 0066                         _pow$1345 0069  
                  __size_of_fabs 0030                    __size_of_atan 01C4  
                  __size_of_main 078E                    __size_of_sqrt 0192  
      __end_of_ADC_GetConversion D0B4                        printf@exp 006D  
                      printf@val 0069                         main@roll 00B2  
                    atan@coeff_a FF4A                      atan@coeff_b FF5C  
                       exp@coeff FF11                         log@coeff FF2F  
                    ??_eval_poly 004A                         scale@scl 002E  
               __tdiv_to_l_@exp1 000F                 __tdiv_to_l_@cntr 000E  
               __tdiv_to_l_@quot 000A                 ___lldiv@dividend 0001  
        ?_PIN_MANAGER_Initialize 0001                       _RCSTA1bits 000FAB  
               ??_ADC_Initialize 0001                         printf@ap 0063  
         __size_of_EUSART1_Write 000C                     ?__tdiv_to_l_ 0001  
                    _printf$1341 0060                 ___lldiv@quotient 0009  
              __CFG_T3CMX$PORTC0 000000   __end_of_PIN_MANAGER_Initialize D15A  
              __CFG_FOSC$INTIO67 000000       __size_of_ADC_GetConversion 0030  
